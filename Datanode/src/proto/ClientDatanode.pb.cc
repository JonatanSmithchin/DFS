// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientDatanode.proto

#include "proto/ClientDatanode.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ClientDatanode {
PROTOBUF_CONSTEXPR shutdownDatanodeRequest::shutdownDatanodeRequest(
    ::_pbi::ConstantInitialized) {}
struct shutdownDatanodeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR shutdownDatanodeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~shutdownDatanodeRequestDefaultTypeInternal() {}
  union {
    shutdownDatanodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 shutdownDatanodeRequestDefaultTypeInternal _shutdownDatanodeRequest_default_instance_;
PROTOBUF_CONSTEXPR shutdownDatanodeResponse::shutdownDatanodeResponse(
    ::_pbi::ConstantInitialized) {}
struct shutdownDatanodeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR shutdownDatanodeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~shutdownDatanodeResponseDefaultTypeInternal() {}
  union {
    shutdownDatanodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 shutdownDatanodeResponseDefaultTypeInternal _shutdownDatanodeResponse_default_instance_;
PROTOBUF_CONSTEXPR transferBlockRequest::transferBlockRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.blockid_)*/uint64_t{0u}
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_.checksum_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct transferBlockRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR transferBlockRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~transferBlockRequestDefaultTypeInternal() {}
  union {
    transferBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 transferBlockRequestDefaultTypeInternal _transferBlockRequest_default_instance_;
PROTOBUF_CONSTEXPR transferBlockResponse::transferBlockResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct transferBlockResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR transferBlockResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~transferBlockResponseDefaultTypeInternal() {}
  union {
    transferBlockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 transferBlockResponseDefaultTypeInternal _transferBlockResponse_default_instance_;
PROTOBUF_CONSTEXPR downloadBlockRequest::downloadBlockRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blockid_)*/{}
  , /*decltype(_impl_._blockid_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct downloadBlockRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR downloadBlockRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~downloadBlockRequestDefaultTypeInternal() {}
  union {
    downloadBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 downloadBlockRequestDefaultTypeInternal _downloadBlockRequest_default_instance_;
PROTOBUF_CONSTEXPR downloadBlockResponse::downloadBlockResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.checksum_)*/0u
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct downloadBlockResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR downloadBlockResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~downloadBlockResponseDefaultTypeInternal() {}
  union {
    downloadBlockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 downloadBlockResponseDefaultTypeInternal _downloadBlockResponse_default_instance_;
}  // namespace ClientDatanode
static ::_pb::Metadata file_level_metadata_ClientDatanode_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ClientDatanode_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ClientDatanode_2eproto = nullptr;

const uint32_t TableStruct_ClientDatanode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientDatanode::shutdownDatanodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientDatanode::shutdownDatanodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientDatanode::transferBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientDatanode::transferBlockRequest, _impl_.blockid_),
  PROTOBUF_FIELD_OFFSET(::ClientDatanode::transferBlockRequest, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::ClientDatanode::transferBlockRequest, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::ClientDatanode::transferBlockRequest, _impl_.checksum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientDatanode::transferBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientDatanode::transferBlockResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientDatanode::downloadBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientDatanode::downloadBlockRequest, _impl_.blockid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientDatanode::downloadBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientDatanode::downloadBlockResponse, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::ClientDatanode::downloadBlockResponse, _impl_.checksum_),
  PROTOBUF_FIELD_OFFSET(::ClientDatanode::downloadBlockResponse, _impl_.status_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ClientDatanode::shutdownDatanodeRequest)},
  { 6, -1, -1, sizeof(::ClientDatanode::shutdownDatanodeResponse)},
  { 12, -1, -1, sizeof(::ClientDatanode::transferBlockRequest)},
  { 22, -1, -1, sizeof(::ClientDatanode::transferBlockResponse)},
  { 29, -1, -1, sizeof(::ClientDatanode::downloadBlockRequest)},
  { 36, -1, -1, sizeof(::ClientDatanode::downloadBlockResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ClientDatanode::_shutdownDatanodeRequest_default_instance_._instance,
  &::ClientDatanode::_shutdownDatanodeResponse_default_instance_._instance,
  &::ClientDatanode::_transferBlockRequest_default_instance_._instance,
  &::ClientDatanode::_transferBlockResponse_default_instance_._instance,
  &::ClientDatanode::_downloadBlockRequest_default_instance_._instance,
  &::ClientDatanode::_downloadBlockResponse_default_instance_._instance,
};

const char descriptor_table_protodef_ClientDatanode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024ClientDatanode.proto\022\016ClientDatanode\032\t"
  "dfs.proto\"\031\n\027shutdownDatanodeRequest\"\032\n\030"
  "shutdownDatanodeResponse\"X\n\024transferBloc"
  "kRequest\022\017\n\007blockId\030\001 \001(\004\022\014\n\004size\030\002 \001(\004\022"
  "\017\n\007Content\030\003 \001(\014\022\020\n\010checkSum\030\004 \001(\r\"G\n\025tr"
  "ansferBlockResponse\022.\n\006status\030\001 \001(\0162\036.Cl"
  "ientDatanode.transferStatus\"\'\n\024downloadB"
  "lockRequest\022\017\n\007blockId\030\001 \003(\004\"j\n\025download"
  "BlockResponse\022\017\n\007Content\030\001 \001(\014\022\020\n\010checkS"
  "um\030\002 \001(\r\022.\n\006status\030\003 \001(\0162\036.ClientDatanod"
  "e.transferStatus*1\n\016transferStatus\022\013\n\007Un"
  "knoen\020\000\022\006\n\002OK\020\001\022\n\n\006Failed\020\0022\315\001\n\013FileServ"
  "ice\022^\n\rtransferBlock\022$.ClientDatanode.tr"
  "ansferBlockRequest\032%.ClientDatanode.tran"
  "sferBlockResponse(\001\022^\n\rdownloadBlock\022$.C"
  "lientDatanode.downloadBlockRequest\032%.Cli"
  "entDatanode.downloadBlockResponse0\001b\006pro"
  "to3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ClientDatanode_2eproto_deps[1] = {
  &::descriptor_table_dfs_2eproto,
};
static ::_pbi::once_flag descriptor_table_ClientDatanode_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ClientDatanode_2eproto = {
    false, false, 683, descriptor_table_protodef_ClientDatanode_2eproto,
    "ClientDatanode.proto",
    &descriptor_table_ClientDatanode_2eproto_once, descriptor_table_ClientDatanode_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_ClientDatanode_2eproto::offsets,
    file_level_metadata_ClientDatanode_2eproto, file_level_enum_descriptors_ClientDatanode_2eproto,
    file_level_service_descriptors_ClientDatanode_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ClientDatanode_2eproto_getter() {
  return &descriptor_table_ClientDatanode_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ClientDatanode_2eproto(&descriptor_table_ClientDatanode_2eproto);
namespace ClientDatanode {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* transferStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ClientDatanode_2eproto);
  return file_level_enum_descriptors_ClientDatanode_2eproto[0];
}
bool transferStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class shutdownDatanodeRequest::_Internal {
 public:
};

shutdownDatanodeRequest::shutdownDatanodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ClientDatanode.shutdownDatanodeRequest)
}
shutdownDatanodeRequest::shutdownDatanodeRequest(const shutdownDatanodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  shutdownDatanodeRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ClientDatanode.shutdownDatanodeRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData shutdownDatanodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*shutdownDatanodeRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata shutdownDatanodeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientDatanode_2eproto_getter, &descriptor_table_ClientDatanode_2eproto_once,
      file_level_metadata_ClientDatanode_2eproto[0]);
}

// ===================================================================

class shutdownDatanodeResponse::_Internal {
 public:
};

shutdownDatanodeResponse::shutdownDatanodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ClientDatanode.shutdownDatanodeResponse)
}
shutdownDatanodeResponse::shutdownDatanodeResponse(const shutdownDatanodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  shutdownDatanodeResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ClientDatanode.shutdownDatanodeResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData shutdownDatanodeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*shutdownDatanodeResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata shutdownDatanodeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientDatanode_2eproto_getter, &descriptor_table_ClientDatanode_2eproto_once,
      file_level_metadata_ClientDatanode_2eproto[1]);
}

// ===================================================================

class transferBlockRequest::_Internal {
 public:
};

transferBlockRequest::transferBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientDatanode.transferBlockRequest)
}
transferBlockRequest::transferBlockRequest(const transferBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  transferBlockRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.blockid_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.checksum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.blockid_, &from._impl_.blockid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.checksum_) -
    reinterpret_cast<char*>(&_impl_.blockid_)) + sizeof(_impl_.checksum_));
  // @@protoc_insertion_point(copy_constructor:ClientDatanode.transferBlockRequest)
}

inline void transferBlockRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.blockid_){uint64_t{0u}}
    , decltype(_impl_.size_){uint64_t{0u}}
    , decltype(_impl_.checksum_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

transferBlockRequest::~transferBlockRequest() {
  // @@protoc_insertion_point(destructor:ClientDatanode.transferBlockRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void transferBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void transferBlockRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void transferBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientDatanode.transferBlockRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  ::memset(&_impl_.blockid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.checksum_) -
      reinterpret_cast<char*>(&_impl_.blockid_)) + sizeof(_impl_.checksum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transferBlockRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 blockId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.blockid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 checkSum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* transferBlockRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientDatanode.transferBlockRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 blockId = 1;
  if (this->_internal_blockid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_blockid(), target);
  }

  // uint64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_size(), target);
  }

  // bytes Content = 3;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_content(), target);
  }

  // uint32 checkSum = 4;
  if (this->_internal_checksum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_checksum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientDatanode.transferBlockRequest)
  return target;
}

size_t transferBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientDatanode.transferBlockRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // uint64 blockId = 1;
  if (this->_internal_blockid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_blockid());
  }

  // uint64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // uint32 checkSum = 4;
  if (this->_internal_checksum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_checksum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transferBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    transferBlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transferBlockRequest::GetClassData() const { return &_class_data_; }


void transferBlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<transferBlockRequest*>(&to_msg);
  auto& from = static_cast<const transferBlockRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientDatanode.transferBlockRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_blockid() != 0) {
    _this->_internal_set_blockid(from._internal_blockid());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_checksum() != 0) {
    _this->_internal_set_checksum(from._internal_checksum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transferBlockRequest::CopyFrom(const transferBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientDatanode.transferBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transferBlockRequest::IsInitialized() const {
  return true;
}

void transferBlockRequest::InternalSwap(transferBlockRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(transferBlockRequest, _impl_.checksum_)
      + sizeof(transferBlockRequest::_impl_.checksum_)
      - PROTOBUF_FIELD_OFFSET(transferBlockRequest, _impl_.blockid_)>(
          reinterpret_cast<char*>(&_impl_.blockid_),
          reinterpret_cast<char*>(&other->_impl_.blockid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata transferBlockRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientDatanode_2eproto_getter, &descriptor_table_ClientDatanode_2eproto_once,
      file_level_metadata_ClientDatanode_2eproto[2]);
}

// ===================================================================

class transferBlockResponse::_Internal {
 public:
};

transferBlockResponse::transferBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientDatanode.transferBlockResponse)
}
transferBlockResponse::transferBlockResponse(const transferBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  transferBlockResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:ClientDatanode.transferBlockResponse)
}

inline void transferBlockResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

transferBlockResponse::~transferBlockResponse() {
  // @@protoc_insertion_point(destructor:ClientDatanode.transferBlockResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void transferBlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void transferBlockResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void transferBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientDatanode.transferBlockResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transferBlockResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ClientDatanode.transferStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::ClientDatanode::transferStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* transferBlockResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientDatanode.transferBlockResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientDatanode.transferStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientDatanode.transferBlockResponse)
  return target;
}

size_t transferBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientDatanode.transferBlockResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ClientDatanode.transferStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transferBlockResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    transferBlockResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transferBlockResponse::GetClassData() const { return &_class_data_; }


void transferBlockResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<transferBlockResponse*>(&to_msg);
  auto& from = static_cast<const transferBlockResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientDatanode.transferBlockResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transferBlockResponse::CopyFrom(const transferBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientDatanode.transferBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transferBlockResponse::IsInitialized() const {
  return true;
}

void transferBlockResponse::InternalSwap(transferBlockResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata transferBlockResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientDatanode_2eproto_getter, &descriptor_table_ClientDatanode_2eproto_once,
      file_level_metadata_ClientDatanode_2eproto[3]);
}

// ===================================================================

class downloadBlockRequest::_Internal {
 public:
};

downloadBlockRequest::downloadBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientDatanode.downloadBlockRequest)
}
downloadBlockRequest::downloadBlockRequest(const downloadBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  downloadBlockRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blockid_){from._impl_.blockid_}
    , /*decltype(_impl_._blockid_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ClientDatanode.downloadBlockRequest)
}

inline void downloadBlockRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blockid_){arena}
    , /*decltype(_impl_._blockid_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

downloadBlockRequest::~downloadBlockRequest() {
  // @@protoc_insertion_point(destructor:ClientDatanode.downloadBlockRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void downloadBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blockid_.~RepeatedField();
}

void downloadBlockRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void downloadBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientDatanode.downloadBlockRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blockid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* downloadBlockRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 blockId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_blockid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_blockid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* downloadBlockRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientDatanode.downloadBlockRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 blockId = 1;
  {
    int byte_size = _impl_._blockid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_blockid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientDatanode.downloadBlockRequest)
  return target;
}

size_t downloadBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientDatanode.downloadBlockRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 blockId = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.blockid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._blockid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData downloadBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    downloadBlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*downloadBlockRequest::GetClassData() const { return &_class_data_; }


void downloadBlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<downloadBlockRequest*>(&to_msg);
  auto& from = static_cast<const downloadBlockRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientDatanode.downloadBlockRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blockid_.MergeFrom(from._impl_.blockid_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void downloadBlockRequest::CopyFrom(const downloadBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientDatanode.downloadBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool downloadBlockRequest::IsInitialized() const {
  return true;
}

void downloadBlockRequest::InternalSwap(downloadBlockRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blockid_.InternalSwap(&other->_impl_.blockid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata downloadBlockRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientDatanode_2eproto_getter, &descriptor_table_ClientDatanode_2eproto_once,
      file_level_metadata_ClientDatanode_2eproto[4]);
}

// ===================================================================

class downloadBlockResponse::_Internal {
 public:
};

downloadBlockResponse::downloadBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientDatanode.downloadBlockResponse)
}
downloadBlockResponse::downloadBlockResponse(const downloadBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  downloadBlockResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.checksum_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.checksum_, &from._impl_.checksum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.checksum_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:ClientDatanode.downloadBlockResponse)
}

inline void downloadBlockResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.checksum_){0u}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

downloadBlockResponse::~downloadBlockResponse() {
  // @@protoc_insertion_point(destructor:ClientDatanode.downloadBlockResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void downloadBlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void downloadBlockResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void downloadBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientDatanode.downloadBlockResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  ::memset(&_impl_.checksum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.checksum_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* downloadBlockResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 checkSum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ClientDatanode.transferStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::ClientDatanode::transferStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* downloadBlockResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientDatanode.downloadBlockResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Content = 1;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_content(), target);
  }

  // uint32 checkSum = 2;
  if (this->_internal_checksum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_checksum(), target);
  }

  // .ClientDatanode.transferStatus status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientDatanode.downloadBlockResponse)
  return target;
}

size_t downloadBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientDatanode.downloadBlockResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Content = 1;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // uint32 checkSum = 2;
  if (this->_internal_checksum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_checksum());
  }

  // .ClientDatanode.transferStatus status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData downloadBlockResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    downloadBlockResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*downloadBlockResponse::GetClassData() const { return &_class_data_; }


void downloadBlockResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<downloadBlockResponse*>(&to_msg);
  auto& from = static_cast<const downloadBlockResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientDatanode.downloadBlockResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_checksum() != 0) {
    _this->_internal_set_checksum(from._internal_checksum());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void downloadBlockResponse::CopyFrom(const downloadBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientDatanode.downloadBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool downloadBlockResponse::IsInitialized() const {
  return true;
}

void downloadBlockResponse::InternalSwap(downloadBlockResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(downloadBlockResponse, _impl_.status_)
      + sizeof(downloadBlockResponse::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(downloadBlockResponse, _impl_.checksum_)>(
          reinterpret_cast<char*>(&_impl_.checksum_),
          reinterpret_cast<char*>(&other->_impl_.checksum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata downloadBlockResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientDatanode_2eproto_getter, &descriptor_table_ClientDatanode_2eproto_once,
      file_level_metadata_ClientDatanode_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ClientDatanode
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ClientDatanode::shutdownDatanodeRequest*
Arena::CreateMaybeMessage< ::ClientDatanode::shutdownDatanodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientDatanode::shutdownDatanodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientDatanode::shutdownDatanodeResponse*
Arena::CreateMaybeMessage< ::ClientDatanode::shutdownDatanodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientDatanode::shutdownDatanodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientDatanode::transferBlockRequest*
Arena::CreateMaybeMessage< ::ClientDatanode::transferBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientDatanode::transferBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientDatanode::transferBlockResponse*
Arena::CreateMaybeMessage< ::ClientDatanode::transferBlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientDatanode::transferBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientDatanode::downloadBlockRequest*
Arena::CreateMaybeMessage< ::ClientDatanode::downloadBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientDatanode::downloadBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientDatanode::downloadBlockResponse*
Arena::CreateMaybeMessage< ::ClientDatanode::downloadBlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientDatanode::downloadBlockResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
