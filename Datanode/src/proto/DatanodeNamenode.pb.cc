// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DatanodeNamenode.proto

#include "proto/DatanodeNamenode.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace DatanodeNamenode {
PROTOBUF_CONSTEXPR DatanodeRegister::DatanodeRegister(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.softwareversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DatanodeRegisterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatanodeRegisterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatanodeRegisterDefaultTypeInternal() {}
  union {
    DatanodeRegister _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatanodeRegisterDefaultTypeInternal _DatanodeRegister_default_instance_;
PROTOBUF_CONSTEXPR DatanodeCommand::DatanodeCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.balancecmd_)*/nullptr
  , /*decltype(_impl_.blkcmd_)*/nullptr
  , /*decltype(_impl_.recoverycmd_)*/nullptr
  , /*decltype(_impl_.finalizecmd_)*/nullptr
  , /*decltype(_impl_.keyupdatecmd_)*/nullptr
  , /*decltype(_impl_.registercmd_)*/nullptr
  , /*decltype(_impl_.blkidcmd_)*/nullptr
  , /*decltype(_impl_.cachecmd_)*/nullptr
  , /*decltype(_impl_.commandtype_)*/0} {}
struct DatanodeCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatanodeCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatanodeCommandDefaultTypeInternal() {}
  union {
    DatanodeCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatanodeCommandDefaultTypeInternal _DatanodeCommand_default_instance_;
PROTOBUF_CONSTEXPR BalanceBandwidth::BalanceBandwidth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bandwidth_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BalanceBandwidthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BalanceBandwidthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BalanceBandwidthDefaultTypeInternal() {}
  union {
    BalanceBandwidth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BalanceBandwidthDefaultTypeInternal _BalanceBandwidth_default_instance_;
PROTOBUF_CONSTEXPR BlockCommand::BlockCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blocks_)*/{}
  , /*decltype(_impl_.targets_)*/{}
  , /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockCommandDefaultTypeInternal() {}
  union {
    BlockCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockCommandDefaultTypeInternal _BlockCommand_default_instance_;
PROTOBUF_CONSTEXPR BlockRecovery::BlockRecovery(
    ::_pbi::ConstantInitialized) {}
struct BlockRecoveryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockRecoveryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockRecoveryDefaultTypeInternal() {}
  union {
    BlockRecovery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockRecoveryDefaultTypeInternal _BlockRecovery_default_instance_;
PROTOBUF_CONSTEXPR Finalize::Finalize(
    ::_pbi::ConstantInitialized) {}
struct FinalizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FinalizeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FinalizeDefaultTypeInternal() {}
  union {
    Finalize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FinalizeDefaultTypeInternal _Finalize_default_instance_;
PROTOBUF_CONSTEXPR KeyUpdate::KeyUpdate(
    ::_pbi::ConstantInitialized) {}
struct KeyUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyUpdateDefaultTypeInternal() {}
  union {
    KeyUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyUpdateDefaultTypeInternal _KeyUpdate_default_instance_;
PROTOBUF_CONSTEXPR Register::Register(
    ::_pbi::ConstantInitialized) {}
struct RegisterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterDefaultTypeInternal() {}
  union {
    Register _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterDefaultTypeInternal _Register_default_instance_;
PROTOBUF_CONSTEXPR CacheCommand::CacheCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blocks_)*/{}
  , /*decltype(_impl_._blocks_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CacheCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CacheCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CacheCommandDefaultTypeInternal() {}
  union {
    CacheCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CacheCommandDefaultTypeInternal _CacheCommand_default_instance_;
PROTOBUF_CONSTEXPR BlockId::BlockId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blockids_)*/{}
  , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockIdDefaultTypeInternal() {}
  union {
    BlockId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockIdDefaultTypeInternal _BlockId_default_instance_;
PROTOBUF_CONSTEXPR ReceivedDeletedBlockInfo::ReceivedDeletedBlockInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_)*/nullptr
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReceivedDeletedBlockInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReceivedDeletedBlockInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReceivedDeletedBlockInfoDefaultTypeInternal() {}
  union {
    ReceivedDeletedBlockInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReceivedDeletedBlockInfoDefaultTypeInternal _ReceivedDeletedBlockInfo_default_instance_;
PROTOBUF_CONSTEXPR RegisterDatanodeRequest::RegisterDatanodeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.registration_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterDatanodeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterDatanodeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterDatanodeRequestDefaultTypeInternal() {}
  union {
    RegisterDatanodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterDatanodeRequestDefaultTypeInternal _RegisterDatanodeRequest_default_instance_;
PROTOBUF_CONSTEXPR RegisterDatanodeResponse::RegisterDatanodeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.registration_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterDatanodeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterDatanodeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterDatanodeResponseDefaultTypeInternal() {}
  union {
    RegisterDatanodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterDatanodeResponseDefaultTypeInternal _RegisterDatanodeResponse_default_instance_;
PROTOBUF_CONSTEXPR HeartBeatRequest::HeartBeatRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.registration_)*/nullptr
  , /*decltype(_impl_.xmitsinprogress_)*/0u
  , /*decltype(_impl_.xceivercount_)*/0u
  , /*decltype(_impl_.cachecapacity_)*/uint64_t{0u}
  , /*decltype(_impl_.cacheused_)*/uint64_t{0u}
  , /*decltype(_impl_.failedvolums_)*/0u} {}
struct HeartBeatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartBeatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartBeatRequestDefaultTypeInternal() {}
  union {
    HeartBeatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartBeatRequestDefaultTypeInternal _HeartBeatRequest_default_instance_;
PROTOBUF_CONSTEXPR HeartBeatResponse::HeartBeatResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cmds_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartBeatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartBeatResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartBeatResponseDefaultTypeInternal() {}
  union {
    HeartBeatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartBeatResponseDefaultTypeInternal _HeartBeatResponse_default_instance_;
PROTOBUF_CONSTEXPR blockReportRequest::blockReportRequest(
    ::_pbi::ConstantInitialized) {}
struct blockReportRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR blockReportRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~blockReportRequestDefaultTypeInternal() {}
  union {
    blockReportRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 blockReportRequestDefaultTypeInternal _blockReportRequest_default_instance_;
PROTOBUF_CONSTEXPR blockReportResponse::blockReportResponse(
    ::_pbi::ConstantInitialized) {}
struct blockReportResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR blockReportResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~blockReportResponseDefaultTypeInternal() {}
  union {
    blockReportResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 blockReportResponseDefaultTypeInternal _blockReportResponse_default_instance_;
PROTOBUF_CONSTEXPR cacheReportRequest::cacheReportRequest(
    ::_pbi::ConstantInitialized) {}
struct cacheReportRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR cacheReportRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~cacheReportRequestDefaultTypeInternal() {}
  union {
    cacheReportRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 cacheReportRequestDefaultTypeInternal _cacheReportRequest_default_instance_;
PROTOBUF_CONSTEXPR cacheReportResponse::cacheReportResponse(
    ::_pbi::ConstantInitialized) {}
struct cacheReportResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR cacheReportResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~cacheReportResponseDefaultTypeInternal() {}
  union {
    cacheReportResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 cacheReportResponseDefaultTypeInternal _cacheReportResponse_default_instance_;
PROTOBUF_CONSTEXPR BlockReceivedAndDeletedRequest::BlockReceivedAndDeletedRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blocks_)*/{}
  , /*decltype(_impl_.registration_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockReceivedAndDeletedRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockReceivedAndDeletedRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockReceivedAndDeletedRequestDefaultTypeInternal() {}
  union {
    BlockReceivedAndDeletedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockReceivedAndDeletedRequestDefaultTypeInternal _BlockReceivedAndDeletedRequest_default_instance_;
PROTOBUF_CONSTEXPR BlockReceivedAndDeletedResponse::BlockReceivedAndDeletedResponse(
    ::_pbi::ConstantInitialized) {}
struct BlockReceivedAndDeletedResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockReceivedAndDeletedResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockReceivedAndDeletedResponseDefaultTypeInternal() {}
  union {
    BlockReceivedAndDeletedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockReceivedAndDeletedResponseDefaultTypeInternal _BlockReceivedAndDeletedResponse_default_instance_;
PROTOBUF_CONSTEXPR ErrorReportRequest::ErrorReportRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.registration_)*/nullptr
  , /*decltype(_impl_.errorcode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ErrorReportRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorReportRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorReportRequestDefaultTypeInternal() {}
  union {
    ErrorReportRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorReportRequestDefaultTypeInternal _ErrorReportRequest_default_instance_;
PROTOBUF_CONSTEXPR ErrorReportResponse::ErrorReportResponse(
    ::_pbi::ConstantInitialized) {}
struct ErrorReportResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorReportResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorReportResponseDefaultTypeInternal() {}
  union {
    ErrorReportResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorReportResponseDefaultTypeInternal _ErrorReportResponse_default_instance_;
PROTOBUF_CONSTEXPR ReportBadBlockRequest::ReportBadBlockRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blocks_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReportBadBlockRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportBadBlockRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportBadBlockRequestDefaultTypeInternal() {}
  union {
    ReportBadBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportBadBlockRequestDefaultTypeInternal _ReportBadBlockRequest_default_instance_;
PROTOBUF_CONSTEXPR ReportBadBlockResponse::ReportBadBlockResponse(
    ::_pbi::ConstantInitialized) {}
struct ReportBadBlockResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportBadBlockResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportBadBlockResponseDefaultTypeInternal() {}
  union {
    ReportBadBlockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportBadBlockResponseDefaultTypeInternal _ReportBadBlockResponse_default_instance_;
}  // namespace DatanodeNamenode
static ::_pb::Metadata file_level_metadata_DatanodeNamenode_2eproto[25];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_DatanodeNamenode_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_DatanodeNamenode_2eproto = nullptr;

const uint32_t TableStruct_DatanodeNamenode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::DatanodeRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::DatanodeRegister, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::DatanodeRegister, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::DatanodeRegister, _impl_.softwareversion_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::DatanodeCommand, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::DatanodeCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::DatanodeCommand, _impl_.commandtype_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::DatanodeCommand, _impl_.balancecmd_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::DatanodeCommand, _impl_.blkcmd_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::DatanodeCommand, _impl_.recoverycmd_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::DatanodeCommand, _impl_.finalizecmd_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::DatanodeCommand, _impl_.keyupdatecmd_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::DatanodeCommand, _impl_.registercmd_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::DatanodeCommand, _impl_.blkidcmd_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::DatanodeCommand, _impl_.cachecmd_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::BalanceBandwidth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::BalanceBandwidth, _impl_.bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::BlockCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::BlockCommand, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::BlockCommand, _impl_.blocks_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::BlockCommand, _impl_.targets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::BlockRecovery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::Finalize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::KeyUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::Register, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::CacheCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::CacheCommand, _impl_.blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::BlockId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::BlockId, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::BlockId, _impl_.blockids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::ReceivedDeletedBlockInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::ReceivedDeletedBlockInfo, _impl_.block_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::ReceivedDeletedBlockInfo, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::RegisterDatanodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::RegisterDatanodeRequest, _impl_.registration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::RegisterDatanodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::RegisterDatanodeResponse, _impl_.registration_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::HeartBeatRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::HeartBeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::HeartBeatRequest, _impl_.registration_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::HeartBeatRequest, _impl_.xmitsinprogress_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::HeartBeatRequest, _impl_.xceivercount_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::HeartBeatRequest, _impl_.failedvolums_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::HeartBeatRequest, _impl_.cachecapacity_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::HeartBeatRequest, _impl_.cacheused_),
  ~0u,
  0,
  1,
  4,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::HeartBeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::HeartBeatResponse, _impl_.cmds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::blockReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::blockReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::cacheReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::cacheReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::BlockReceivedAndDeletedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::BlockReceivedAndDeletedRequest, _impl_.registration_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::BlockReceivedAndDeletedRequest, _impl_.blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::BlockReceivedAndDeletedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::ErrorReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::ErrorReportRequest, _impl_.registration_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::ErrorReportRequest, _impl_.errorcode_),
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::ErrorReportRequest, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::ErrorReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::ReportBadBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::ReportBadBlockRequest, _impl_.blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeNamenode::ReportBadBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DatanodeNamenode::DatanodeRegister)},
  { 9, 24, -1, sizeof(::DatanodeNamenode::DatanodeCommand)},
  { 33, -1, -1, sizeof(::DatanodeNamenode::BalanceBandwidth)},
  { 40, -1, -1, sizeof(::DatanodeNamenode::BlockCommand)},
  { 49, -1, -1, sizeof(::DatanodeNamenode::BlockRecovery)},
  { 55, -1, -1, sizeof(::DatanodeNamenode::Finalize)},
  { 61, -1, -1, sizeof(::DatanodeNamenode::KeyUpdate)},
  { 67, -1, -1, sizeof(::DatanodeNamenode::Register)},
  { 73, -1, -1, sizeof(::DatanodeNamenode::CacheCommand)},
  { 80, -1, -1, sizeof(::DatanodeNamenode::BlockId)},
  { 88, -1, -1, sizeof(::DatanodeNamenode::ReceivedDeletedBlockInfo)},
  { 96, -1, -1, sizeof(::DatanodeNamenode::RegisterDatanodeRequest)},
  { 103, -1, -1, sizeof(::DatanodeNamenode::RegisterDatanodeResponse)},
  { 110, 122, -1, sizeof(::DatanodeNamenode::HeartBeatRequest)},
  { 128, -1, -1, sizeof(::DatanodeNamenode::HeartBeatResponse)},
  { 135, -1, -1, sizeof(::DatanodeNamenode::blockReportRequest)},
  { 141, -1, -1, sizeof(::DatanodeNamenode::blockReportResponse)},
  { 147, -1, -1, sizeof(::DatanodeNamenode::cacheReportRequest)},
  { 153, -1, -1, sizeof(::DatanodeNamenode::cacheReportResponse)},
  { 159, -1, -1, sizeof(::DatanodeNamenode::BlockReceivedAndDeletedRequest)},
  { 167, -1, -1, sizeof(::DatanodeNamenode::BlockReceivedAndDeletedResponse)},
  { 173, -1, -1, sizeof(::DatanodeNamenode::ErrorReportRequest)},
  { 182, -1, -1, sizeof(::DatanodeNamenode::ErrorReportResponse)},
  { 188, -1, -1, sizeof(::DatanodeNamenode::ReportBadBlockRequest)},
  { 195, -1, -1, sizeof(::DatanodeNamenode::ReportBadBlockResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::DatanodeNamenode::_DatanodeRegister_default_instance_._instance,
  &::DatanodeNamenode::_DatanodeCommand_default_instance_._instance,
  &::DatanodeNamenode::_BalanceBandwidth_default_instance_._instance,
  &::DatanodeNamenode::_BlockCommand_default_instance_._instance,
  &::DatanodeNamenode::_BlockRecovery_default_instance_._instance,
  &::DatanodeNamenode::_Finalize_default_instance_._instance,
  &::DatanodeNamenode::_KeyUpdate_default_instance_._instance,
  &::DatanodeNamenode::_Register_default_instance_._instance,
  &::DatanodeNamenode::_CacheCommand_default_instance_._instance,
  &::DatanodeNamenode::_BlockId_default_instance_._instance,
  &::DatanodeNamenode::_ReceivedDeletedBlockInfo_default_instance_._instance,
  &::DatanodeNamenode::_RegisterDatanodeRequest_default_instance_._instance,
  &::DatanodeNamenode::_RegisterDatanodeResponse_default_instance_._instance,
  &::DatanodeNamenode::_HeartBeatRequest_default_instance_._instance,
  &::DatanodeNamenode::_HeartBeatResponse_default_instance_._instance,
  &::DatanodeNamenode::_blockReportRequest_default_instance_._instance,
  &::DatanodeNamenode::_blockReportResponse_default_instance_._instance,
  &::DatanodeNamenode::_cacheReportRequest_default_instance_._instance,
  &::DatanodeNamenode::_cacheReportResponse_default_instance_._instance,
  &::DatanodeNamenode::_BlockReceivedAndDeletedRequest_default_instance_._instance,
  &::DatanodeNamenode::_BlockReceivedAndDeletedResponse_default_instance_._instance,
  &::DatanodeNamenode::_ErrorReportRequest_default_instance_._instance,
  &::DatanodeNamenode::_ErrorReportResponse_default_instance_._instance,
  &::DatanodeNamenode::_ReportBadBlockRequest_default_instance_._instance,
  &::DatanodeNamenode::_ReportBadBlockResponse_default_instance_._instance,
};

const char descriptor_table_protodef_DatanodeNamenode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026DatanodeNamenode.proto\022\020DatanodeNameno"
  "de\032\tdfs.proto\"a\n\020DatanodeRegister\022\027\n\002id\030"
  "\001 \001(\0132\013.DatanodeID\022\033\n\004info\030\002 \001(\0132\r.Datan"
  "odeInfo\022\027\n\017softwareVersion\030\003 \001(\t\"\351\006\n\017Dat"
  "anodeCommand\022;\n\013commandType\030\001 \001(\0162&.Data"
  "nodeNamenode.DatanodeCommand.Type\022;\n\nbal"
  "anceCmd\030\002 \001(\0132\".DatanodeNamenode.Balance"
  "BandwidthH\000\210\001\001\0223\n\006blkCmd\030\003 \001(\0132\036.Datanod"
  "eNamenode.BlockCommandH\001\210\001\001\0229\n\013recoveryC"
  "md\030\004 \001(\0132\037.DatanodeNamenode.BlockRecover"
  "yH\002\210\001\001\0224\n\013finalizeCmd\030\005 \001(\0132\032.DatanodeNa"
  "menode.FinalizeH\003\210\001\001\0226\n\014keyUpdateCmd\030\006 \001"
  "(\0132\033.DatanodeNamenode.KeyUpdateH\004\210\001\001\0224\n\013"
  "registerCmd\030\007 \001(\0132\032.DatanodeNamenode.Reg"
  "isterH\005\210\001\001\0220\n\010blkIdCmd\030\010 \001(\0132\031.DatanodeN"
  "amenode.BlockIdH\006\210\001\001\0225\n\010cacheCmd\030\t \001(\0132\036"
  ".DatanodeNamenode.CacheCommandH\007\210\001\001\"\351\001\n\004"
  "Type\022\034\n\030BalancerBandwidthCommand\020\000\022\020\n\014Bl"
  "ockCommand\020\001\022\030\n\024BlockRecoveryCommand\020\002\022\023"
  "\n\017FinalizeCommand\020\003\022\024\n\020KeyUpdateCommand\020"
  "\004\022\023\n\017RegisterCommand\020\005\022\030\n\024UnusedUpgradeC"
  "ommand\020\006\022\027\n\023NullDatanodeCommand\020\007\022\022\n\016Blo"
  "ckIdCommand\020\010\022\020\n\014CacheCommand\020\tB\r\n\013_bala"
  "nceCmdB\t\n\007_blkCmdB\016\n\014_recoveryCmdB\016\n\014_fi"
  "nalizeCmdB\017\n\r_keyUpdateCmdB\016\n\014_registerC"
  "mdB\013\n\t_blkIdCmdB\013\n\t_cacheCmd\"%\n\020BalanceB"
  "andwidth\022\021\n\tbandwidth\030\001 \001(\004\"\263\001\n\014BlockCom"
  "mand\0225\n\006action\030\001 \001(\0162%.DatanodeNamenode."
  "BlockCommand.Action\022\026\n\006blocks\030\002 \003(\0132\006.Bl"
  "ock\022\036\n\007targets\030\003 \003(\0132\r.DatanodeInfo\"4\n\006A"
  "ction\022\014\n\010TRANSFER\020\000\022\016\n\nINVALIDATE\020\001\022\014\n\010S"
  "HUTDOWN\020\002\"\017\n\rBlockRecovery\"\n\n\010Finalize\"\013"
  "\n\tKeyUpdate\"\n\n\010Register\"\036\n\014CacheCommand\022"
  "\016\n\006blocks\030\001 \003(\004\"o\n\007BlockId\0220\n\006action\030\001 \001"
  "(\0162 .DatanodeNamenode.BlockId.Action\022\020\n\010"
  "blockIds\030\002 \003(\004\" \n\006Action\022\t\n\005CACHE\020\000\022\013\n\007U"
  "NCACHE\020\001\"\262\001\n\030ReceivedDeletedBlockInfo\022\025\n"
  "\005block\030\001 \001(\0132\006.Block\022F\n\006status\030\002 \001(\01626.D"
  "atanodeNamenode.ReceivedDeletedBlockInfo"
  ".BlockStatus\"7\n\013BlockStatus\022\r\n\tRECEIVING"
  "\020\000\022\014\n\010RECEIVED\020\001\022\013\n\007DELETED\020\002\"S\n\027Registe"
  "rDatanodeRequest\0228\n\014registration\030\001 \001(\0132\""
  ".DatanodeNamenode.DatanodeRegister\"T\n\030Re"
  "gisterDatanodeResponse\0228\n\014registration\030\001"
  " \001(\0132\".DatanodeNamenode.DatanodeRegister"
  "\"\252\002\n\020HeartBeatRequest\0228\n\014registration\030\001 "
  "\001(\0132\".DatanodeNamenode.DatanodeRegister\022"
  "\034\n\017xmitsInProgress\030\003 \001(\rH\000\210\001\001\022\031\n\014xceiver"
  "Count\030\004 \001(\rH\001\210\001\001\022\031\n\014failedVolums\030\005 \001(\rH\002"
  "\210\001\001\022\032\n\rcacheCapacity\030\006 \001(\004H\003\210\001\001\022\026\n\tcache"
  "Used\030\007 \001(\004H\004\210\001\001B\022\n\020_xmitsInProgressB\017\n\r_"
  "xceiverCountB\017\n\r_failedVolumsB\020\n\016_cacheC"
  "apacityB\014\n\n_cacheUsed\"D\n\021HeartBeatRespon"
  "se\022/\n\004cmds\030\001 \003(\0132!.DatanodeNamenode.Data"
  "nodeCommand\"\024\n\022blockReportRequest\"\025\n\023blo"
  "ckReportResponse\"\024\n\022cacheReportRequest\"\025"
  "\n\023cacheReportResponse\"\226\001\n\036BlockReceivedA"
  "ndDeletedRequest\0228\n\014registration\030\001 \001(\0132\""
  ".DatanodeNamenode.DatanodeRegister\022:\n\006bl"
  "ocks\030\002 \003(\0132*.DatanodeNamenode.ReceivedDe"
  "letedBlockInfo\"!\n\037BlockReceivedAndDelete"
  "dResponse\"\360\001\n\022ErrorReportRequest\0228\n\014regi"
  "stration\030\001 \001(\0132\".DatanodeNamenode.Datano"
  "deRegister\022A\n\terrorCode\030\002 \001(\0162..Datanode"
  "Namenode.ErrorReportRequest.ErrorCode\022\013\n"
  "\003msg\030\003 \001(\t\"P\n\tErrorCode\022\n\n\006NOTIFY\020\000\022\016\n\nD"
  "ISK_ERROR\020\001\022\021\n\rINVALID_BLOCK\020\002\022\024\n\020FATAL_"
  "DISK_ERROR\020\003\"\025\n\023ErrorReportResponse\"6\n\025R"
  "eportBadBlockRequest\022\035\n\006blocks\030\001 \003(\0132\r.L"
  "ocatedBlock\"\030\n\026ReportBadBlockResponse2\317\005"
  "\n\017DatanodeService\022i\n\020registerDatanode\022)."
  "DatanodeNamenode.RegisterDatanodeRequest"
  "\032*.DatanodeNamenode.RegisterDatanodeResp"
  "onse\022X\n\rsendHeartBeat\022\".DatanodeNamenode"
  ".HeartBeatRequest\032#.DatanodeNamenode.Hea"
  "rtBeatResponse\022Z\n\013blockReport\022$.Datanode"
  "Namenode.blockReportRequest\032%.DatanodeNa"
  "menode.blockReportResponse\022Z\n\013cacheRepor"
  "t\022$.DatanodeNamenode.cacheReportRequest\032"
  "%.DatanodeNamenode.cacheReportResponse\022~"
  "\n\027blockReceivedAndDeleted\0220.DatanodeName"
  "node.BlockReceivedAndDeletedRequest\0321.Da"
  "tanodeNamenode.BlockReceivedAndDeletedRe"
  "sponse\022Z\n\013errorReport\022$.DatanodeNamenode"
  ".ErrorReportRequest\032%.DatanodeNamenode.E"
  "rrorReportResponse\022c\n\016reportBadBlock\022\'.D"
  "atanodeNamenode.ReportBadBlockRequest\032(."
  "DatanodeNamenode.ReportBadBlockResponseb"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_DatanodeNamenode_2eproto_deps[1] = {
  &::descriptor_table_dfs_2eproto,
};
static ::_pbi::once_flag descriptor_table_DatanodeNamenode_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_DatanodeNamenode_2eproto = {
    false, false, 3527, descriptor_table_protodef_DatanodeNamenode_2eproto,
    "DatanodeNamenode.proto",
    &descriptor_table_DatanodeNamenode_2eproto_once, descriptor_table_DatanodeNamenode_2eproto_deps, 1, 25,
    schemas, file_default_instances, TableStruct_DatanodeNamenode_2eproto::offsets,
    file_level_metadata_DatanodeNamenode_2eproto, file_level_enum_descriptors_DatanodeNamenode_2eproto,
    file_level_service_descriptors_DatanodeNamenode_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_DatanodeNamenode_2eproto_getter() {
  return &descriptor_table_DatanodeNamenode_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_DatanodeNamenode_2eproto(&descriptor_table_DatanodeNamenode_2eproto);
namespace DatanodeNamenode {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DatanodeCommand_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DatanodeNamenode_2eproto);
  return file_level_enum_descriptors_DatanodeNamenode_2eproto[0];
}
bool DatanodeCommand_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DatanodeCommand_Type DatanodeCommand::BalancerBandwidthCommand;
constexpr DatanodeCommand_Type DatanodeCommand::BlockCommand;
constexpr DatanodeCommand_Type DatanodeCommand::BlockRecoveryCommand;
constexpr DatanodeCommand_Type DatanodeCommand::FinalizeCommand;
constexpr DatanodeCommand_Type DatanodeCommand::KeyUpdateCommand;
constexpr DatanodeCommand_Type DatanodeCommand::RegisterCommand;
constexpr DatanodeCommand_Type DatanodeCommand::UnusedUpgradeCommand;
constexpr DatanodeCommand_Type DatanodeCommand::NullDatanodeCommand;
constexpr DatanodeCommand_Type DatanodeCommand::BlockIdCommand;
constexpr DatanodeCommand_Type DatanodeCommand::CacheCommand;
constexpr DatanodeCommand_Type DatanodeCommand::Type_MIN;
constexpr DatanodeCommand_Type DatanodeCommand::Type_MAX;
constexpr int DatanodeCommand::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlockCommand_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DatanodeNamenode_2eproto);
  return file_level_enum_descriptors_DatanodeNamenode_2eproto[1];
}
bool BlockCommand_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BlockCommand_Action BlockCommand::TRANSFER;
constexpr BlockCommand_Action BlockCommand::INVALIDATE;
constexpr BlockCommand_Action BlockCommand::SHUTDOWN;
constexpr BlockCommand_Action BlockCommand::Action_MIN;
constexpr BlockCommand_Action BlockCommand::Action_MAX;
constexpr int BlockCommand::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlockId_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DatanodeNamenode_2eproto);
  return file_level_enum_descriptors_DatanodeNamenode_2eproto[2];
}
bool BlockId_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BlockId_Action BlockId::CACHE;
constexpr BlockId_Action BlockId::UNCACHE;
constexpr BlockId_Action BlockId::Action_MIN;
constexpr BlockId_Action BlockId::Action_MAX;
constexpr int BlockId::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReceivedDeletedBlockInfo_BlockStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DatanodeNamenode_2eproto);
  return file_level_enum_descriptors_DatanodeNamenode_2eproto[3];
}
bool ReceivedDeletedBlockInfo_BlockStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ReceivedDeletedBlockInfo_BlockStatus ReceivedDeletedBlockInfo::RECEIVING;
constexpr ReceivedDeletedBlockInfo_BlockStatus ReceivedDeletedBlockInfo::RECEIVED;
constexpr ReceivedDeletedBlockInfo_BlockStatus ReceivedDeletedBlockInfo::DELETED;
constexpr ReceivedDeletedBlockInfo_BlockStatus ReceivedDeletedBlockInfo::BlockStatus_MIN;
constexpr ReceivedDeletedBlockInfo_BlockStatus ReceivedDeletedBlockInfo::BlockStatus_MAX;
constexpr int ReceivedDeletedBlockInfo::BlockStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorReportRequest_ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DatanodeNamenode_2eproto);
  return file_level_enum_descriptors_DatanodeNamenode_2eproto[4];
}
bool ErrorReportRequest_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ErrorReportRequest_ErrorCode ErrorReportRequest::NOTIFY;
constexpr ErrorReportRequest_ErrorCode ErrorReportRequest::DISK_ERROR;
constexpr ErrorReportRequest_ErrorCode ErrorReportRequest::INVALID_BLOCK;
constexpr ErrorReportRequest_ErrorCode ErrorReportRequest::FATAL_DISK_ERROR;
constexpr ErrorReportRequest_ErrorCode ErrorReportRequest::ErrorCode_MIN;
constexpr ErrorReportRequest_ErrorCode ErrorReportRequest::ErrorCode_MAX;
constexpr int ErrorReportRequest::ErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class DatanodeRegister::_Internal {
 public:
  static const ::DatanodeID& id(const DatanodeRegister* msg);
  static const ::DatanodeInfo& info(const DatanodeRegister* msg);
};

const ::DatanodeID&
DatanodeRegister::_Internal::id(const DatanodeRegister* msg) {
  return *msg->_impl_.id_;
}
const ::DatanodeInfo&
DatanodeRegister::_Internal::info(const DatanodeRegister* msg) {
  return *msg->_impl_.info_;
}
void DatanodeRegister::clear_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
}
void DatanodeRegister::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
DatanodeRegister::DatanodeRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.DatanodeRegister)
}
DatanodeRegister::DatanodeRegister(const DatanodeRegister& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DatanodeRegister* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.softwareversion_){}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.softwareversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.softwareversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_softwareversion().empty()) {
    _this->_impl_.softwareversion_.Set(from._internal_softwareversion(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::DatanodeID(*from._impl_.id_);
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::DatanodeInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.DatanodeRegister)
}

inline void DatanodeRegister::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.softwareversion_){}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.softwareversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.softwareversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DatanodeRegister::~DatanodeRegister() {
  // @@protoc_insertion_point(destructor:DatanodeNamenode.DatanodeRegister)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatanodeRegister::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.softwareversion_.Destroy();
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.info_;
}

void DatanodeRegister::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DatanodeRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:DatanodeNamenode.DatanodeRegister)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.softwareversion_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatanodeRegister::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DatanodeID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DatanodeInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string softwareVersion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_softwareversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DatanodeNamenode.DatanodeRegister.softwareVersion"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatanodeRegister::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DatanodeNamenode.DatanodeRegister)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DatanodeID id = 1;
  if (this->_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // .DatanodeInfo info = 2;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // string softwareVersion = 3;
  if (!this->_internal_softwareversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_softwareversion().data(), static_cast<int>(this->_internal_softwareversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DatanodeNamenode.DatanodeRegister.softwareVersion");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_softwareversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DatanodeNamenode.DatanodeRegister)
  return target;
}

size_t DatanodeRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DatanodeNamenode.DatanodeRegister)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string softwareVersion = 3;
  if (!this->_internal_softwareversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_softwareversion());
  }

  // .DatanodeID id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_);
  }

  // .DatanodeInfo info = 2;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatanodeRegister::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DatanodeRegister::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatanodeRegister::GetClassData() const { return &_class_data_; }


void DatanodeRegister::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DatanodeRegister*>(&to_msg);
  auto& from = static_cast<const DatanodeRegister&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DatanodeNamenode.DatanodeRegister)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_softwareversion().empty()) {
    _this->_internal_set_softwareversion(from._internal_softwareversion());
  }
  if (from._internal_has_id()) {
    _this->_internal_mutable_id()->::DatanodeID::MergeFrom(
        from._internal_id());
  }
  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::DatanodeInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatanodeRegister::CopyFrom(const DatanodeRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DatanodeNamenode.DatanodeRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatanodeRegister::IsInitialized() const {
  return true;
}

void DatanodeRegister::InternalSwap(DatanodeRegister* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.softwareversion_, lhs_arena,
      &other->_impl_.softwareversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatanodeRegister, _impl_.info_)
      + sizeof(DatanodeRegister::_impl_.info_)
      - PROTOBUF_FIELD_OFFSET(DatanodeRegister, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DatanodeRegister::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[0]);
}

// ===================================================================

class DatanodeCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<DatanodeCommand>()._impl_._has_bits_);
  static const ::DatanodeNamenode::BalanceBandwidth& balancecmd(const DatanodeCommand* msg);
  static void set_has_balancecmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::DatanodeNamenode::BlockCommand& blkcmd(const DatanodeCommand* msg);
  static void set_has_blkcmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::DatanodeNamenode::BlockRecovery& recoverycmd(const DatanodeCommand* msg);
  static void set_has_recoverycmd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::DatanodeNamenode::Finalize& finalizecmd(const DatanodeCommand* msg);
  static void set_has_finalizecmd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::DatanodeNamenode::KeyUpdate& keyupdatecmd(const DatanodeCommand* msg);
  static void set_has_keyupdatecmd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::DatanodeNamenode::Register& registercmd(const DatanodeCommand* msg);
  static void set_has_registercmd(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::DatanodeNamenode::BlockId& blkidcmd(const DatanodeCommand* msg);
  static void set_has_blkidcmd(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::DatanodeNamenode::CacheCommand& cachecmd(const DatanodeCommand* msg);
  static void set_has_cachecmd(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::DatanodeNamenode::BalanceBandwidth&
DatanodeCommand::_Internal::balancecmd(const DatanodeCommand* msg) {
  return *msg->_impl_.balancecmd_;
}
const ::DatanodeNamenode::BlockCommand&
DatanodeCommand::_Internal::blkcmd(const DatanodeCommand* msg) {
  return *msg->_impl_.blkcmd_;
}
const ::DatanodeNamenode::BlockRecovery&
DatanodeCommand::_Internal::recoverycmd(const DatanodeCommand* msg) {
  return *msg->_impl_.recoverycmd_;
}
const ::DatanodeNamenode::Finalize&
DatanodeCommand::_Internal::finalizecmd(const DatanodeCommand* msg) {
  return *msg->_impl_.finalizecmd_;
}
const ::DatanodeNamenode::KeyUpdate&
DatanodeCommand::_Internal::keyupdatecmd(const DatanodeCommand* msg) {
  return *msg->_impl_.keyupdatecmd_;
}
const ::DatanodeNamenode::Register&
DatanodeCommand::_Internal::registercmd(const DatanodeCommand* msg) {
  return *msg->_impl_.registercmd_;
}
const ::DatanodeNamenode::BlockId&
DatanodeCommand::_Internal::blkidcmd(const DatanodeCommand* msg) {
  return *msg->_impl_.blkidcmd_;
}
const ::DatanodeNamenode::CacheCommand&
DatanodeCommand::_Internal::cachecmd(const DatanodeCommand* msg) {
  return *msg->_impl_.cachecmd_;
}
DatanodeCommand::DatanodeCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.DatanodeCommand)
}
DatanodeCommand::DatanodeCommand(const DatanodeCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DatanodeCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.balancecmd_){nullptr}
    , decltype(_impl_.blkcmd_){nullptr}
    , decltype(_impl_.recoverycmd_){nullptr}
    , decltype(_impl_.finalizecmd_){nullptr}
    , decltype(_impl_.keyupdatecmd_){nullptr}
    , decltype(_impl_.registercmd_){nullptr}
    , decltype(_impl_.blkidcmd_){nullptr}
    , decltype(_impl_.cachecmd_){nullptr}
    , decltype(_impl_.commandtype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_balancecmd()) {
    _this->_impl_.balancecmd_ = new ::DatanodeNamenode::BalanceBandwidth(*from._impl_.balancecmd_);
  }
  if (from._internal_has_blkcmd()) {
    _this->_impl_.blkcmd_ = new ::DatanodeNamenode::BlockCommand(*from._impl_.blkcmd_);
  }
  if (from._internal_has_recoverycmd()) {
    _this->_impl_.recoverycmd_ = new ::DatanodeNamenode::BlockRecovery(*from._impl_.recoverycmd_);
  }
  if (from._internal_has_finalizecmd()) {
    _this->_impl_.finalizecmd_ = new ::DatanodeNamenode::Finalize(*from._impl_.finalizecmd_);
  }
  if (from._internal_has_keyupdatecmd()) {
    _this->_impl_.keyupdatecmd_ = new ::DatanodeNamenode::KeyUpdate(*from._impl_.keyupdatecmd_);
  }
  if (from._internal_has_registercmd()) {
    _this->_impl_.registercmd_ = new ::DatanodeNamenode::Register(*from._impl_.registercmd_);
  }
  if (from._internal_has_blkidcmd()) {
    _this->_impl_.blkidcmd_ = new ::DatanodeNamenode::BlockId(*from._impl_.blkidcmd_);
  }
  if (from._internal_has_cachecmd()) {
    _this->_impl_.cachecmd_ = new ::DatanodeNamenode::CacheCommand(*from._impl_.cachecmd_);
  }
  _this->_impl_.commandtype_ = from._impl_.commandtype_;
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.DatanodeCommand)
}

inline void DatanodeCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.balancecmd_){nullptr}
    , decltype(_impl_.blkcmd_){nullptr}
    , decltype(_impl_.recoverycmd_){nullptr}
    , decltype(_impl_.finalizecmd_){nullptr}
    , decltype(_impl_.keyupdatecmd_){nullptr}
    , decltype(_impl_.registercmd_){nullptr}
    , decltype(_impl_.blkidcmd_){nullptr}
    , decltype(_impl_.cachecmd_){nullptr}
    , decltype(_impl_.commandtype_){0}
  };
}

DatanodeCommand::~DatanodeCommand() {
  // @@protoc_insertion_point(destructor:DatanodeNamenode.DatanodeCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatanodeCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.balancecmd_;
  if (this != internal_default_instance()) delete _impl_.blkcmd_;
  if (this != internal_default_instance()) delete _impl_.recoverycmd_;
  if (this != internal_default_instance()) delete _impl_.finalizecmd_;
  if (this != internal_default_instance()) delete _impl_.keyupdatecmd_;
  if (this != internal_default_instance()) delete _impl_.registercmd_;
  if (this != internal_default_instance()) delete _impl_.blkidcmd_;
  if (this != internal_default_instance()) delete _impl_.cachecmd_;
}

void DatanodeCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DatanodeCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:DatanodeNamenode.DatanodeCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.balancecmd_ != nullptr);
      _impl_.balancecmd_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.blkcmd_ != nullptr);
      _impl_.blkcmd_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.recoverycmd_ != nullptr);
      _impl_.recoverycmd_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.finalizecmd_ != nullptr);
      _impl_.finalizecmd_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.keyupdatecmd_ != nullptr);
      _impl_.keyupdatecmd_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.registercmd_ != nullptr);
      _impl_.registercmd_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.blkidcmd_ != nullptr);
      _impl_.blkidcmd_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.cachecmd_ != nullptr);
      _impl_.cachecmd_->Clear();
    }
  }
  _impl_.commandtype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatanodeCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DatanodeNamenode.DatanodeCommand.Type commandType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_commandtype(static_cast<::DatanodeNamenode::DatanodeCommand_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .DatanodeNamenode.BalanceBandwidth balanceCmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_balancecmd(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DatanodeNamenode.BlockCommand blkCmd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_blkcmd(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DatanodeNamenode.BlockRecovery recoveryCmd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_recoverycmd(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DatanodeNamenode.Finalize finalizeCmd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_finalizecmd(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DatanodeNamenode.KeyUpdate keyUpdateCmd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_keyupdatecmd(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DatanodeNamenode.Register registerCmd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_registercmd(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DatanodeNamenode.BlockId blkIdCmd = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_blkidcmd(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DatanodeNamenode.CacheCommand cacheCmd = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_cachecmd(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatanodeCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DatanodeNamenode.DatanodeCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DatanodeNamenode.DatanodeCommand.Type commandType = 1;
  if (this->_internal_commandtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_commandtype(), target);
  }

  // optional .DatanodeNamenode.BalanceBandwidth balanceCmd = 2;
  if (_internal_has_balancecmd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::balancecmd(this),
        _Internal::balancecmd(this).GetCachedSize(), target, stream);
  }

  // optional .DatanodeNamenode.BlockCommand blkCmd = 3;
  if (_internal_has_blkcmd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::blkcmd(this),
        _Internal::blkcmd(this).GetCachedSize(), target, stream);
  }

  // optional .DatanodeNamenode.BlockRecovery recoveryCmd = 4;
  if (_internal_has_recoverycmd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::recoverycmd(this),
        _Internal::recoverycmd(this).GetCachedSize(), target, stream);
  }

  // optional .DatanodeNamenode.Finalize finalizeCmd = 5;
  if (_internal_has_finalizecmd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::finalizecmd(this),
        _Internal::finalizecmd(this).GetCachedSize(), target, stream);
  }

  // optional .DatanodeNamenode.KeyUpdate keyUpdateCmd = 6;
  if (_internal_has_keyupdatecmd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::keyupdatecmd(this),
        _Internal::keyupdatecmd(this).GetCachedSize(), target, stream);
  }

  // optional .DatanodeNamenode.Register registerCmd = 7;
  if (_internal_has_registercmd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::registercmd(this),
        _Internal::registercmd(this).GetCachedSize(), target, stream);
  }

  // optional .DatanodeNamenode.BlockId blkIdCmd = 8;
  if (_internal_has_blkidcmd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::blkidcmd(this),
        _Internal::blkidcmd(this).GetCachedSize(), target, stream);
  }

  // optional .DatanodeNamenode.CacheCommand cacheCmd = 9;
  if (_internal_has_cachecmd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::cachecmd(this),
        _Internal::cachecmd(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DatanodeNamenode.DatanodeCommand)
  return target;
}

size_t DatanodeCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DatanodeNamenode.DatanodeCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .DatanodeNamenode.BalanceBandwidth balanceCmd = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.balancecmd_);
    }

    // optional .DatanodeNamenode.BlockCommand blkCmd = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.blkcmd_);
    }

    // optional .DatanodeNamenode.BlockRecovery recoveryCmd = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.recoverycmd_);
    }

    // optional .DatanodeNamenode.Finalize finalizeCmd = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.finalizecmd_);
    }

    // optional .DatanodeNamenode.KeyUpdate keyUpdateCmd = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.keyupdatecmd_);
    }

    // optional .DatanodeNamenode.Register registerCmd = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.registercmd_);
    }

    // optional .DatanodeNamenode.BlockId blkIdCmd = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.blkidcmd_);
    }

    // optional .DatanodeNamenode.CacheCommand cacheCmd = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cachecmd_);
    }

  }
  // .DatanodeNamenode.DatanodeCommand.Type commandType = 1;
  if (this->_internal_commandtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_commandtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatanodeCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DatanodeCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatanodeCommand::GetClassData() const { return &_class_data_; }


void DatanodeCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DatanodeCommand*>(&to_msg);
  auto& from = static_cast<const DatanodeCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DatanodeNamenode.DatanodeCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_balancecmd()->::DatanodeNamenode::BalanceBandwidth::MergeFrom(
          from._internal_balancecmd());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_blkcmd()->::DatanodeNamenode::BlockCommand::MergeFrom(
          from._internal_blkcmd());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_recoverycmd()->::DatanodeNamenode::BlockRecovery::MergeFrom(
          from._internal_recoverycmd());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_finalizecmd()->::DatanodeNamenode::Finalize::MergeFrom(
          from._internal_finalizecmd());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_keyupdatecmd()->::DatanodeNamenode::KeyUpdate::MergeFrom(
          from._internal_keyupdatecmd());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_registercmd()->::DatanodeNamenode::Register::MergeFrom(
          from._internal_registercmd());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_blkidcmd()->::DatanodeNamenode::BlockId::MergeFrom(
          from._internal_blkidcmd());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_cachecmd()->::DatanodeNamenode::CacheCommand::MergeFrom(
          from._internal_cachecmd());
    }
  }
  if (from._internal_commandtype() != 0) {
    _this->_internal_set_commandtype(from._internal_commandtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatanodeCommand::CopyFrom(const DatanodeCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DatanodeNamenode.DatanodeCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatanodeCommand::IsInitialized() const {
  return true;
}

void DatanodeCommand::InternalSwap(DatanodeCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatanodeCommand, _impl_.commandtype_)
      + sizeof(DatanodeCommand::_impl_.commandtype_)
      - PROTOBUF_FIELD_OFFSET(DatanodeCommand, _impl_.balancecmd_)>(
          reinterpret_cast<char*>(&_impl_.balancecmd_),
          reinterpret_cast<char*>(&other->_impl_.balancecmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DatanodeCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[1]);
}

// ===================================================================

class BalanceBandwidth::_Internal {
 public:
};

BalanceBandwidth::BalanceBandwidth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.BalanceBandwidth)
}
BalanceBandwidth::BalanceBandwidth(const BalanceBandwidth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BalanceBandwidth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bandwidth_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.bandwidth_ = from._impl_.bandwidth_;
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.BalanceBandwidth)
}

inline void BalanceBandwidth::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bandwidth_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BalanceBandwidth::~BalanceBandwidth() {
  // @@protoc_insertion_point(destructor:DatanodeNamenode.BalanceBandwidth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BalanceBandwidth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BalanceBandwidth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BalanceBandwidth::Clear() {
// @@protoc_insertion_point(message_clear_start:DatanodeNamenode.BalanceBandwidth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bandwidth_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BalanceBandwidth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 bandwidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BalanceBandwidth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DatanodeNamenode.BalanceBandwidth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 bandwidth = 1;
  if (this->_internal_bandwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_bandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DatanodeNamenode.BalanceBandwidth)
  return target;
}

size_t BalanceBandwidth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DatanodeNamenode.BalanceBandwidth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 bandwidth = 1;
  if (this->_internal_bandwidth() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bandwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BalanceBandwidth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BalanceBandwidth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BalanceBandwidth::GetClassData() const { return &_class_data_; }


void BalanceBandwidth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BalanceBandwidth*>(&to_msg);
  auto& from = static_cast<const BalanceBandwidth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DatanodeNamenode.BalanceBandwidth)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bandwidth() != 0) {
    _this->_internal_set_bandwidth(from._internal_bandwidth());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BalanceBandwidth::CopyFrom(const BalanceBandwidth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DatanodeNamenode.BalanceBandwidth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BalanceBandwidth::IsInitialized() const {
  return true;
}

void BalanceBandwidth::InternalSwap(BalanceBandwidth* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.bandwidth_, other->_impl_.bandwidth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BalanceBandwidth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[2]);
}

// ===================================================================

class BlockCommand::_Internal {
 public:
};

void BlockCommand::clear_blocks() {
  _impl_.blocks_.Clear();
}
void BlockCommand::clear_targets() {
  _impl_.targets_.Clear();
}
BlockCommand::BlockCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.BlockCommand)
}
BlockCommand::BlockCommand(const BlockCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){from._impl_.blocks_}
    , decltype(_impl_.targets_){from._impl_.targets_}
    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.action_ = from._impl_.action_;
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.BlockCommand)
}

inline void BlockCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){arena}
    , decltype(_impl_.targets_){arena}
    , decltype(_impl_.action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlockCommand::~BlockCommand() {
  // @@protoc_insertion_point(destructor:DatanodeNamenode.BlockCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blocks_.~RepeatedPtrField();
  _impl_.targets_.~RepeatedPtrField();
}

void BlockCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:DatanodeNamenode.BlockCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blocks_.Clear();
  _impl_.targets_.Clear();
  _impl_.action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DatanodeNamenode.BlockCommand.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::DatanodeNamenode::BlockCommand_Action>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .Block blocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .DatanodeInfo targets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DatanodeNamenode.BlockCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DatanodeNamenode.BlockCommand.Action action = 1;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // repeated .Block blocks = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_blocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .DatanodeInfo targets = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_targets_size()); i < n; i++) {
    const auto& repfield = this->_internal_targets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DatanodeNamenode.BlockCommand)
  return target;
}

size_t BlockCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DatanodeNamenode.BlockCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Block blocks = 2;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->_impl_.blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DatanodeInfo targets = 3;
  total_size += 1UL * this->_internal_targets_size();
  for (const auto& msg : this->_impl_.targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DatanodeNamenode.BlockCommand.Action action = 1;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockCommand::GetClassData() const { return &_class_data_; }


void BlockCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockCommand*>(&to_msg);
  auto& from = static_cast<const BlockCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DatanodeNamenode.BlockCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blocks_.MergeFrom(from._impl_.blocks_);
  _this->_impl_.targets_.MergeFrom(from._impl_.targets_);
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockCommand::CopyFrom(const BlockCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DatanodeNamenode.BlockCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockCommand::IsInitialized() const {
  return true;
}

void BlockCommand::InternalSwap(BlockCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blocks_.InternalSwap(&other->_impl_.blocks_);
  _impl_.targets_.InternalSwap(&other->_impl_.targets_);
  swap(_impl_.action_, other->_impl_.action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[3]);
}

// ===================================================================

class BlockRecovery::_Internal {
 public:
};

BlockRecovery::BlockRecovery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.BlockRecovery)
}
BlockRecovery::BlockRecovery(const BlockRecovery& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  BlockRecovery* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.BlockRecovery)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockRecovery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockRecovery::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata BlockRecovery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[4]);
}

// ===================================================================

class Finalize::_Internal {
 public:
};

Finalize::Finalize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.Finalize)
}
Finalize::Finalize(const Finalize& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Finalize* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.Finalize)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Finalize::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Finalize::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Finalize::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[5]);
}

// ===================================================================

class KeyUpdate::_Internal {
 public:
};

KeyUpdate::KeyUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.KeyUpdate)
}
KeyUpdate::KeyUpdate(const KeyUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  KeyUpdate* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.KeyUpdate)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyUpdate::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata KeyUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[6]);
}

// ===================================================================

class Register::_Internal {
 public:
};

Register::Register(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.Register)
}
Register::Register(const Register& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Register* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.Register)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Register::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Register::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Register::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[7]);
}

// ===================================================================

class CacheCommand::_Internal {
 public:
};

CacheCommand::CacheCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.CacheCommand)
}
CacheCommand::CacheCommand(const CacheCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CacheCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){from._impl_.blocks_}
    , /*decltype(_impl_._blocks_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.CacheCommand)
}

inline void CacheCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){arena}
    , /*decltype(_impl_._blocks_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CacheCommand::~CacheCommand() {
  // @@protoc_insertion_point(destructor:DatanodeNamenode.CacheCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CacheCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blocks_.~RepeatedField();
}

void CacheCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CacheCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:DatanodeNamenode.CacheCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blocks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CacheCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_blocks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_blocks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CacheCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DatanodeNamenode.CacheCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 blocks = 1;
  {
    int byte_size = _impl_._blocks_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_blocks(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DatanodeNamenode.CacheCommand)
  return target;
}

size_t CacheCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DatanodeNamenode.CacheCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 blocks = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.blocks_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._blocks_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CacheCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CacheCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CacheCommand::GetClassData() const { return &_class_data_; }


void CacheCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CacheCommand*>(&to_msg);
  auto& from = static_cast<const CacheCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DatanodeNamenode.CacheCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blocks_.MergeFrom(from._impl_.blocks_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CacheCommand::CopyFrom(const CacheCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DatanodeNamenode.CacheCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheCommand::IsInitialized() const {
  return true;
}

void CacheCommand::InternalSwap(CacheCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blocks_.InternalSwap(&other->_impl_.blocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[8]);
}

// ===================================================================

class BlockId::_Internal {
 public:
};

BlockId::BlockId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.BlockId)
}
BlockId::BlockId(const BlockId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blockids_){from._impl_.blockids_}
    , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.action_ = from._impl_.action_;
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.BlockId)
}

inline void BlockId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blockids_){arena}
    , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
    , decltype(_impl_.action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlockId::~BlockId() {
  // @@protoc_insertion_point(destructor:DatanodeNamenode.BlockId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blockids_.~RepeatedField();
}

void BlockId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockId::Clear() {
// @@protoc_insertion_point(message_clear_start:DatanodeNamenode.BlockId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blockids_.Clear();
  _impl_.action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DatanodeNamenode.BlockId.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::DatanodeNamenode::BlockId_Action>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 blockIds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_blockids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_blockids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DatanodeNamenode.BlockId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DatanodeNamenode.BlockId.Action action = 1;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // repeated uint64 blockIds = 2;
  {
    int byte_size = _impl_._blockids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_blockids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DatanodeNamenode.BlockId)
  return target;
}

size_t BlockId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DatanodeNamenode.BlockId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 blockIds = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.blockids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._blockids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .DatanodeNamenode.BlockId.Action action = 1;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockId::GetClassData() const { return &_class_data_; }


void BlockId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockId*>(&to_msg);
  auto& from = static_cast<const BlockId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DatanodeNamenode.BlockId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blockids_.MergeFrom(from._impl_.blockids_);
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockId::CopyFrom(const BlockId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DatanodeNamenode.BlockId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockId::IsInitialized() const {
  return true;
}

void BlockId::InternalSwap(BlockId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blockids_.InternalSwap(&other->_impl_.blockids_);
  swap(_impl_.action_, other->_impl_.action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[9]);
}

// ===================================================================

class ReceivedDeletedBlockInfo::_Internal {
 public:
  static const ::Block& block(const ReceivedDeletedBlockInfo* msg);
};

const ::Block&
ReceivedDeletedBlockInfo::_Internal::block(const ReceivedDeletedBlockInfo* msg) {
  return *msg->_impl_.block_;
}
void ReceivedDeletedBlockInfo::clear_block() {
  if (GetArenaForAllocation() == nullptr && _impl_.block_ != nullptr) {
    delete _impl_.block_;
  }
  _impl_.block_ = nullptr;
}
ReceivedDeletedBlockInfo::ReceivedDeletedBlockInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.ReceivedDeletedBlockInfo)
}
ReceivedDeletedBlockInfo::ReceivedDeletedBlockInfo(const ReceivedDeletedBlockInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReceivedDeletedBlockInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_){nullptr}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    _this->_impl_.block_ = new ::Block(*from._impl_.block_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.ReceivedDeletedBlockInfo)
}

inline void ReceivedDeletedBlockInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_){nullptr}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReceivedDeletedBlockInfo::~ReceivedDeletedBlockInfo() {
  // @@protoc_insertion_point(destructor:DatanodeNamenode.ReceivedDeletedBlockInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReceivedDeletedBlockInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.block_;
}

void ReceivedDeletedBlockInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReceivedDeletedBlockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DatanodeNamenode.ReceivedDeletedBlockInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.block_ != nullptr) {
    delete _impl_.block_;
  }
  _impl_.block_ = nullptr;
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReceivedDeletedBlockInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DatanodeNamenode.ReceivedDeletedBlockInfo.BlockStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::DatanodeNamenode::ReceivedDeletedBlockInfo_BlockStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReceivedDeletedBlockInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DatanodeNamenode.ReceivedDeletedBlockInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Block block = 1;
  if (this->_internal_has_block()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::block(this),
        _Internal::block(this).GetCachedSize(), target, stream);
  }

  // .DatanodeNamenode.ReceivedDeletedBlockInfo.BlockStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DatanodeNamenode.ReceivedDeletedBlockInfo)
  return target;
}

size_t ReceivedDeletedBlockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DatanodeNamenode.ReceivedDeletedBlockInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Block block = 1;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_);
  }

  // .DatanodeNamenode.ReceivedDeletedBlockInfo.BlockStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReceivedDeletedBlockInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReceivedDeletedBlockInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReceivedDeletedBlockInfo::GetClassData() const { return &_class_data_; }


void ReceivedDeletedBlockInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReceivedDeletedBlockInfo*>(&to_msg);
  auto& from = static_cast<const ReceivedDeletedBlockInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DatanodeNamenode.ReceivedDeletedBlockInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _this->_internal_mutable_block()->::Block::MergeFrom(
        from._internal_block());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReceivedDeletedBlockInfo::CopyFrom(const ReceivedDeletedBlockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DatanodeNamenode.ReceivedDeletedBlockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceivedDeletedBlockInfo::IsInitialized() const {
  return true;
}

void ReceivedDeletedBlockInfo::InternalSwap(ReceivedDeletedBlockInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReceivedDeletedBlockInfo, _impl_.status_)
      + sizeof(ReceivedDeletedBlockInfo::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(ReceivedDeletedBlockInfo, _impl_.block_)>(
          reinterpret_cast<char*>(&_impl_.block_),
          reinterpret_cast<char*>(&other->_impl_.block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceivedDeletedBlockInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[10]);
}

// ===================================================================

class RegisterDatanodeRequest::_Internal {
 public:
  static const ::DatanodeNamenode::DatanodeRegister& registration(const RegisterDatanodeRequest* msg);
};

const ::DatanodeNamenode::DatanodeRegister&
RegisterDatanodeRequest::_Internal::registration(const RegisterDatanodeRequest* msg) {
  return *msg->_impl_.registration_;
}
RegisterDatanodeRequest::RegisterDatanodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.RegisterDatanodeRequest)
}
RegisterDatanodeRequest::RegisterDatanodeRequest(const RegisterDatanodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterDatanodeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.registration_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_registration()) {
    _this->_impl_.registration_ = new ::DatanodeNamenode::DatanodeRegister(*from._impl_.registration_);
  }
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.RegisterDatanodeRequest)
}

inline void RegisterDatanodeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.registration_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterDatanodeRequest::~RegisterDatanodeRequest() {
  // @@protoc_insertion_point(destructor:DatanodeNamenode.RegisterDatanodeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterDatanodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.registration_;
}

void RegisterDatanodeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterDatanodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DatanodeNamenode.RegisterDatanodeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.registration_ != nullptr) {
    delete _impl_.registration_;
  }
  _impl_.registration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterDatanodeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DatanodeNamenode.DatanodeRegister registration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_registration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterDatanodeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DatanodeNamenode.RegisterDatanodeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DatanodeNamenode.DatanodeRegister registration = 1;
  if (this->_internal_has_registration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::registration(this),
        _Internal::registration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DatanodeNamenode.RegisterDatanodeRequest)
  return target;
}

size_t RegisterDatanodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DatanodeNamenode.RegisterDatanodeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DatanodeNamenode.DatanodeRegister registration = 1;
  if (this->_internal_has_registration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.registration_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterDatanodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterDatanodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterDatanodeRequest::GetClassData() const { return &_class_data_; }


void RegisterDatanodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterDatanodeRequest*>(&to_msg);
  auto& from = static_cast<const RegisterDatanodeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DatanodeNamenode.RegisterDatanodeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_registration()) {
    _this->_internal_mutable_registration()->::DatanodeNamenode::DatanodeRegister::MergeFrom(
        from._internal_registration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterDatanodeRequest::CopyFrom(const RegisterDatanodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DatanodeNamenode.RegisterDatanodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterDatanodeRequest::IsInitialized() const {
  return true;
}

void RegisterDatanodeRequest::InternalSwap(RegisterDatanodeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.registration_, other->_impl_.registration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterDatanodeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[11]);
}

// ===================================================================

class RegisterDatanodeResponse::_Internal {
 public:
  static const ::DatanodeNamenode::DatanodeRegister& registration(const RegisterDatanodeResponse* msg);
};

const ::DatanodeNamenode::DatanodeRegister&
RegisterDatanodeResponse::_Internal::registration(const RegisterDatanodeResponse* msg) {
  return *msg->_impl_.registration_;
}
RegisterDatanodeResponse::RegisterDatanodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.RegisterDatanodeResponse)
}
RegisterDatanodeResponse::RegisterDatanodeResponse(const RegisterDatanodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterDatanodeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.registration_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_registration()) {
    _this->_impl_.registration_ = new ::DatanodeNamenode::DatanodeRegister(*from._impl_.registration_);
  }
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.RegisterDatanodeResponse)
}

inline void RegisterDatanodeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.registration_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterDatanodeResponse::~RegisterDatanodeResponse() {
  // @@protoc_insertion_point(destructor:DatanodeNamenode.RegisterDatanodeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterDatanodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.registration_;
}

void RegisterDatanodeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterDatanodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DatanodeNamenode.RegisterDatanodeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.registration_ != nullptr) {
    delete _impl_.registration_;
  }
  _impl_.registration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterDatanodeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DatanodeNamenode.DatanodeRegister registration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_registration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterDatanodeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DatanodeNamenode.RegisterDatanodeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DatanodeNamenode.DatanodeRegister registration = 1;
  if (this->_internal_has_registration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::registration(this),
        _Internal::registration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DatanodeNamenode.RegisterDatanodeResponse)
  return target;
}

size_t RegisterDatanodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DatanodeNamenode.RegisterDatanodeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DatanodeNamenode.DatanodeRegister registration = 1;
  if (this->_internal_has_registration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.registration_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterDatanodeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterDatanodeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterDatanodeResponse::GetClassData() const { return &_class_data_; }


void RegisterDatanodeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterDatanodeResponse*>(&to_msg);
  auto& from = static_cast<const RegisterDatanodeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DatanodeNamenode.RegisterDatanodeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_registration()) {
    _this->_internal_mutable_registration()->::DatanodeNamenode::DatanodeRegister::MergeFrom(
        from._internal_registration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterDatanodeResponse::CopyFrom(const RegisterDatanodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DatanodeNamenode.RegisterDatanodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterDatanodeResponse::IsInitialized() const {
  return true;
}

void RegisterDatanodeResponse::InternalSwap(RegisterDatanodeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.registration_, other->_impl_.registration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterDatanodeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[12]);
}

// ===================================================================

class HeartBeatRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<HeartBeatRequest>()._impl_._has_bits_);
  static const ::DatanodeNamenode::DatanodeRegister& registration(const HeartBeatRequest* msg);
  static void set_has_xmitsinprogress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xceivercount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_failedvolums(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cachecapacity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cacheused(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::DatanodeNamenode::DatanodeRegister&
HeartBeatRequest::_Internal::registration(const HeartBeatRequest* msg) {
  return *msg->_impl_.registration_;
}
HeartBeatRequest::HeartBeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.HeartBeatRequest)
}
HeartBeatRequest::HeartBeatRequest(const HeartBeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartBeatRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.registration_){nullptr}
    , decltype(_impl_.xmitsinprogress_){}
    , decltype(_impl_.xceivercount_){}
    , decltype(_impl_.cachecapacity_){}
    , decltype(_impl_.cacheused_){}
    , decltype(_impl_.failedvolums_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_registration()) {
    _this->_impl_.registration_ = new ::DatanodeNamenode::DatanodeRegister(*from._impl_.registration_);
  }
  ::memcpy(&_impl_.xmitsinprogress_, &from._impl_.xmitsinprogress_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.failedvolums_) -
    reinterpret_cast<char*>(&_impl_.xmitsinprogress_)) + sizeof(_impl_.failedvolums_));
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.HeartBeatRequest)
}

inline void HeartBeatRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.registration_){nullptr}
    , decltype(_impl_.xmitsinprogress_){0u}
    , decltype(_impl_.xceivercount_){0u}
    , decltype(_impl_.cachecapacity_){uint64_t{0u}}
    , decltype(_impl_.cacheused_){uint64_t{0u}}
    , decltype(_impl_.failedvolums_){0u}
  };
}

HeartBeatRequest::~HeartBeatRequest() {
  // @@protoc_insertion_point(destructor:DatanodeNamenode.HeartBeatRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartBeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.registration_;
}

void HeartBeatRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartBeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DatanodeNamenode.HeartBeatRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.registration_ != nullptr) {
    delete _impl_.registration_;
  }
  _impl_.registration_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.xmitsinprogress_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.failedvolums_) -
        reinterpret_cast<char*>(&_impl_.xmitsinprogress_)) + sizeof(_impl_.failedvolums_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeatRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DatanodeNamenode.DatanodeRegister registration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_registration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 xmitsInProgress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_xmitsinprogress(&has_bits);
          _impl_.xmitsinprogress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 xceiverCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_xceivercount(&has_bits);
          _impl_.xceivercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 failedVolums = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_failedvolums(&has_bits);
          _impl_.failedvolums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 cacheCapacity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_cachecapacity(&has_bits);
          _impl_.cachecapacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 cacheUsed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_cacheused(&has_bits);
          _impl_.cacheused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartBeatRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DatanodeNamenode.HeartBeatRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DatanodeNamenode.DatanodeRegister registration = 1;
  if (this->_internal_has_registration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::registration(this),
        _Internal::registration(this).GetCachedSize(), target, stream);
  }

  // optional uint32 xmitsInProgress = 3;
  if (_internal_has_xmitsinprogress()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_xmitsinprogress(), target);
  }

  // optional uint32 xceiverCount = 4;
  if (_internal_has_xceivercount()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_xceivercount(), target);
  }

  // optional uint32 failedVolums = 5;
  if (_internal_has_failedvolums()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_failedvolums(), target);
  }

  // optional uint64 cacheCapacity = 6;
  if (_internal_has_cachecapacity()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_cachecapacity(), target);
  }

  // optional uint64 cacheUsed = 7;
  if (_internal_has_cacheused()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_cacheused(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DatanodeNamenode.HeartBeatRequest)
  return target;
}

size_t HeartBeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DatanodeNamenode.HeartBeatRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DatanodeNamenode.DatanodeRegister registration = 1;
  if (this->_internal_has_registration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.registration_);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 xmitsInProgress = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_xmitsinprogress());
    }

    // optional uint32 xceiverCount = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_xceivercount());
    }

    // optional uint64 cacheCapacity = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cachecapacity());
    }

    // optional uint64 cacheUsed = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cacheused());
    }

    // optional uint32 failedVolums = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_failedvolums());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartBeatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartBeatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartBeatRequest::GetClassData() const { return &_class_data_; }


void HeartBeatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartBeatRequest*>(&to_msg);
  auto& from = static_cast<const HeartBeatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DatanodeNamenode.HeartBeatRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_registration()) {
    _this->_internal_mutable_registration()->::DatanodeNamenode::DatanodeRegister::MergeFrom(
        from._internal_registration());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.xmitsinprogress_ = from._impl_.xmitsinprogress_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.xceivercount_ = from._impl_.xceivercount_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.cachecapacity_ = from._impl_.cachecapacity_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cacheused_ = from._impl_.cacheused_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.failedvolums_ = from._impl_.failedvolums_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartBeatRequest::CopyFrom(const HeartBeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DatanodeNamenode.HeartBeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatRequest::IsInitialized() const {
  return true;
}

void HeartBeatRequest::InternalSwap(HeartBeatRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeartBeatRequest, _impl_.failedvolums_)
      + sizeof(HeartBeatRequest::_impl_.failedvolums_)
      - PROTOBUF_FIELD_OFFSET(HeartBeatRequest, _impl_.registration_)>(
          reinterpret_cast<char*>(&_impl_.registration_),
          reinterpret_cast<char*>(&other->_impl_.registration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[13]);
}

// ===================================================================

class HeartBeatResponse::_Internal {
 public:
};

HeartBeatResponse::HeartBeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.HeartBeatResponse)
}
HeartBeatResponse::HeartBeatResponse(const HeartBeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartBeatResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cmds_){from._impl_.cmds_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.HeartBeatResponse)
}

inline void HeartBeatResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cmds_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeartBeatResponse::~HeartBeatResponse() {
  // @@protoc_insertion_point(destructor:DatanodeNamenode.HeartBeatResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartBeatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cmds_.~RepeatedPtrField();
}

void HeartBeatResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartBeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DatanodeNamenode.HeartBeatResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cmds_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeatResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DatanodeNamenode.DatanodeCommand cmds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cmds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartBeatResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DatanodeNamenode.HeartBeatResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DatanodeNamenode.DatanodeCommand cmds = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cmds_size()); i < n; i++) {
    const auto& repfield = this->_internal_cmds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DatanodeNamenode.HeartBeatResponse)
  return target;
}

size_t HeartBeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DatanodeNamenode.HeartBeatResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DatanodeNamenode.DatanodeCommand cmds = 1;
  total_size += 1UL * this->_internal_cmds_size();
  for (const auto& msg : this->_impl_.cmds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartBeatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartBeatResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartBeatResponse::GetClassData() const { return &_class_data_; }


void HeartBeatResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartBeatResponse*>(&to_msg);
  auto& from = static_cast<const HeartBeatResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DatanodeNamenode.HeartBeatResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cmds_.MergeFrom(from._impl_.cmds_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartBeatResponse::CopyFrom(const HeartBeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DatanodeNamenode.HeartBeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatResponse::IsInitialized() const {
  return true;
}

void HeartBeatResponse::InternalSwap(HeartBeatResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cmds_.InternalSwap(&other->_impl_.cmds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[14]);
}

// ===================================================================

class blockReportRequest::_Internal {
 public:
};

blockReportRequest::blockReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.blockReportRequest)
}
blockReportRequest::blockReportRequest(const blockReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  blockReportRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.blockReportRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData blockReportRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*blockReportRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata blockReportRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[15]);
}

// ===================================================================

class blockReportResponse::_Internal {
 public:
};

blockReportResponse::blockReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.blockReportResponse)
}
blockReportResponse::blockReportResponse(const blockReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  blockReportResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.blockReportResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData blockReportResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*blockReportResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata blockReportResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[16]);
}

// ===================================================================

class cacheReportRequest::_Internal {
 public:
};

cacheReportRequest::cacheReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.cacheReportRequest)
}
cacheReportRequest::cacheReportRequest(const cacheReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  cacheReportRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.cacheReportRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData cacheReportRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*cacheReportRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata cacheReportRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[17]);
}

// ===================================================================

class cacheReportResponse::_Internal {
 public:
};

cacheReportResponse::cacheReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.cacheReportResponse)
}
cacheReportResponse::cacheReportResponse(const cacheReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  cacheReportResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.cacheReportResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData cacheReportResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*cacheReportResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata cacheReportResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[18]);
}

// ===================================================================

class BlockReceivedAndDeletedRequest::_Internal {
 public:
  static const ::DatanodeNamenode::DatanodeRegister& registration(const BlockReceivedAndDeletedRequest* msg);
};

const ::DatanodeNamenode::DatanodeRegister&
BlockReceivedAndDeletedRequest::_Internal::registration(const BlockReceivedAndDeletedRequest* msg) {
  return *msg->_impl_.registration_;
}
BlockReceivedAndDeletedRequest::BlockReceivedAndDeletedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.BlockReceivedAndDeletedRequest)
}
BlockReceivedAndDeletedRequest::BlockReceivedAndDeletedRequest(const BlockReceivedAndDeletedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockReceivedAndDeletedRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){from._impl_.blocks_}
    , decltype(_impl_.registration_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_registration()) {
    _this->_impl_.registration_ = new ::DatanodeNamenode::DatanodeRegister(*from._impl_.registration_);
  }
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.BlockReceivedAndDeletedRequest)
}

inline void BlockReceivedAndDeletedRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){arena}
    , decltype(_impl_.registration_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlockReceivedAndDeletedRequest::~BlockReceivedAndDeletedRequest() {
  // @@protoc_insertion_point(destructor:DatanodeNamenode.BlockReceivedAndDeletedRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockReceivedAndDeletedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blocks_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.registration_;
}

void BlockReceivedAndDeletedRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockReceivedAndDeletedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DatanodeNamenode.BlockReceivedAndDeletedRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blocks_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.registration_ != nullptr) {
    delete _impl_.registration_;
  }
  _impl_.registration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockReceivedAndDeletedRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DatanodeNamenode.DatanodeRegister registration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_registration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .DatanodeNamenode.ReceivedDeletedBlockInfo blocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockReceivedAndDeletedRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DatanodeNamenode.BlockReceivedAndDeletedRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DatanodeNamenode.DatanodeRegister registration = 1;
  if (this->_internal_has_registration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::registration(this),
        _Internal::registration(this).GetCachedSize(), target, stream);
  }

  // repeated .DatanodeNamenode.ReceivedDeletedBlockInfo blocks = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_blocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DatanodeNamenode.BlockReceivedAndDeletedRequest)
  return target;
}

size_t BlockReceivedAndDeletedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DatanodeNamenode.BlockReceivedAndDeletedRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DatanodeNamenode.ReceivedDeletedBlockInfo blocks = 2;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->_impl_.blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DatanodeNamenode.DatanodeRegister registration = 1;
  if (this->_internal_has_registration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.registration_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockReceivedAndDeletedRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockReceivedAndDeletedRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockReceivedAndDeletedRequest::GetClassData() const { return &_class_data_; }


void BlockReceivedAndDeletedRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockReceivedAndDeletedRequest*>(&to_msg);
  auto& from = static_cast<const BlockReceivedAndDeletedRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DatanodeNamenode.BlockReceivedAndDeletedRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blocks_.MergeFrom(from._impl_.blocks_);
  if (from._internal_has_registration()) {
    _this->_internal_mutable_registration()->::DatanodeNamenode::DatanodeRegister::MergeFrom(
        from._internal_registration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockReceivedAndDeletedRequest::CopyFrom(const BlockReceivedAndDeletedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DatanodeNamenode.BlockReceivedAndDeletedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockReceivedAndDeletedRequest::IsInitialized() const {
  return true;
}

void BlockReceivedAndDeletedRequest::InternalSwap(BlockReceivedAndDeletedRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blocks_.InternalSwap(&other->_impl_.blocks_);
  swap(_impl_.registration_, other->_impl_.registration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockReceivedAndDeletedRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[19]);
}

// ===================================================================

class BlockReceivedAndDeletedResponse::_Internal {
 public:
};

BlockReceivedAndDeletedResponse::BlockReceivedAndDeletedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.BlockReceivedAndDeletedResponse)
}
BlockReceivedAndDeletedResponse::BlockReceivedAndDeletedResponse(const BlockReceivedAndDeletedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  BlockReceivedAndDeletedResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.BlockReceivedAndDeletedResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockReceivedAndDeletedResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockReceivedAndDeletedResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata BlockReceivedAndDeletedResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[20]);
}

// ===================================================================

class ErrorReportRequest::_Internal {
 public:
  static const ::DatanodeNamenode::DatanodeRegister& registration(const ErrorReportRequest* msg);
};

const ::DatanodeNamenode::DatanodeRegister&
ErrorReportRequest::_Internal::registration(const ErrorReportRequest* msg) {
  return *msg->_impl_.registration_;
}
ErrorReportRequest::ErrorReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.ErrorReportRequest)
}
ErrorReportRequest::ErrorReportRequest(const ErrorReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ErrorReportRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.registration_){nullptr}
    , decltype(_impl_.errorcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_registration()) {
    _this->_impl_.registration_ = new ::DatanodeNamenode::DatanodeRegister(*from._impl_.registration_);
  }
  _this->_impl_.errorcode_ = from._impl_.errorcode_;
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.ErrorReportRequest)
}

inline void ErrorReportRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.registration_){nullptr}
    , decltype(_impl_.errorcode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ErrorReportRequest::~ErrorReportRequest() {
  // @@protoc_insertion_point(destructor:DatanodeNamenode.ErrorReportRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ErrorReportRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.registration_;
}

void ErrorReportRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ErrorReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DatanodeNamenode.ErrorReportRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.registration_ != nullptr) {
    delete _impl_.registration_;
  }
  _impl_.registration_ = nullptr;
  _impl_.errorcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorReportRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DatanodeNamenode.DatanodeRegister registration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_registration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DatanodeNamenode.ErrorReportRequest.ErrorCode errorCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_errorcode(static_cast<::DatanodeNamenode::ErrorReportRequest_ErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DatanodeNamenode.ErrorReportRequest.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ErrorReportRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DatanodeNamenode.ErrorReportRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DatanodeNamenode.DatanodeRegister registration = 1;
  if (this->_internal_has_registration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::registration(this),
        _Internal::registration(this).GetCachedSize(), target, stream);
  }

  // .DatanodeNamenode.ErrorReportRequest.ErrorCode errorCode = 2;
  if (this->_internal_errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_errorcode(), target);
  }

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DatanodeNamenode.ErrorReportRequest.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DatanodeNamenode.ErrorReportRequest)
  return target;
}

size_t ErrorReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DatanodeNamenode.ErrorReportRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .DatanodeNamenode.DatanodeRegister registration = 1;
  if (this->_internal_has_registration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.registration_);
  }

  // .DatanodeNamenode.ErrorReportRequest.ErrorCode errorCode = 2;
  if (this->_internal_errorcode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_errorcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrorReportRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ErrorReportRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrorReportRequest::GetClassData() const { return &_class_data_; }


void ErrorReportRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ErrorReportRequest*>(&to_msg);
  auto& from = static_cast<const ErrorReportRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DatanodeNamenode.ErrorReportRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_has_registration()) {
    _this->_internal_mutable_registration()->::DatanodeNamenode::DatanodeRegister::MergeFrom(
        from._internal_registration());
  }
  if (from._internal_errorcode() != 0) {
    _this->_internal_set_errorcode(from._internal_errorcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorReportRequest::CopyFrom(const ErrorReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DatanodeNamenode.ErrorReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorReportRequest::IsInitialized() const {
  return true;
}

void ErrorReportRequest::InternalSwap(ErrorReportRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ErrorReportRequest, _impl_.errorcode_)
      + sizeof(ErrorReportRequest::_impl_.errorcode_)
      - PROTOBUF_FIELD_OFFSET(ErrorReportRequest, _impl_.registration_)>(
          reinterpret_cast<char*>(&_impl_.registration_),
          reinterpret_cast<char*>(&other->_impl_.registration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorReportRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[21]);
}

// ===================================================================

class ErrorReportResponse::_Internal {
 public:
};

ErrorReportResponse::ErrorReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.ErrorReportResponse)
}
ErrorReportResponse::ErrorReportResponse(const ErrorReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ErrorReportResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.ErrorReportResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrorReportResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrorReportResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ErrorReportResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[22]);
}

// ===================================================================

class ReportBadBlockRequest::_Internal {
 public:
};

void ReportBadBlockRequest::clear_blocks() {
  _impl_.blocks_.Clear();
}
ReportBadBlockRequest::ReportBadBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.ReportBadBlockRequest)
}
ReportBadBlockRequest::ReportBadBlockRequest(const ReportBadBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReportBadBlockRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){from._impl_.blocks_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.ReportBadBlockRequest)
}

inline void ReportBadBlockRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReportBadBlockRequest::~ReportBadBlockRequest() {
  // @@protoc_insertion_point(destructor:DatanodeNamenode.ReportBadBlockRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReportBadBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blocks_.~RepeatedPtrField();
}

void ReportBadBlockRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReportBadBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DatanodeNamenode.ReportBadBlockRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blocks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportBadBlockRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .LocatedBlock blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReportBadBlockRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DatanodeNamenode.ReportBadBlockRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LocatedBlock blocks = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_blocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DatanodeNamenode.ReportBadBlockRequest)
  return target;
}

size_t ReportBadBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DatanodeNamenode.ReportBadBlockRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LocatedBlock blocks = 1;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->_impl_.blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportBadBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReportBadBlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportBadBlockRequest::GetClassData() const { return &_class_data_; }


void ReportBadBlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReportBadBlockRequest*>(&to_msg);
  auto& from = static_cast<const ReportBadBlockRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DatanodeNamenode.ReportBadBlockRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blocks_.MergeFrom(from._impl_.blocks_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportBadBlockRequest::CopyFrom(const ReportBadBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DatanodeNamenode.ReportBadBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportBadBlockRequest::IsInitialized() const {
  return true;
}

void ReportBadBlockRequest::InternalSwap(ReportBadBlockRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blocks_.InternalSwap(&other->_impl_.blocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportBadBlockRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[23]);
}

// ===================================================================

class ReportBadBlockResponse::_Internal {
 public:
};

ReportBadBlockResponse::ReportBadBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DatanodeNamenode.ReportBadBlockResponse)
}
ReportBadBlockResponse::ReportBadBlockResponse(const ReportBadBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ReportBadBlockResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DatanodeNamenode.ReportBadBlockResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportBadBlockResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportBadBlockResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReportBadBlockResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatanodeNamenode_2eproto_getter, &descriptor_table_DatanodeNamenode_2eproto_once,
      file_level_metadata_DatanodeNamenode_2eproto[24]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace DatanodeNamenode
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::DatanodeRegister*
Arena::CreateMaybeMessage< ::DatanodeNamenode::DatanodeRegister >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::DatanodeRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::DatanodeCommand*
Arena::CreateMaybeMessage< ::DatanodeNamenode::DatanodeCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::DatanodeCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::BalanceBandwidth*
Arena::CreateMaybeMessage< ::DatanodeNamenode::BalanceBandwidth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::BalanceBandwidth >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::BlockCommand*
Arena::CreateMaybeMessage< ::DatanodeNamenode::BlockCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::BlockCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::BlockRecovery*
Arena::CreateMaybeMessage< ::DatanodeNamenode::BlockRecovery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::BlockRecovery >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::Finalize*
Arena::CreateMaybeMessage< ::DatanodeNamenode::Finalize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::Finalize >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::KeyUpdate*
Arena::CreateMaybeMessage< ::DatanodeNamenode::KeyUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::KeyUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::Register*
Arena::CreateMaybeMessage< ::DatanodeNamenode::Register >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::Register >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::CacheCommand*
Arena::CreateMaybeMessage< ::DatanodeNamenode::CacheCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::CacheCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::BlockId*
Arena::CreateMaybeMessage< ::DatanodeNamenode::BlockId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::BlockId >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::ReceivedDeletedBlockInfo*
Arena::CreateMaybeMessage< ::DatanodeNamenode::ReceivedDeletedBlockInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::ReceivedDeletedBlockInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::RegisterDatanodeRequest*
Arena::CreateMaybeMessage< ::DatanodeNamenode::RegisterDatanodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::RegisterDatanodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::RegisterDatanodeResponse*
Arena::CreateMaybeMessage< ::DatanodeNamenode::RegisterDatanodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::RegisterDatanodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::HeartBeatRequest*
Arena::CreateMaybeMessage< ::DatanodeNamenode::HeartBeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::HeartBeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::HeartBeatResponse*
Arena::CreateMaybeMessage< ::DatanodeNamenode::HeartBeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::HeartBeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::blockReportRequest*
Arena::CreateMaybeMessage< ::DatanodeNamenode::blockReportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::blockReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::blockReportResponse*
Arena::CreateMaybeMessage< ::DatanodeNamenode::blockReportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::blockReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::cacheReportRequest*
Arena::CreateMaybeMessage< ::DatanodeNamenode::cacheReportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::cacheReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::cacheReportResponse*
Arena::CreateMaybeMessage< ::DatanodeNamenode::cacheReportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::cacheReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::BlockReceivedAndDeletedRequest*
Arena::CreateMaybeMessage< ::DatanodeNamenode::BlockReceivedAndDeletedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::BlockReceivedAndDeletedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::BlockReceivedAndDeletedResponse*
Arena::CreateMaybeMessage< ::DatanodeNamenode::BlockReceivedAndDeletedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::BlockReceivedAndDeletedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::ErrorReportRequest*
Arena::CreateMaybeMessage< ::DatanodeNamenode::ErrorReportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::ErrorReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::ErrorReportResponse*
Arena::CreateMaybeMessage< ::DatanodeNamenode::ErrorReportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::ErrorReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::ReportBadBlockRequest*
Arena::CreateMaybeMessage< ::DatanodeNamenode::ReportBadBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::ReportBadBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeNamenode::ReportBadBlockResponse*
Arena::CreateMaybeMessage< ::DatanodeNamenode::ReportBadBlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeNamenode::ReportBadBlockResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
