// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DatanodeNamenode.proto
#ifndef GRPC_DatanodeNamenode_2eproto__INCLUDED
#define GRPC_DatanodeNamenode_2eproto__INCLUDED

#include "DatanodeNamenode.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace DatanodeNamenode {

class DatanodeService final {
 public:
  static constexpr char const* service_full_name() {
    return "DatanodeNamenode.DatanodeService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status registerDatanode(::grpc::ClientContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest& request, ::DatanodeNamenode::RegisterDatanodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::RegisterDatanodeResponse>> AsyncregisterDatanode(::grpc::ClientContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::RegisterDatanodeResponse>>(AsyncregisterDatanodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::RegisterDatanodeResponse>> PrepareAsyncregisterDatanode(::grpc::ClientContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::RegisterDatanodeResponse>>(PrepareAsyncregisterDatanodeRaw(context, request, cq));
    }
    virtual ::grpc::Status sendHeartBeat(::grpc::ClientContext* context, const ::DatanodeNamenode::HeartBeatRequest& request, ::DatanodeNamenode::HeartBeatResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::HeartBeatResponse>> AsyncsendHeartBeat(::grpc::ClientContext* context, const ::DatanodeNamenode::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::HeartBeatResponse>>(AsyncsendHeartBeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::HeartBeatResponse>> PrepareAsyncsendHeartBeat(::grpc::ClientContext* context, const ::DatanodeNamenode::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::HeartBeatResponse>>(PrepareAsyncsendHeartBeatRaw(context, request, cq));
    }
    virtual ::grpc::Status blockReport(::grpc::ClientContext* context, const ::DatanodeNamenode::blockReportRequest& request, ::DatanodeNamenode::blockReportResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::blockReportResponse>> AsyncblockReport(::grpc::ClientContext* context, const ::DatanodeNamenode::blockReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::blockReportResponse>>(AsyncblockReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::blockReportResponse>> PrepareAsyncblockReport(::grpc::ClientContext* context, const ::DatanodeNamenode::blockReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::blockReportResponse>>(PrepareAsyncblockReportRaw(context, request, cq));
    }
    virtual ::grpc::Status cacheReport(::grpc::ClientContext* context, const ::DatanodeNamenode::cacheReportRequest& request, ::DatanodeNamenode::cacheReportResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::cacheReportResponse>> AsynccacheReport(::grpc::ClientContext* context, const ::DatanodeNamenode::cacheReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::cacheReportResponse>>(AsynccacheReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::cacheReportResponse>> PrepareAsynccacheReport(::grpc::ClientContext* context, const ::DatanodeNamenode::cacheReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::cacheReportResponse>>(PrepareAsynccacheReportRaw(context, request, cq));
    }
    virtual ::grpc::Status blockReceivedAndDeleted(::grpc::ClientContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest& request, ::DatanodeNamenode::BlockReceivedAndDeletedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::BlockReceivedAndDeletedResponse>> AsyncblockReceivedAndDeleted(::grpc::ClientContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::BlockReceivedAndDeletedResponse>>(AsyncblockReceivedAndDeletedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::BlockReceivedAndDeletedResponse>> PrepareAsyncblockReceivedAndDeleted(::grpc::ClientContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::BlockReceivedAndDeletedResponse>>(PrepareAsyncblockReceivedAndDeletedRaw(context, request, cq));
    }
    virtual ::grpc::Status errorReport(::grpc::ClientContext* context, const ::DatanodeNamenode::ErrorReportRequest& request, ::DatanodeNamenode::ErrorReportResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::ErrorReportResponse>> AsyncerrorReport(::grpc::ClientContext* context, const ::DatanodeNamenode::ErrorReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::ErrorReportResponse>>(AsyncerrorReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::ErrorReportResponse>> PrepareAsyncerrorReport(::grpc::ClientContext* context, const ::DatanodeNamenode::ErrorReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::ErrorReportResponse>>(PrepareAsyncerrorReportRaw(context, request, cq));
    }
    virtual ::grpc::Status reportBadBlock(::grpc::ClientContext* context, const ::DatanodeNamenode::ReportBadBlockRequest& request, ::DatanodeNamenode::ReportBadBlockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::ReportBadBlockResponse>> AsyncreportBadBlock(::grpc::ClientContext* context, const ::DatanodeNamenode::ReportBadBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::ReportBadBlockResponse>>(AsyncreportBadBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::ReportBadBlockResponse>> PrepareAsyncreportBadBlock(::grpc::ClientContext* context, const ::DatanodeNamenode::ReportBadBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::ReportBadBlockResponse>>(PrepareAsyncreportBadBlockRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void registerDatanode(::grpc::ClientContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest* request, ::DatanodeNamenode::RegisterDatanodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void registerDatanode(::grpc::ClientContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest* request, ::DatanodeNamenode::RegisterDatanodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void sendHeartBeat(::grpc::ClientContext* context, const ::DatanodeNamenode::HeartBeatRequest* request, ::DatanodeNamenode::HeartBeatResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendHeartBeat(::grpc::ClientContext* context, const ::DatanodeNamenode::HeartBeatRequest* request, ::DatanodeNamenode::HeartBeatResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void blockReport(::grpc::ClientContext* context, const ::DatanodeNamenode::blockReportRequest* request, ::DatanodeNamenode::blockReportResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void blockReport(::grpc::ClientContext* context, const ::DatanodeNamenode::blockReportRequest* request, ::DatanodeNamenode::blockReportResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void cacheReport(::grpc::ClientContext* context, const ::DatanodeNamenode::cacheReportRequest* request, ::DatanodeNamenode::cacheReportResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void cacheReport(::grpc::ClientContext* context, const ::DatanodeNamenode::cacheReportRequest* request, ::DatanodeNamenode::cacheReportResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void blockReceivedAndDeleted(::grpc::ClientContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest* request, ::DatanodeNamenode::BlockReceivedAndDeletedResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void blockReceivedAndDeleted(::grpc::ClientContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest* request, ::DatanodeNamenode::BlockReceivedAndDeletedResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void errorReport(::grpc::ClientContext* context, const ::DatanodeNamenode::ErrorReportRequest* request, ::DatanodeNamenode::ErrorReportResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void errorReport(::grpc::ClientContext* context, const ::DatanodeNamenode::ErrorReportRequest* request, ::DatanodeNamenode::ErrorReportResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void reportBadBlock(::grpc::ClientContext* context, const ::DatanodeNamenode::ReportBadBlockRequest* request, ::DatanodeNamenode::ReportBadBlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void reportBadBlock(::grpc::ClientContext* context, const ::DatanodeNamenode::ReportBadBlockRequest* request, ::DatanodeNamenode::ReportBadBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::RegisterDatanodeResponse>* AsyncregisterDatanodeRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::RegisterDatanodeResponse>* PrepareAsyncregisterDatanodeRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::HeartBeatResponse>* AsyncsendHeartBeatRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::HeartBeatResponse>* PrepareAsyncsendHeartBeatRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::blockReportResponse>* AsyncblockReportRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::blockReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::blockReportResponse>* PrepareAsyncblockReportRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::blockReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::cacheReportResponse>* AsynccacheReportRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::cacheReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::cacheReportResponse>* PrepareAsynccacheReportRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::cacheReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::BlockReceivedAndDeletedResponse>* AsyncblockReceivedAndDeletedRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::BlockReceivedAndDeletedResponse>* PrepareAsyncblockReceivedAndDeletedRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::ErrorReportResponse>* AsyncerrorReportRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::ErrorReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::ErrorReportResponse>* PrepareAsyncerrorReportRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::ErrorReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::ReportBadBlockResponse>* AsyncreportBadBlockRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::ReportBadBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DatanodeNamenode::ReportBadBlockResponse>* PrepareAsyncreportBadBlockRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::ReportBadBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status registerDatanode(::grpc::ClientContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest& request, ::DatanodeNamenode::RegisterDatanodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::RegisterDatanodeResponse>> AsyncregisterDatanode(::grpc::ClientContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::RegisterDatanodeResponse>>(AsyncregisterDatanodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::RegisterDatanodeResponse>> PrepareAsyncregisterDatanode(::grpc::ClientContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::RegisterDatanodeResponse>>(PrepareAsyncregisterDatanodeRaw(context, request, cq));
    }
    ::grpc::Status sendHeartBeat(::grpc::ClientContext* context, const ::DatanodeNamenode::HeartBeatRequest& request, ::DatanodeNamenode::HeartBeatResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::HeartBeatResponse>> AsyncsendHeartBeat(::grpc::ClientContext* context, const ::DatanodeNamenode::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::HeartBeatResponse>>(AsyncsendHeartBeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::HeartBeatResponse>> PrepareAsyncsendHeartBeat(::grpc::ClientContext* context, const ::DatanodeNamenode::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::HeartBeatResponse>>(PrepareAsyncsendHeartBeatRaw(context, request, cq));
    }
    ::grpc::Status blockReport(::grpc::ClientContext* context, const ::DatanodeNamenode::blockReportRequest& request, ::DatanodeNamenode::blockReportResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::blockReportResponse>> AsyncblockReport(::grpc::ClientContext* context, const ::DatanodeNamenode::blockReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::blockReportResponse>>(AsyncblockReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::blockReportResponse>> PrepareAsyncblockReport(::grpc::ClientContext* context, const ::DatanodeNamenode::blockReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::blockReportResponse>>(PrepareAsyncblockReportRaw(context, request, cq));
    }
    ::grpc::Status cacheReport(::grpc::ClientContext* context, const ::DatanodeNamenode::cacheReportRequest& request, ::DatanodeNamenode::cacheReportResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::cacheReportResponse>> AsynccacheReport(::grpc::ClientContext* context, const ::DatanodeNamenode::cacheReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::cacheReportResponse>>(AsynccacheReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::cacheReportResponse>> PrepareAsynccacheReport(::grpc::ClientContext* context, const ::DatanodeNamenode::cacheReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::cacheReportResponse>>(PrepareAsynccacheReportRaw(context, request, cq));
    }
    ::grpc::Status blockReceivedAndDeleted(::grpc::ClientContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest& request, ::DatanodeNamenode::BlockReceivedAndDeletedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::BlockReceivedAndDeletedResponse>> AsyncblockReceivedAndDeleted(::grpc::ClientContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::BlockReceivedAndDeletedResponse>>(AsyncblockReceivedAndDeletedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::BlockReceivedAndDeletedResponse>> PrepareAsyncblockReceivedAndDeleted(::grpc::ClientContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::BlockReceivedAndDeletedResponse>>(PrepareAsyncblockReceivedAndDeletedRaw(context, request, cq));
    }
    ::grpc::Status errorReport(::grpc::ClientContext* context, const ::DatanodeNamenode::ErrorReportRequest& request, ::DatanodeNamenode::ErrorReportResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::ErrorReportResponse>> AsyncerrorReport(::grpc::ClientContext* context, const ::DatanodeNamenode::ErrorReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::ErrorReportResponse>>(AsyncerrorReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::ErrorReportResponse>> PrepareAsyncerrorReport(::grpc::ClientContext* context, const ::DatanodeNamenode::ErrorReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::ErrorReportResponse>>(PrepareAsyncerrorReportRaw(context, request, cq));
    }
    ::grpc::Status reportBadBlock(::grpc::ClientContext* context, const ::DatanodeNamenode::ReportBadBlockRequest& request, ::DatanodeNamenode::ReportBadBlockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::ReportBadBlockResponse>> AsyncreportBadBlock(::grpc::ClientContext* context, const ::DatanodeNamenode::ReportBadBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::ReportBadBlockResponse>>(AsyncreportBadBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::ReportBadBlockResponse>> PrepareAsyncreportBadBlock(::grpc::ClientContext* context, const ::DatanodeNamenode::ReportBadBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::ReportBadBlockResponse>>(PrepareAsyncreportBadBlockRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void registerDatanode(::grpc::ClientContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest* request, ::DatanodeNamenode::RegisterDatanodeResponse* response, std::function<void(::grpc::Status)>) override;
      void registerDatanode(::grpc::ClientContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest* request, ::DatanodeNamenode::RegisterDatanodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void sendHeartBeat(::grpc::ClientContext* context, const ::DatanodeNamenode::HeartBeatRequest* request, ::DatanodeNamenode::HeartBeatResponse* response, std::function<void(::grpc::Status)>) override;
      void sendHeartBeat(::grpc::ClientContext* context, const ::DatanodeNamenode::HeartBeatRequest* request, ::DatanodeNamenode::HeartBeatResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void blockReport(::grpc::ClientContext* context, const ::DatanodeNamenode::blockReportRequest* request, ::DatanodeNamenode::blockReportResponse* response, std::function<void(::grpc::Status)>) override;
      void blockReport(::grpc::ClientContext* context, const ::DatanodeNamenode::blockReportRequest* request, ::DatanodeNamenode::blockReportResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void cacheReport(::grpc::ClientContext* context, const ::DatanodeNamenode::cacheReportRequest* request, ::DatanodeNamenode::cacheReportResponse* response, std::function<void(::grpc::Status)>) override;
      void cacheReport(::grpc::ClientContext* context, const ::DatanodeNamenode::cacheReportRequest* request, ::DatanodeNamenode::cacheReportResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void blockReceivedAndDeleted(::grpc::ClientContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest* request, ::DatanodeNamenode::BlockReceivedAndDeletedResponse* response, std::function<void(::grpc::Status)>) override;
      void blockReceivedAndDeleted(::grpc::ClientContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest* request, ::DatanodeNamenode::BlockReceivedAndDeletedResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void errorReport(::grpc::ClientContext* context, const ::DatanodeNamenode::ErrorReportRequest* request, ::DatanodeNamenode::ErrorReportResponse* response, std::function<void(::grpc::Status)>) override;
      void errorReport(::grpc::ClientContext* context, const ::DatanodeNamenode::ErrorReportRequest* request, ::DatanodeNamenode::ErrorReportResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void reportBadBlock(::grpc::ClientContext* context, const ::DatanodeNamenode::ReportBadBlockRequest* request, ::DatanodeNamenode::ReportBadBlockResponse* response, std::function<void(::grpc::Status)>) override;
      void reportBadBlock(::grpc::ClientContext* context, const ::DatanodeNamenode::ReportBadBlockRequest* request, ::DatanodeNamenode::ReportBadBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::RegisterDatanodeResponse>* AsyncregisterDatanodeRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::RegisterDatanodeResponse>* PrepareAsyncregisterDatanodeRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::HeartBeatResponse>* AsyncsendHeartBeatRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::HeartBeatResponse>* PrepareAsyncsendHeartBeatRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::blockReportResponse>* AsyncblockReportRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::blockReportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::blockReportResponse>* PrepareAsyncblockReportRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::blockReportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::cacheReportResponse>* AsynccacheReportRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::cacheReportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::cacheReportResponse>* PrepareAsynccacheReportRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::cacheReportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::BlockReceivedAndDeletedResponse>* AsyncblockReceivedAndDeletedRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::BlockReceivedAndDeletedResponse>* PrepareAsyncblockReceivedAndDeletedRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::ErrorReportResponse>* AsyncerrorReportRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::ErrorReportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::ErrorReportResponse>* PrepareAsyncerrorReportRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::ErrorReportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::ReportBadBlockResponse>* AsyncreportBadBlockRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::ReportBadBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::ReportBadBlockResponse>* PrepareAsyncreportBadBlockRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::ReportBadBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_registerDatanode_;
    const ::grpc::internal::RpcMethod rpcmethod_sendHeartBeat_;
    const ::grpc::internal::RpcMethod rpcmethod_blockReport_;
    const ::grpc::internal::RpcMethod rpcmethod_cacheReport_;
    const ::grpc::internal::RpcMethod rpcmethod_blockReceivedAndDeleted_;
    const ::grpc::internal::RpcMethod rpcmethod_errorReport_;
    const ::grpc::internal::RpcMethod rpcmethod_reportBadBlock_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status registerDatanode(::grpc::ServerContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest* request, ::DatanodeNamenode::RegisterDatanodeResponse* response);
    virtual ::grpc::Status sendHeartBeat(::grpc::ServerContext* context, const ::DatanodeNamenode::HeartBeatRequest* request, ::DatanodeNamenode::HeartBeatResponse* response);
    virtual ::grpc::Status blockReport(::grpc::ServerContext* context, const ::DatanodeNamenode::blockReportRequest* request, ::DatanodeNamenode::blockReportResponse* response);
    virtual ::grpc::Status cacheReport(::grpc::ServerContext* context, const ::DatanodeNamenode::cacheReportRequest* request, ::DatanodeNamenode::cacheReportResponse* response);
    virtual ::grpc::Status blockReceivedAndDeleted(::grpc::ServerContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest* request, ::DatanodeNamenode::BlockReceivedAndDeletedResponse* response);
    virtual ::grpc::Status errorReport(::grpc::ServerContext* context, const ::DatanodeNamenode::ErrorReportRequest* request, ::DatanodeNamenode::ErrorReportResponse* response);
    virtual ::grpc::Status reportBadBlock(::grpc::ServerContext* context, const ::DatanodeNamenode::ReportBadBlockRequest* request, ::DatanodeNamenode::ReportBadBlockResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_registerDatanode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_registerDatanode() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_registerDatanode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerDatanode(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::RegisterDatanodeRequest* /*request*/, ::DatanodeNamenode::RegisterDatanodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterDatanode(::grpc::ServerContext* context, ::DatanodeNamenode::RegisterDatanodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::DatanodeNamenode::RegisterDatanodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendHeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendHeartBeat() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_sendHeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendHeartBeat(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::HeartBeatRequest* /*request*/, ::DatanodeNamenode::HeartBeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendHeartBeat(::grpc::ServerContext* context, ::DatanodeNamenode::HeartBeatRequest* request, ::grpc::ServerAsyncResponseWriter< ::DatanodeNamenode::HeartBeatResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_blockReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_blockReport() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_blockReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status blockReport(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::blockReportRequest* /*request*/, ::DatanodeNamenode::blockReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestblockReport(::grpc::ServerContext* context, ::DatanodeNamenode::blockReportRequest* request, ::grpc::ServerAsyncResponseWriter< ::DatanodeNamenode::blockReportResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_cacheReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_cacheReport() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_cacheReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cacheReport(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::cacheReportRequest* /*request*/, ::DatanodeNamenode::cacheReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcacheReport(::grpc::ServerContext* context, ::DatanodeNamenode::cacheReportRequest* request, ::grpc::ServerAsyncResponseWriter< ::DatanodeNamenode::cacheReportResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_blockReceivedAndDeleted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_blockReceivedAndDeleted() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_blockReceivedAndDeleted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status blockReceivedAndDeleted(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest* /*request*/, ::DatanodeNamenode::BlockReceivedAndDeletedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestblockReceivedAndDeleted(::grpc::ServerContext* context, ::DatanodeNamenode::BlockReceivedAndDeletedRequest* request, ::grpc::ServerAsyncResponseWriter< ::DatanodeNamenode::BlockReceivedAndDeletedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_errorReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_errorReport() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_errorReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status errorReport(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::ErrorReportRequest* /*request*/, ::DatanodeNamenode::ErrorReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesterrorReport(::grpc::ServerContext* context, ::DatanodeNamenode::ErrorReportRequest* request, ::grpc::ServerAsyncResponseWriter< ::DatanodeNamenode::ErrorReportResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_reportBadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_reportBadBlock() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_reportBadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reportBadBlock(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::ReportBadBlockRequest* /*request*/, ::DatanodeNamenode::ReportBadBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreportBadBlock(::grpc::ServerContext* context, ::DatanodeNamenode::ReportBadBlockRequest* request, ::grpc::ServerAsyncResponseWriter< ::DatanodeNamenode::ReportBadBlockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_registerDatanode<WithAsyncMethod_sendHeartBeat<WithAsyncMethod_blockReport<WithAsyncMethod_cacheReport<WithAsyncMethod_blockReceivedAndDeleted<WithAsyncMethod_errorReport<WithAsyncMethod_reportBadBlock<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_registerDatanode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_registerDatanode() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::DatanodeNamenode::RegisterDatanodeRequest, ::DatanodeNamenode::RegisterDatanodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest* request, ::DatanodeNamenode::RegisterDatanodeResponse* response) { return this->registerDatanode(context, request, response); }));}
    void SetMessageAllocatorFor_registerDatanode(
        ::grpc::MessageAllocator< ::DatanodeNamenode::RegisterDatanodeRequest, ::DatanodeNamenode::RegisterDatanodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::DatanodeNamenode::RegisterDatanodeRequest, ::DatanodeNamenode::RegisterDatanodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_registerDatanode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerDatanode(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::RegisterDatanodeRequest* /*request*/, ::DatanodeNamenode::RegisterDatanodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* registerDatanode(
      ::grpc::CallbackServerContext* /*context*/, const ::DatanodeNamenode::RegisterDatanodeRequest* /*request*/, ::DatanodeNamenode::RegisterDatanodeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_sendHeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendHeartBeat() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::DatanodeNamenode::HeartBeatRequest, ::DatanodeNamenode::HeartBeatResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::DatanodeNamenode::HeartBeatRequest* request, ::DatanodeNamenode::HeartBeatResponse* response) { return this->sendHeartBeat(context, request, response); }));}
    void SetMessageAllocatorFor_sendHeartBeat(
        ::grpc::MessageAllocator< ::DatanodeNamenode::HeartBeatRequest, ::DatanodeNamenode::HeartBeatResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::DatanodeNamenode::HeartBeatRequest, ::DatanodeNamenode::HeartBeatResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sendHeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendHeartBeat(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::HeartBeatRequest* /*request*/, ::DatanodeNamenode::HeartBeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendHeartBeat(
      ::grpc::CallbackServerContext* /*context*/, const ::DatanodeNamenode::HeartBeatRequest* /*request*/, ::DatanodeNamenode::HeartBeatResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_blockReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_blockReport() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::DatanodeNamenode::blockReportRequest, ::DatanodeNamenode::blockReportResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::DatanodeNamenode::blockReportRequest* request, ::DatanodeNamenode::blockReportResponse* response) { return this->blockReport(context, request, response); }));}
    void SetMessageAllocatorFor_blockReport(
        ::grpc::MessageAllocator< ::DatanodeNamenode::blockReportRequest, ::DatanodeNamenode::blockReportResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::DatanodeNamenode::blockReportRequest, ::DatanodeNamenode::blockReportResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_blockReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status blockReport(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::blockReportRequest* /*request*/, ::DatanodeNamenode::blockReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* blockReport(
      ::grpc::CallbackServerContext* /*context*/, const ::DatanodeNamenode::blockReportRequest* /*request*/, ::DatanodeNamenode::blockReportResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_cacheReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_cacheReport() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::DatanodeNamenode::cacheReportRequest, ::DatanodeNamenode::cacheReportResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::DatanodeNamenode::cacheReportRequest* request, ::DatanodeNamenode::cacheReportResponse* response) { return this->cacheReport(context, request, response); }));}
    void SetMessageAllocatorFor_cacheReport(
        ::grpc::MessageAllocator< ::DatanodeNamenode::cacheReportRequest, ::DatanodeNamenode::cacheReportResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::DatanodeNamenode::cacheReportRequest, ::DatanodeNamenode::cacheReportResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_cacheReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cacheReport(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::cacheReportRequest* /*request*/, ::DatanodeNamenode::cacheReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* cacheReport(
      ::grpc::CallbackServerContext* /*context*/, const ::DatanodeNamenode::cacheReportRequest* /*request*/, ::DatanodeNamenode::cacheReportResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_blockReceivedAndDeleted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_blockReceivedAndDeleted() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::DatanodeNamenode::BlockReceivedAndDeletedRequest, ::DatanodeNamenode::BlockReceivedAndDeletedResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest* request, ::DatanodeNamenode::BlockReceivedAndDeletedResponse* response) { return this->blockReceivedAndDeleted(context, request, response); }));}
    void SetMessageAllocatorFor_blockReceivedAndDeleted(
        ::grpc::MessageAllocator< ::DatanodeNamenode::BlockReceivedAndDeletedRequest, ::DatanodeNamenode::BlockReceivedAndDeletedResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::DatanodeNamenode::BlockReceivedAndDeletedRequest, ::DatanodeNamenode::BlockReceivedAndDeletedResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_blockReceivedAndDeleted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status blockReceivedAndDeleted(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest* /*request*/, ::DatanodeNamenode::BlockReceivedAndDeletedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* blockReceivedAndDeleted(
      ::grpc::CallbackServerContext* /*context*/, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest* /*request*/, ::DatanodeNamenode::BlockReceivedAndDeletedResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_errorReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_errorReport() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::DatanodeNamenode::ErrorReportRequest, ::DatanodeNamenode::ErrorReportResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::DatanodeNamenode::ErrorReportRequest* request, ::DatanodeNamenode::ErrorReportResponse* response) { return this->errorReport(context, request, response); }));}
    void SetMessageAllocatorFor_errorReport(
        ::grpc::MessageAllocator< ::DatanodeNamenode::ErrorReportRequest, ::DatanodeNamenode::ErrorReportResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::DatanodeNamenode::ErrorReportRequest, ::DatanodeNamenode::ErrorReportResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_errorReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status errorReport(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::ErrorReportRequest* /*request*/, ::DatanodeNamenode::ErrorReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* errorReport(
      ::grpc::CallbackServerContext* /*context*/, const ::DatanodeNamenode::ErrorReportRequest* /*request*/, ::DatanodeNamenode::ErrorReportResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_reportBadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_reportBadBlock() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::DatanodeNamenode::ReportBadBlockRequest, ::DatanodeNamenode::ReportBadBlockResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::DatanodeNamenode::ReportBadBlockRequest* request, ::DatanodeNamenode::ReportBadBlockResponse* response) { return this->reportBadBlock(context, request, response); }));}
    void SetMessageAllocatorFor_reportBadBlock(
        ::grpc::MessageAllocator< ::DatanodeNamenode::ReportBadBlockRequest, ::DatanodeNamenode::ReportBadBlockResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::DatanodeNamenode::ReportBadBlockRequest, ::DatanodeNamenode::ReportBadBlockResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_reportBadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reportBadBlock(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::ReportBadBlockRequest* /*request*/, ::DatanodeNamenode::ReportBadBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* reportBadBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::DatanodeNamenode::ReportBadBlockRequest* /*request*/, ::DatanodeNamenode::ReportBadBlockResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_registerDatanode<WithCallbackMethod_sendHeartBeat<WithCallbackMethod_blockReport<WithCallbackMethod_cacheReport<WithCallbackMethod_blockReceivedAndDeleted<WithCallbackMethod_errorReport<WithCallbackMethod_reportBadBlock<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_registerDatanode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_registerDatanode() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_registerDatanode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerDatanode(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::RegisterDatanodeRequest* /*request*/, ::DatanodeNamenode::RegisterDatanodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendHeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendHeartBeat() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_sendHeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendHeartBeat(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::HeartBeatRequest* /*request*/, ::DatanodeNamenode::HeartBeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_blockReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_blockReport() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_blockReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status blockReport(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::blockReportRequest* /*request*/, ::DatanodeNamenode::blockReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_cacheReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_cacheReport() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_cacheReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cacheReport(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::cacheReportRequest* /*request*/, ::DatanodeNamenode::cacheReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_blockReceivedAndDeleted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_blockReceivedAndDeleted() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_blockReceivedAndDeleted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status blockReceivedAndDeleted(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest* /*request*/, ::DatanodeNamenode::BlockReceivedAndDeletedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_errorReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_errorReport() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_errorReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status errorReport(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::ErrorReportRequest* /*request*/, ::DatanodeNamenode::ErrorReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_reportBadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_reportBadBlock() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_reportBadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reportBadBlock(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::ReportBadBlockRequest* /*request*/, ::DatanodeNamenode::ReportBadBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_registerDatanode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_registerDatanode() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_registerDatanode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerDatanode(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::RegisterDatanodeRequest* /*request*/, ::DatanodeNamenode::RegisterDatanodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterDatanode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendHeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendHeartBeat() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_sendHeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendHeartBeat(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::HeartBeatRequest* /*request*/, ::DatanodeNamenode::HeartBeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendHeartBeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_blockReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_blockReport() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_blockReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status blockReport(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::blockReportRequest* /*request*/, ::DatanodeNamenode::blockReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestblockReport(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_cacheReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_cacheReport() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_cacheReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cacheReport(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::cacheReportRequest* /*request*/, ::DatanodeNamenode::cacheReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcacheReport(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_blockReceivedAndDeleted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_blockReceivedAndDeleted() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_blockReceivedAndDeleted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status blockReceivedAndDeleted(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest* /*request*/, ::DatanodeNamenode::BlockReceivedAndDeletedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestblockReceivedAndDeleted(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_errorReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_errorReport() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_errorReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status errorReport(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::ErrorReportRequest* /*request*/, ::DatanodeNamenode::ErrorReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesterrorReport(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_reportBadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_reportBadBlock() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_reportBadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reportBadBlock(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::ReportBadBlockRequest* /*request*/, ::DatanodeNamenode::ReportBadBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreportBadBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_registerDatanode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_registerDatanode() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->registerDatanode(context, request, response); }));
    }
    ~WithRawCallbackMethod_registerDatanode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerDatanode(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::RegisterDatanodeRequest* /*request*/, ::DatanodeNamenode::RegisterDatanodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* registerDatanode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendHeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendHeartBeat() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sendHeartBeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_sendHeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendHeartBeat(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::HeartBeatRequest* /*request*/, ::DatanodeNamenode::HeartBeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendHeartBeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_blockReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_blockReport() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->blockReport(context, request, response); }));
    }
    ~WithRawCallbackMethod_blockReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status blockReport(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::blockReportRequest* /*request*/, ::DatanodeNamenode::blockReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* blockReport(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_cacheReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_cacheReport() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->cacheReport(context, request, response); }));
    }
    ~WithRawCallbackMethod_cacheReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cacheReport(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::cacheReportRequest* /*request*/, ::DatanodeNamenode::cacheReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* cacheReport(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_blockReceivedAndDeleted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_blockReceivedAndDeleted() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->blockReceivedAndDeleted(context, request, response); }));
    }
    ~WithRawCallbackMethod_blockReceivedAndDeleted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status blockReceivedAndDeleted(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest* /*request*/, ::DatanodeNamenode::BlockReceivedAndDeletedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* blockReceivedAndDeleted(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_errorReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_errorReport() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->errorReport(context, request, response); }));
    }
    ~WithRawCallbackMethod_errorReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status errorReport(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::ErrorReportRequest* /*request*/, ::DatanodeNamenode::ErrorReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* errorReport(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_reportBadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_reportBadBlock() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->reportBadBlock(context, request, response); }));
    }
    ~WithRawCallbackMethod_reportBadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reportBadBlock(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::ReportBadBlockRequest* /*request*/, ::DatanodeNamenode::ReportBadBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* reportBadBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_registerDatanode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_registerDatanode() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DatanodeNamenode::RegisterDatanodeRequest, ::DatanodeNamenode::RegisterDatanodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::DatanodeNamenode::RegisterDatanodeRequest, ::DatanodeNamenode::RegisterDatanodeResponse>* streamer) {
                       return this->StreamedregisterDatanode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_registerDatanode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status registerDatanode(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::RegisterDatanodeRequest* /*request*/, ::DatanodeNamenode::RegisterDatanodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedregisterDatanode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DatanodeNamenode::RegisterDatanodeRequest,::DatanodeNamenode::RegisterDatanodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendHeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sendHeartBeat() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DatanodeNamenode::HeartBeatRequest, ::DatanodeNamenode::HeartBeatResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::DatanodeNamenode::HeartBeatRequest, ::DatanodeNamenode::HeartBeatResponse>* streamer) {
                       return this->StreamedsendHeartBeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sendHeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendHeartBeat(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::HeartBeatRequest* /*request*/, ::DatanodeNamenode::HeartBeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendHeartBeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DatanodeNamenode::HeartBeatRequest,::DatanodeNamenode::HeartBeatResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_blockReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_blockReport() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DatanodeNamenode::blockReportRequest, ::DatanodeNamenode::blockReportResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::DatanodeNamenode::blockReportRequest, ::DatanodeNamenode::blockReportResponse>* streamer) {
                       return this->StreamedblockReport(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_blockReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status blockReport(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::blockReportRequest* /*request*/, ::DatanodeNamenode::blockReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedblockReport(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DatanodeNamenode::blockReportRequest,::DatanodeNamenode::blockReportResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_cacheReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_cacheReport() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DatanodeNamenode::cacheReportRequest, ::DatanodeNamenode::cacheReportResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::DatanodeNamenode::cacheReportRequest, ::DatanodeNamenode::cacheReportResponse>* streamer) {
                       return this->StreamedcacheReport(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_cacheReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status cacheReport(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::cacheReportRequest* /*request*/, ::DatanodeNamenode::cacheReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcacheReport(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DatanodeNamenode::cacheReportRequest,::DatanodeNamenode::cacheReportResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_blockReceivedAndDeleted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_blockReceivedAndDeleted() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DatanodeNamenode::BlockReceivedAndDeletedRequest, ::DatanodeNamenode::BlockReceivedAndDeletedResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::DatanodeNamenode::BlockReceivedAndDeletedRequest, ::DatanodeNamenode::BlockReceivedAndDeletedResponse>* streamer) {
                       return this->StreamedblockReceivedAndDeleted(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_blockReceivedAndDeleted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status blockReceivedAndDeleted(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest* /*request*/, ::DatanodeNamenode::BlockReceivedAndDeletedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedblockReceivedAndDeleted(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DatanodeNamenode::BlockReceivedAndDeletedRequest,::DatanodeNamenode::BlockReceivedAndDeletedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_errorReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_errorReport() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DatanodeNamenode::ErrorReportRequest, ::DatanodeNamenode::ErrorReportResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::DatanodeNamenode::ErrorReportRequest, ::DatanodeNamenode::ErrorReportResponse>* streamer) {
                       return this->StreamederrorReport(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_errorReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status errorReport(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::ErrorReportRequest* /*request*/, ::DatanodeNamenode::ErrorReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamederrorReport(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DatanodeNamenode::ErrorReportRequest,::DatanodeNamenode::ErrorReportResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_reportBadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_reportBadBlock() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DatanodeNamenode::ReportBadBlockRequest, ::DatanodeNamenode::ReportBadBlockResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::DatanodeNamenode::ReportBadBlockRequest, ::DatanodeNamenode::ReportBadBlockResponse>* streamer) {
                       return this->StreamedreportBadBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_reportBadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status reportBadBlock(::grpc::ServerContext* /*context*/, const ::DatanodeNamenode::ReportBadBlockRequest* /*request*/, ::DatanodeNamenode::ReportBadBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedreportBadBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DatanodeNamenode::ReportBadBlockRequest,::DatanodeNamenode::ReportBadBlockResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_registerDatanode<WithStreamedUnaryMethod_sendHeartBeat<WithStreamedUnaryMethod_blockReport<WithStreamedUnaryMethod_cacheReport<WithStreamedUnaryMethod_blockReceivedAndDeleted<WithStreamedUnaryMethod_errorReport<WithStreamedUnaryMethod_reportBadBlock<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_registerDatanode<WithStreamedUnaryMethod_sendHeartBeat<WithStreamedUnaryMethod_blockReport<WithStreamedUnaryMethod_cacheReport<WithStreamedUnaryMethod_blockReceivedAndDeleted<WithStreamedUnaryMethod_errorReport<WithStreamedUnaryMethod_reportBadBlock<Service > > > > > > > StreamedService;
};

}  // namespace DatanodeNamenode


#endif  // GRPC_DatanodeNamenode_2eproto__INCLUDED
