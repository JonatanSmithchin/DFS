// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Datanode.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Datanode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Datanode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dfs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Datanode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Datanode_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Datanode_2eproto;
namespace Datanode {
class copyBlockRequest;
struct copyBlockRequestDefaultTypeInternal;
extern copyBlockRequestDefaultTypeInternal _copyBlockRequest_default_instance_;
class copyBlockResponse;
struct copyBlockResponseDefaultTypeInternal;
extern copyBlockResponseDefaultTypeInternal _copyBlockResponse_default_instance_;
}  // namespace Datanode
PROTOBUF_NAMESPACE_OPEN
template<> ::Datanode::copyBlockRequest* Arena::CreateMaybeMessage<::Datanode::copyBlockRequest>(Arena*);
template<> ::Datanode::copyBlockResponse* Arena::CreateMaybeMessage<::Datanode::copyBlockResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Datanode {

enum copyStatus : int {
  Unknown = 0,
  OK = 1,
  Failed = 2,
  copyStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  copyStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool copyStatus_IsValid(int value);
constexpr copyStatus copyStatus_MIN = Unknown;
constexpr copyStatus copyStatus_MAX = Failed;
constexpr int copyStatus_ARRAYSIZE = copyStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* copyStatus_descriptor();
template<typename T>
inline const std::string& copyStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, copyStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function copyStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    copyStatus_descriptor(), enum_t_value);
}
inline bool copyStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, copyStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<copyStatus>(
    copyStatus_descriptor(), name, value);
}
// ===================================================================

class copyBlockRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Datanode.copyBlockRequest) */ {
 public:
  inline copyBlockRequest() : copyBlockRequest(nullptr) {}
  ~copyBlockRequest() override;
  explicit PROTOBUF_CONSTEXPR copyBlockRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  copyBlockRequest(const copyBlockRequest& from);
  copyBlockRequest(copyBlockRequest&& from) noexcept
    : copyBlockRequest() {
    *this = ::std::move(from);
  }

  inline copyBlockRequest& operator=(const copyBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline copyBlockRequest& operator=(copyBlockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const copyBlockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const copyBlockRequest* internal_default_instance() {
    return reinterpret_cast<const copyBlockRequest*>(
               &_copyBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(copyBlockRequest& a, copyBlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(copyBlockRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(copyBlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  copyBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<copyBlockRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const copyBlockRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const copyBlockRequest& from) {
    copyBlockRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(copyBlockRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Datanode.copyBlockRequest";
  }
  protected:
  explicit copyBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kBlockIdFieldNumber = 1,
    kSizeFieldNumber = 2,
    kCheckSumFieldNumber = 4,
  };
  // bytes Content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // uint64 blockId = 1;
  void clear_blockid();
  uint64_t blockid() const;
  void set_blockid(uint64_t value);
  private:
  uint64_t _internal_blockid() const;
  void _internal_set_blockid(uint64_t value);
  public:

  // uint64 size = 2;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // uint32 checkSum = 4;
  void clear_checksum();
  uint32_t checksum() const;
  void set_checksum(uint32_t value);
  private:
  uint32_t _internal_checksum() const;
  void _internal_set_checksum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Datanode.copyBlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    uint64_t blockid_;
    uint64_t size_;
    uint32_t checksum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Datanode_2eproto;
};
// -------------------------------------------------------------------

class copyBlockResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Datanode.copyBlockResponse) */ {
 public:
  inline copyBlockResponse() : copyBlockResponse(nullptr) {}
  ~copyBlockResponse() override;
  explicit PROTOBUF_CONSTEXPR copyBlockResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  copyBlockResponse(const copyBlockResponse& from);
  copyBlockResponse(copyBlockResponse&& from) noexcept
    : copyBlockResponse() {
    *this = ::std::move(from);
  }

  inline copyBlockResponse& operator=(const copyBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline copyBlockResponse& operator=(copyBlockResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const copyBlockResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const copyBlockResponse* internal_default_instance() {
    return reinterpret_cast<const copyBlockResponse*>(
               &_copyBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(copyBlockResponse& a, copyBlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(copyBlockResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(copyBlockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  copyBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<copyBlockResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const copyBlockResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const copyBlockResponse& from) {
    copyBlockResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(copyBlockResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Datanode.copyBlockResponse";
  }
  protected:
  explicit copyBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .Datanode.copyStatus status = 1;
  void clear_status();
  ::Datanode::copyStatus status() const;
  void set_status(::Datanode::copyStatus value);
  private:
  ::Datanode::copyStatus _internal_status() const;
  void _internal_set_status(::Datanode::copyStatus value);
  public:

  // @@protoc_insertion_point(class_scope:Datanode.copyBlockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Datanode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// copyBlockRequest

// uint64 blockId = 1;
inline void copyBlockRequest::clear_blockid() {
  _impl_.blockid_ = uint64_t{0u};
}
inline uint64_t copyBlockRequest::_internal_blockid() const {
  return _impl_.blockid_;
}
inline uint64_t copyBlockRequest::blockid() const {
  // @@protoc_insertion_point(field_get:Datanode.copyBlockRequest.blockId)
  return _internal_blockid();
}
inline void copyBlockRequest::_internal_set_blockid(uint64_t value) {
  
  _impl_.blockid_ = value;
}
inline void copyBlockRequest::set_blockid(uint64_t value) {
  _internal_set_blockid(value);
  // @@protoc_insertion_point(field_set:Datanode.copyBlockRequest.blockId)
}

// uint64 size = 2;
inline void copyBlockRequest::clear_size() {
  _impl_.size_ = uint64_t{0u};
}
inline uint64_t copyBlockRequest::_internal_size() const {
  return _impl_.size_;
}
inline uint64_t copyBlockRequest::size() const {
  // @@protoc_insertion_point(field_get:Datanode.copyBlockRequest.size)
  return _internal_size();
}
inline void copyBlockRequest::_internal_set_size(uint64_t value) {
  
  _impl_.size_ = value;
}
inline void copyBlockRequest::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Datanode.copyBlockRequest.size)
}

// bytes Content = 3;
inline void copyBlockRequest::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& copyBlockRequest::content() const {
  // @@protoc_insertion_point(field_get:Datanode.copyBlockRequest.Content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void copyBlockRequest::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Datanode.copyBlockRequest.Content)
}
inline std::string* copyBlockRequest::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:Datanode.copyBlockRequest.Content)
  return _s;
}
inline const std::string& copyBlockRequest::_internal_content() const {
  return _impl_.content_.Get();
}
inline void copyBlockRequest::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* copyBlockRequest::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* copyBlockRequest::release_content() {
  // @@protoc_insertion_point(field_release:Datanode.copyBlockRequest.Content)
  return _impl_.content_.Release();
}
inline void copyBlockRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Datanode.copyBlockRequest.Content)
}

// uint32 checkSum = 4;
inline void copyBlockRequest::clear_checksum() {
  _impl_.checksum_ = 0u;
}
inline uint32_t copyBlockRequest::_internal_checksum() const {
  return _impl_.checksum_;
}
inline uint32_t copyBlockRequest::checksum() const {
  // @@protoc_insertion_point(field_get:Datanode.copyBlockRequest.checkSum)
  return _internal_checksum();
}
inline void copyBlockRequest::_internal_set_checksum(uint32_t value) {
  
  _impl_.checksum_ = value;
}
inline void copyBlockRequest::set_checksum(uint32_t value) {
  _internal_set_checksum(value);
  // @@protoc_insertion_point(field_set:Datanode.copyBlockRequest.checkSum)
}

// -------------------------------------------------------------------

// copyBlockResponse

// .Datanode.copyStatus status = 1;
inline void copyBlockResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::Datanode::copyStatus copyBlockResponse::_internal_status() const {
  return static_cast< ::Datanode::copyStatus >(_impl_.status_);
}
inline ::Datanode::copyStatus copyBlockResponse::status() const {
  // @@protoc_insertion_point(field_get:Datanode.copyBlockResponse.status)
  return _internal_status();
}
inline void copyBlockResponse::_internal_set_status(::Datanode::copyStatus value) {
  
  _impl_.status_ = value;
}
inline void copyBlockResponse::set_status(::Datanode::copyStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Datanode.copyBlockResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Datanode

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Datanode::copyStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Datanode::copyStatus>() {
  return ::Datanode::copyStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Datanode_2eproto
