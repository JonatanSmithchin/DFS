// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ClientDatanode.proto
#ifndef GRPC_ClientDatanode_2eproto__INCLUDED
#define GRPC_ClientDatanode_2eproto__INCLUDED

#include "ClientDatanode.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ClientDatanode {

class FileService final {
 public:
  static constexpr char const* service_full_name() {
    return "ClientDatanode.FileService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< ::ClientDatanode::transferBlockRequest>> transferBlock(::grpc::ClientContext* context, ::ClientDatanode::transferBlockResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::ClientDatanode::transferBlockRequest>>(transferBlockRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ClientDatanode::transferBlockRequest>> AsynctransferBlock(::grpc::ClientContext* context, ::ClientDatanode::transferBlockResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ClientDatanode::transferBlockRequest>>(AsynctransferBlockRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ClientDatanode::transferBlockRequest>> PrepareAsynctransferBlock(::grpc::ClientContext* context, ::ClientDatanode::transferBlockResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ClientDatanode::transferBlockRequest>>(PrepareAsynctransferBlockRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ClientDatanode::downloadBlockResponse>> downloadBlock(::grpc::ClientContext* context, const ::ClientDatanode::downloadBlockRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ClientDatanode::downloadBlockResponse>>(downloadBlockRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ClientDatanode::downloadBlockResponse>> AsyncdownloadBlock(::grpc::ClientContext* context, const ::ClientDatanode::downloadBlockRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ClientDatanode::downloadBlockResponse>>(AsyncdownloadBlockRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ClientDatanode::downloadBlockResponse>> PrepareAsyncdownloadBlock(::grpc::ClientContext* context, const ::ClientDatanode::downloadBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ClientDatanode::downloadBlockResponse>>(PrepareAsyncdownloadBlockRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void transferBlock(::grpc::ClientContext* context, ::ClientDatanode::transferBlockResponse* response, ::grpc::ClientWriteReactor< ::ClientDatanode::transferBlockRequest>* reactor) = 0;
      virtual void downloadBlock(::grpc::ClientContext* context, const ::ClientDatanode::downloadBlockRequest* request, ::grpc::ClientReadReactor< ::ClientDatanode::downloadBlockResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::ClientDatanode::transferBlockRequest>* transferBlockRaw(::grpc::ClientContext* context, ::ClientDatanode::transferBlockResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::ClientDatanode::transferBlockRequest>* AsynctransferBlockRaw(::grpc::ClientContext* context, ::ClientDatanode::transferBlockResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::ClientDatanode::transferBlockRequest>* PrepareAsynctransferBlockRaw(::grpc::ClientContext* context, ::ClientDatanode::transferBlockResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::ClientDatanode::downloadBlockResponse>* downloadBlockRaw(::grpc::ClientContext* context, const ::ClientDatanode::downloadBlockRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ClientDatanode::downloadBlockResponse>* AsyncdownloadBlockRaw(::grpc::ClientContext* context, const ::ClientDatanode::downloadBlockRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ClientDatanode::downloadBlockResponse>* PrepareAsyncdownloadBlockRaw(::grpc::ClientContext* context, const ::ClientDatanode::downloadBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::ClientDatanode::transferBlockRequest>> transferBlock(::grpc::ClientContext* context, ::ClientDatanode::transferBlockResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::ClientDatanode::transferBlockRequest>>(transferBlockRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::ClientDatanode::transferBlockRequest>> AsynctransferBlock(::grpc::ClientContext* context, ::ClientDatanode::transferBlockResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::ClientDatanode::transferBlockRequest>>(AsynctransferBlockRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::ClientDatanode::transferBlockRequest>> PrepareAsynctransferBlock(::grpc::ClientContext* context, ::ClientDatanode::transferBlockResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::ClientDatanode::transferBlockRequest>>(PrepareAsynctransferBlockRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::ClientDatanode::downloadBlockResponse>> downloadBlock(::grpc::ClientContext* context, const ::ClientDatanode::downloadBlockRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ClientDatanode::downloadBlockResponse>>(downloadBlockRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ClientDatanode::downloadBlockResponse>> AsyncdownloadBlock(::grpc::ClientContext* context, const ::ClientDatanode::downloadBlockRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ClientDatanode::downloadBlockResponse>>(AsyncdownloadBlockRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ClientDatanode::downloadBlockResponse>> PrepareAsyncdownloadBlock(::grpc::ClientContext* context, const ::ClientDatanode::downloadBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ClientDatanode::downloadBlockResponse>>(PrepareAsyncdownloadBlockRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void transferBlock(::grpc::ClientContext* context, ::ClientDatanode::transferBlockResponse* response, ::grpc::ClientWriteReactor< ::ClientDatanode::transferBlockRequest>* reactor) override;
      void downloadBlock(::grpc::ClientContext* context, const ::ClientDatanode::downloadBlockRequest* request, ::grpc::ClientReadReactor< ::ClientDatanode::downloadBlockResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::ClientDatanode::transferBlockRequest>* transferBlockRaw(::grpc::ClientContext* context, ::ClientDatanode::transferBlockResponse* response) override;
    ::grpc::ClientAsyncWriter< ::ClientDatanode::transferBlockRequest>* AsynctransferBlockRaw(::grpc::ClientContext* context, ::ClientDatanode::transferBlockResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::ClientDatanode::transferBlockRequest>* PrepareAsynctransferBlockRaw(::grpc::ClientContext* context, ::ClientDatanode::transferBlockResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::ClientDatanode::downloadBlockResponse>* downloadBlockRaw(::grpc::ClientContext* context, const ::ClientDatanode::downloadBlockRequest& request) override;
    ::grpc::ClientAsyncReader< ::ClientDatanode::downloadBlockResponse>* AsyncdownloadBlockRaw(::grpc::ClientContext* context, const ::ClientDatanode::downloadBlockRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ClientDatanode::downloadBlockResponse>* PrepareAsyncdownloadBlockRaw(::grpc::ClientContext* context, const ::ClientDatanode::downloadBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_transferBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_downloadBlock_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status transferBlock(::grpc::ServerContext* context, ::grpc::ServerReader< ::ClientDatanode::transferBlockRequest>* reader, ::ClientDatanode::transferBlockResponse* response);
    virtual ::grpc::Status downloadBlock(::grpc::ServerContext* context, const ::ClientDatanode::downloadBlockRequest* request, ::grpc::ServerWriter< ::ClientDatanode::downloadBlockResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_transferBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_transferBlock() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_transferBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transferBlock(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ClientDatanode::transferBlockRequest>* /*reader*/, ::ClientDatanode::transferBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesttransferBlock(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::ClientDatanode::transferBlockResponse, ::ClientDatanode::transferBlockRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_downloadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_downloadBlock() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_downloadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadBlock(::grpc::ServerContext* /*context*/, const ::ClientDatanode::downloadBlockRequest* /*request*/, ::grpc::ServerWriter< ::ClientDatanode::downloadBlockResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdownloadBlock(::grpc::ServerContext* context, ::ClientDatanode::downloadBlockRequest* request, ::grpc::ServerAsyncWriter< ::ClientDatanode::downloadBlockResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_transferBlock<WithAsyncMethod_downloadBlock<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_transferBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_transferBlock() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::ClientDatanode::transferBlockRequest, ::ClientDatanode::transferBlockResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::ClientDatanode::transferBlockResponse* response) { return this->transferBlock(context, response); }));
    }
    ~WithCallbackMethod_transferBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transferBlock(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ClientDatanode::transferBlockRequest>* /*reader*/, ::ClientDatanode::transferBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::ClientDatanode::transferBlockRequest>* transferBlock(
      ::grpc::CallbackServerContext* /*context*/, ::ClientDatanode::transferBlockResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_downloadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_downloadBlock() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::ClientDatanode::downloadBlockRequest, ::ClientDatanode::downloadBlockResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ClientDatanode::downloadBlockRequest* request) { return this->downloadBlock(context, request); }));
    }
    ~WithCallbackMethod_downloadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadBlock(::grpc::ServerContext* /*context*/, const ::ClientDatanode::downloadBlockRequest* /*request*/, ::grpc::ServerWriter< ::ClientDatanode::downloadBlockResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::ClientDatanode::downloadBlockResponse>* downloadBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::ClientDatanode::downloadBlockRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_transferBlock<WithCallbackMethod_downloadBlock<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_transferBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_transferBlock() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_transferBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transferBlock(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ClientDatanode::transferBlockRequest>* /*reader*/, ::ClientDatanode::transferBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_downloadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_downloadBlock() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_downloadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadBlock(::grpc::ServerContext* /*context*/, const ::ClientDatanode::downloadBlockRequest* /*request*/, ::grpc::ServerWriter< ::ClientDatanode::downloadBlockResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_transferBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_transferBlock() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_transferBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transferBlock(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ClientDatanode::transferBlockRequest>* /*reader*/, ::ClientDatanode::transferBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesttransferBlock(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_downloadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_downloadBlock() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_downloadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadBlock(::grpc::ServerContext* /*context*/, const ::ClientDatanode::downloadBlockRequest* /*request*/, ::grpc::ServerWriter< ::ClientDatanode::downloadBlockResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdownloadBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_transferBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_transferBlock() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->transferBlock(context, response); }));
    }
    ~WithRawCallbackMethod_transferBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transferBlock(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ClientDatanode::transferBlockRequest>* /*reader*/, ::ClientDatanode::transferBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* transferBlock(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_downloadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_downloadBlock() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->downloadBlock(context, request); }));
    }
    ~WithRawCallbackMethod_downloadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadBlock(::grpc::ServerContext* /*context*/, const ::ClientDatanode::downloadBlockRequest* /*request*/, ::grpc::ServerWriter< ::ClientDatanode::downloadBlockResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* downloadBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_downloadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_downloadBlock() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::ClientDatanode::downloadBlockRequest, ::ClientDatanode::downloadBlockResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::ClientDatanode::downloadBlockRequest, ::ClientDatanode::downloadBlockResponse>* streamer) {
                       return this->StreameddownloadBlock(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_downloadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status downloadBlock(::grpc::ServerContext* /*context*/, const ::ClientDatanode::downloadBlockRequest* /*request*/, ::grpc::ServerWriter< ::ClientDatanode::downloadBlockResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreameddownloadBlock(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::ClientDatanode::downloadBlockRequest,::ClientDatanode::downloadBlockResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_downloadBlock<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_downloadBlock<Service > StreamedService;
};

}  // namespace ClientDatanode


#endif  // GRPC_ClientDatanode_2eproto__INCLUDED
