// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dfs.proto

#include "proto/dfs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR DatanodeID::DatanodeID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ipaddr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.datanodeuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xferport_)*/0u
  , /*decltype(_impl_.infoport_)*/0u
  , /*decltype(_impl_.ipcport_)*/0u
  , /*decltype(_impl_.infosecureport_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DatanodeIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatanodeIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatanodeIDDefaultTypeInternal() {}
  union {
    DatanodeID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatanodeIDDefaultTypeInternal _DatanodeID_default_instance_;
PROTOBUF_CONSTEXPR DatanodeInfo::DatanodeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.capacity_)*/uint64_t{0u}
  , /*decltype(_impl_.used_)*/uint64_t{0u}
  , /*decltype(_impl_.remaining_)*/uint64_t{0u}
  , /*decltype(_impl_.lastupdate_)*/uint64_t{0u}
  , /*decltype(_impl_.xceivercount_)*/0u
  , /*decltype(_impl_.adminstate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DatanodeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatanodeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatanodeInfoDefaultTypeInternal() {}
  union {
    DatanodeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatanodeInfoDefaultTypeInternal _DatanodeInfo_default_instance_;
PROTOBUF_CONSTEXPR Permission::Permission(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.psermission_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PermissionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PermissionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PermissionDefaultTypeInternal() {}
  union {
    Permission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PermissionDefaultTypeInternal _Permission_default_instance_;
PROTOBUF_CONSTEXPR FileStatus::FileStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.owner_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.permission_)*/nullptr
  , /*decltype(_impl_.length_)*/uint64_t{0u}
  , /*decltype(_impl_.modification_time_)*/uint64_t{0u}
  , /*decltype(_impl_.access_time_)*/uint64_t{0u}
  , /*decltype(_impl_.filetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileStatusDefaultTypeInternal() {}
  union {
    FileStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileStatusDefaultTypeInternal _FileStatus_default_instance_;
PROTOBUF_CONSTEXPR ServerDefaults::ServerDefaults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blocksize_)*/uint64_t{0u}
  , /*decltype(_impl_.bytesperchecksum_)*/0u
  , /*decltype(_impl_.writepacketsize_)*/0u
  , /*decltype(_impl_.replication_)*/0u
  , /*decltype(_impl_.filebuffersize_)*/0u
  , /*decltype(_impl_.checksumtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerDefaultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerDefaultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerDefaultsDefaultTypeInternal() {}
  union {
    ServerDefaults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerDefaultsDefaultTypeInternal _ServerDefaults_default_instance_;
PROTOBUF_CONSTEXPR DirectoryListing::DirectoryListing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partiallisting_)*/{}
  , /*decltype(_impl_.remainingentries_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DirectoryListingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DirectoryListingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DirectoryListingDefaultTypeInternal() {}
  union {
    DirectoryListing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DirectoryListingDefaultTypeInternal _DirectoryListing_default_instance_;
PROTOBUF_CONSTEXPR Block::Block(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blockid_)*/uint64_t{0u}
  , /*decltype(_impl_.generationstamp_)*/uint64_t{0u}
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDefaultTypeInternal _Block_default_instance_;
PROTOBUF_CONSTEXPR BlockWithLocation::BlockWithLocation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datanodeuuids_)*/{}
  , /*decltype(_impl_.block_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockWithLocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockWithLocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockWithLocationDefaultTypeInternal() {}
  union {
    BlockWithLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockWithLocationDefaultTypeInternal _BlockWithLocation_default_instance_;
PROTOBUF_CONSTEXPR LocatedBlock::LocatedBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.locs_)*/{}
  , /*decltype(_impl_.block_)*/nullptr
  , /*decltype(_impl_.offset_)*/uint64_t{0u}
  , /*decltype(_impl_.corrupt_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocatedBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocatedBlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocatedBlockDefaultTypeInternal() {}
  union {
    LocatedBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocatedBlockDefaultTypeInternal _LocatedBlock_default_instance_;
PROTOBUF_CONSTEXPR LocatedBlocks::LocatedBlocks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blocks_)*/{}
  , /*decltype(_impl_.last_)*/nullptr
  , /*decltype(_impl_.filelength_)*/uint64_t{0u}
  , /*decltype(_impl_.islastblockcomplete_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocatedBlocksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocatedBlocksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocatedBlocksDefaultTypeInternal() {}
  union {
    LocatedBlocks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocatedBlocksDefaultTypeInternal _LocatedBlocks_default_instance_;
PROTOBUF_CONSTEXPR BlocksWithLocation::BlocksWithLocation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blocks_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlocksWithLocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlocksWithLocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlocksWithLocationDefaultTypeInternal() {}
  union {
    BlocksWithLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlocksWithLocationDefaultTypeInternal _BlocksWithLocation_default_instance_;
PROTOBUF_CONSTEXPR BlockKey::BlockKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keybytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.expirydate_)*/uint64_t{0u}
  , /*decltype(_impl_.keyid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockKeyDefaultTypeInternal() {}
  union {
    BlockKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockKeyDefaultTypeInternal _BlockKey_default_instance_;
static ::_pb::Metadata file_level_metadata_dfs_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dfs_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dfs_2eproto = nullptr;

const uint32_t TableStruct_dfs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DatanodeID, _impl_.ipaddr_),
  PROTOBUF_FIELD_OFFSET(::DatanodeID, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::DatanodeID, _impl_.datanodeuuid_),
  PROTOBUF_FIELD_OFFSET(::DatanodeID, _impl_.xferport_),
  PROTOBUF_FIELD_OFFSET(::DatanodeID, _impl_.infoport_),
  PROTOBUF_FIELD_OFFSET(::DatanodeID, _impl_.ipcport_),
  PROTOBUF_FIELD_OFFSET(::DatanodeID, _impl_.infosecureport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DatanodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DatanodeInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::DatanodeInfo, _impl_.capacity_),
  PROTOBUF_FIELD_OFFSET(::DatanodeInfo, _impl_.used_),
  PROTOBUF_FIELD_OFFSET(::DatanodeInfo, _impl_.remaining_),
  PROTOBUF_FIELD_OFFSET(::DatanodeInfo, _impl_.lastupdate_),
  PROTOBUF_FIELD_OFFSET(::DatanodeInfo, _impl_.xceivercount_),
  PROTOBUF_FIELD_OFFSET(::DatanodeInfo, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::DatanodeInfo, _impl_.adminstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Permission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Permission, _impl_.psermission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FileStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FileStatus, _impl_.filetype_),
  PROTOBUF_FIELD_OFFSET(::FileStatus, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::FileStatus, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::FileStatus, _impl_.permission_),
  PROTOBUF_FIELD_OFFSET(::FileStatus, _impl_.owner_),
  PROTOBUF_FIELD_OFFSET(::FileStatus, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::FileStatus, _impl_.modification_time_),
  PROTOBUF_FIELD_OFFSET(::FileStatus, _impl_.access_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerDefaults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServerDefaults, _impl_.blocksize_),
  PROTOBUF_FIELD_OFFSET(::ServerDefaults, _impl_.bytesperchecksum_),
  PROTOBUF_FIELD_OFFSET(::ServerDefaults, _impl_.writepacketsize_),
  PROTOBUF_FIELD_OFFSET(::ServerDefaults, _impl_.replication_),
  PROTOBUF_FIELD_OFFSET(::ServerDefaults, _impl_.filebuffersize_),
  PROTOBUF_FIELD_OFFSET(::ServerDefaults, _impl_.checksumtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DirectoryListing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DirectoryListing, _impl_.partiallisting_),
  PROTOBUF_FIELD_OFFSET(::DirectoryListing, _impl_.remainingentries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Block, _impl_.blockid_),
  PROTOBUF_FIELD_OFFSET(::Block, _impl_.generationstamp_),
  PROTOBUF_FIELD_OFFSET(::Block, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BlockWithLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BlockWithLocation, _impl_.block_),
  PROTOBUF_FIELD_OFFSET(::BlockWithLocation, _impl_.datanodeuuids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LocatedBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LocatedBlock, _impl_.block_),
  PROTOBUF_FIELD_OFFSET(::LocatedBlock, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::LocatedBlock, _impl_.locs_),
  PROTOBUF_FIELD_OFFSET(::LocatedBlock, _impl_.corrupt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LocatedBlocks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LocatedBlocks, _impl_.filelength_),
  PROTOBUF_FIELD_OFFSET(::LocatedBlocks, _impl_.blocks_),
  PROTOBUF_FIELD_OFFSET(::LocatedBlocks, _impl_.last_),
  PROTOBUF_FIELD_OFFSET(::LocatedBlocks, _impl_.islastblockcomplete_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BlocksWithLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BlocksWithLocation, _impl_.blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BlockKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BlockKey, _impl_.keyid_),
  PROTOBUF_FIELD_OFFSET(::BlockKey, _impl_.expirydate_),
  PROTOBUF_FIELD_OFFSET(::BlockKey, _impl_.keybytes_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DatanodeID)},
  { 13, -1, -1, sizeof(::DatanodeInfo)},
  { 27, -1, -1, sizeof(::Permission)},
  { 34, -1, -1, sizeof(::FileStatus)},
  { 48, -1, -1, sizeof(::ServerDefaults)},
  { 60, -1, -1, sizeof(::DirectoryListing)},
  { 68, -1, -1, sizeof(::Block)},
  { 77, -1, -1, sizeof(::BlockWithLocation)},
  { 85, -1, -1, sizeof(::LocatedBlock)},
  { 95, -1, -1, sizeof(::LocatedBlocks)},
  { 105, -1, -1, sizeof(::BlocksWithLocation)},
  { 112, -1, -1, sizeof(::BlockKey)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_DatanodeID_default_instance_._instance,
  &::_DatanodeInfo_default_instance_._instance,
  &::_Permission_default_instance_._instance,
  &::_FileStatus_default_instance_._instance,
  &::_ServerDefaults_default_instance_._instance,
  &::_DirectoryListing_default_instance_._instance,
  &::_Block_default_instance_._instance,
  &::_BlockWithLocation_default_instance_._instance,
  &::_LocatedBlock_default_instance_._instance,
  &::_LocatedBlocks_default_instance_._instance,
  &::_BlocksWithLocation_default_instance_._instance,
  &::_BlockKey_default_instance_._instance,
};

const char descriptor_table_protodef_dfs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tdfs.proto\"\221\001\n\nDatanodeID\022\016\n\006ipAddr\030\001 \001"
  "(\t\022\020\n\010hostName\030\002 \001(\t\022\024\n\014datanodeUuid\030\003 \001"
  "(\t\022\020\n\010xferPort\030\004 \001(\r\022\020\n\010infoPort\030\005 \001(\r\022\017"
  "\n\007ipcPort\030\006 \001(\r\022\026\n\016infoSecurePort\030\007 \001(\r\""
  "\217\002\n\014DatanodeInfo\022\027\n\002id\030\001 \001(\0132\013.DatanodeI"
  "D\022\020\n\010capacity\030\002 \001(\004\022\014\n\004used\030\003 \001(\004\022\021\n\trem"
  "aining\030\004 \001(\004\022\022\n\nlastUpdate\030\005 \001(\004\022\024\n\014xcei"
  "verCount\030\006 \001(\r\022\020\n\010location\030\010 \001(\t\022,\n\nadmi"
  "nState\030\t \001(\0162\030.DatanodeInfo.AdminState\"I"
  "\n\nAdminState\022\n\n\006NORMAL\020\000\022\033\n\027DECOMMISSION"
  "_INPROGRESS\020\001\022\022\n\016DECOMMISSIONED\020\002\"!\n\nPer"
  "mission\022\023\n\013psermission\030\001 \001(\r\"\366\001\n\nFileSta"
  "tus\022&\n\010fileType\030\001 \001(\0162\024.FileStatus.FileT"
  "ype\022\014\n\004path\030\002 \001(\t\022\016\n\006length\030\003 \001(\004\022\037\n\nper"
  "mission\030\004 \001(\0132\013.Permission\022\r\n\005owner\030\005 \001("
  "\t\022\r\n\005group\030\006 \001(\t\022\031\n\021modification_time\030\007 "
  "\001(\004\022\023\n\013access_time\030\010 \001(\004\"3\n\010FileType\022\n\n\006"
  "IS_DIR\020\000\022\013\n\007IS_FILE\020\001\022\016\n\nIS_SYMLINK\020\002\"\250\001"
  "\n\016ServerDefaults\022\021\n\tblockSize\030\001 \001(\004\022\030\n\020b"
  "ytesPerChecksum\030\002 \001(\r\022\027\n\017writePacketSize"
  "\030\003 \001(\r\022\023\n\013replication\030\004 \001(\r\022\026\n\016fileBuffe"
  "rSize\030\005 \001(\r\022#\n\014checksumType\030\006 \001(\0162\r.Chec"
  "ksumType\"Q\n\020DirectoryListing\022#\n\016partialL"
  "isting\030\001 \003(\0132\013.FileStatus\022\030\n\020remainingEn"
  "tries\030\002 \001(\r\"\?\n\005Block\022\017\n\007blockId\030\001 \001(\004\022\027\n"
  "\017generationStamp\030\002 \001(\004\022\014\n\004size\030\003 \001(\004\"A\n\021"
  "BlockWithLocation\022\025\n\005block\030\001 \001(\0132\006.Block"
  "\022\025\n\rdatanodeUuids\030\002 \003(\t\"c\n\014LocatedBlock\022"
  "\025\n\005block\030\001 \001(\0132\006.Block\022\016\n\006offset\030\002 \001(\004\022\033"
  "\n\004locs\030\003 \003(\0132\r.DatanodeInfo\022\017\n\007corrupt\030\004"
  " \001(\010\"|\n\rLocatedBlocks\022\022\n\nfileLength\030\001 \001("
  "\004\022\035\n\006blocks\030\002 \003(\0132\r.LocatedBlock\022\033\n\004last"
  "\030\003 \001(\0132\r.LocatedBlock\022\033\n\023isLastBlockcomp"
  "lete\030\005 \001(\010\",\n\022BlocksWithLocation\022\026\n\006bloc"
  "ks\030\001 \003(\0132\006.Block\"\?\n\010BlockKey\022\r\n\005keyId\030\001 "
  "\001(\r\022\022\n\nexpiryDate\030\002 \001(\004\022\020\n\010keyBytes\030\003 \001("
  "\014*J\n\014ChecksumType\022\022\n\016CHECKSUM_CRC32\020\000\022\021\n"
  "\rCHECKSUM_NULL\020\001\022\023\n\017CHECKSUM_CRC32C\020\002b\006p"
  "roto3"
  ;
static ::_pbi::once_flag descriptor_table_dfs_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dfs_2eproto = {
    false, false, 1525, descriptor_table_protodef_dfs_2eproto,
    "dfs.proto",
    &descriptor_table_dfs_2eproto_once, nullptr, 0, 12,
    schemas, file_default_instances, TableStruct_dfs_2eproto::offsets,
    file_level_metadata_dfs_2eproto, file_level_enum_descriptors_dfs_2eproto,
    file_level_service_descriptors_dfs_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dfs_2eproto_getter() {
  return &descriptor_table_dfs_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dfs_2eproto(&descriptor_table_dfs_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DatanodeInfo_AdminState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dfs_2eproto);
  return file_level_enum_descriptors_dfs_2eproto[0];
}
bool DatanodeInfo_AdminState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DatanodeInfo_AdminState DatanodeInfo::NORMAL;
constexpr DatanodeInfo_AdminState DatanodeInfo::DECOMMISSION_INPROGRESS;
constexpr DatanodeInfo_AdminState DatanodeInfo::DECOMMISSIONED;
constexpr DatanodeInfo_AdminState DatanodeInfo::AdminState_MIN;
constexpr DatanodeInfo_AdminState DatanodeInfo::AdminState_MAX;
constexpr int DatanodeInfo::AdminState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileStatus_FileType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dfs_2eproto);
  return file_level_enum_descriptors_dfs_2eproto[1];
}
bool FileStatus_FileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FileStatus_FileType FileStatus::IS_DIR;
constexpr FileStatus_FileType FileStatus::IS_FILE;
constexpr FileStatus_FileType FileStatus::IS_SYMLINK;
constexpr FileStatus_FileType FileStatus::FileType_MIN;
constexpr FileStatus_FileType FileStatus::FileType_MAX;
constexpr int FileStatus::FileType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChecksumType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dfs_2eproto);
  return file_level_enum_descriptors_dfs_2eproto[2];
}
bool ChecksumType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DatanodeID::_Internal {
 public:
};

DatanodeID::DatanodeID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DatanodeID)
}
DatanodeID::DatanodeID(const DatanodeID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DatanodeID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ipaddr_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.datanodeuuid_){}
    , decltype(_impl_.xferport_){}
    , decltype(_impl_.infoport_){}
    , decltype(_impl_.ipcport_){}
    , decltype(_impl_.infosecureport_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ipaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ipaddr().empty()) {
    _this->_impl_.ipaddr_.Set(from._internal_ipaddr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.datanodeuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.datanodeuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_datanodeuuid().empty()) {
    _this->_impl_.datanodeuuid_.Set(from._internal_datanodeuuid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.xferport_, &from._impl_.xferport_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.infosecureport_) -
    reinterpret_cast<char*>(&_impl_.xferport_)) + sizeof(_impl_.infosecureport_));
  // @@protoc_insertion_point(copy_constructor:DatanodeID)
}

inline void DatanodeID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ipaddr_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.datanodeuuid_){}
    , decltype(_impl_.xferport_){0u}
    , decltype(_impl_.infoport_){0u}
    , decltype(_impl_.ipcport_){0u}
    , decltype(_impl_.infosecureport_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ipaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.datanodeuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.datanodeuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DatanodeID::~DatanodeID() {
  // @@protoc_insertion_point(destructor:DatanodeID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatanodeID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ipaddr_.Destroy();
  _impl_.hostname_.Destroy();
  _impl_.datanodeuuid_.Destroy();
}

void DatanodeID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DatanodeID::Clear() {
// @@protoc_insertion_point(message_clear_start:DatanodeID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ipaddr_.ClearToEmpty();
  _impl_.hostname_.ClearToEmpty();
  _impl_.datanodeuuid_.ClearToEmpty();
  ::memset(&_impl_.xferport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.infosecureport_) -
      reinterpret_cast<char*>(&_impl_.xferport_)) + sizeof(_impl_.infosecureport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatanodeID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ipAddr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ipaddr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DatanodeID.ipAddr"));
        } else
          goto handle_unusual;
        continue;
      // string hostName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DatanodeID.hostName"));
        } else
          goto handle_unusual;
        continue;
      // string datanodeUuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_datanodeuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DatanodeID.datanodeUuid"));
        } else
          goto handle_unusual;
        continue;
      // uint32 xferPort = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.xferport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 infoPort = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.infoport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ipcPort = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.ipcport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 infoSecurePort = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.infosecureport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatanodeID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DatanodeID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ipAddr = 1;
  if (!this->_internal_ipaddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipaddr().data(), static_cast<int>(this->_internal_ipaddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DatanodeID.ipAddr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ipaddr(), target);
  }

  // string hostName = 2;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DatanodeID.hostName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hostname(), target);
  }

  // string datanodeUuid = 3;
  if (!this->_internal_datanodeuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_datanodeuuid().data(), static_cast<int>(this->_internal_datanodeuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DatanodeID.datanodeUuid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_datanodeuuid(), target);
  }

  // uint32 xferPort = 4;
  if (this->_internal_xferport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_xferport(), target);
  }

  // uint32 infoPort = 5;
  if (this->_internal_infoport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_infoport(), target);
  }

  // uint32 ipcPort = 6;
  if (this->_internal_ipcport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ipcport(), target);
  }

  // uint32 infoSecurePort = 7;
  if (this->_internal_infosecureport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_infosecureport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DatanodeID)
  return target;
}

size_t DatanodeID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DatanodeID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ipAddr = 1;
  if (!this->_internal_ipaddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipaddr());
  }

  // string hostName = 2;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string datanodeUuid = 3;
  if (!this->_internal_datanodeuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datanodeuuid());
  }

  // uint32 xferPort = 4;
  if (this->_internal_xferport() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_xferport());
  }

  // uint32 infoPort = 5;
  if (this->_internal_infoport() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_infoport());
  }

  // uint32 ipcPort = 6;
  if (this->_internal_ipcport() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ipcport());
  }

  // uint32 infoSecurePort = 7;
  if (this->_internal_infosecureport() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_infosecureport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatanodeID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DatanodeID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatanodeID::GetClassData() const { return &_class_data_; }


void DatanodeID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DatanodeID*>(&to_msg);
  auto& from = static_cast<const DatanodeID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DatanodeID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ipaddr().empty()) {
    _this->_internal_set_ipaddr(from._internal_ipaddr());
  }
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (!from._internal_datanodeuuid().empty()) {
    _this->_internal_set_datanodeuuid(from._internal_datanodeuuid());
  }
  if (from._internal_xferport() != 0) {
    _this->_internal_set_xferport(from._internal_xferport());
  }
  if (from._internal_infoport() != 0) {
    _this->_internal_set_infoport(from._internal_infoport());
  }
  if (from._internal_ipcport() != 0) {
    _this->_internal_set_ipcport(from._internal_ipcport());
  }
  if (from._internal_infosecureport() != 0) {
    _this->_internal_set_infosecureport(from._internal_infosecureport());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatanodeID::CopyFrom(const DatanodeID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DatanodeID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatanodeID::IsInitialized() const {
  return true;
}

void DatanodeID::InternalSwap(DatanodeID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ipaddr_, lhs_arena,
      &other->_impl_.ipaddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.datanodeuuid_, lhs_arena,
      &other->_impl_.datanodeuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatanodeID, _impl_.infosecureport_)
      + sizeof(DatanodeID::_impl_.infosecureport_)
      - PROTOBUF_FIELD_OFFSET(DatanodeID, _impl_.xferport_)>(
          reinterpret_cast<char*>(&_impl_.xferport_),
          reinterpret_cast<char*>(&other->_impl_.xferport_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DatanodeID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dfs_2eproto_getter, &descriptor_table_dfs_2eproto_once,
      file_level_metadata_dfs_2eproto[0]);
}

// ===================================================================

class DatanodeInfo::_Internal {
 public:
  static const ::DatanodeID& id(const DatanodeInfo* msg);
};

const ::DatanodeID&
DatanodeInfo::_Internal::id(const DatanodeInfo* msg) {
  return *msg->_impl_.id_;
}
DatanodeInfo::DatanodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DatanodeInfo)
}
DatanodeInfo::DatanodeInfo(const DatanodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DatanodeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.capacity_){}
    , decltype(_impl_.used_){}
    , decltype(_impl_.remaining_){}
    , decltype(_impl_.lastupdate_){}
    , decltype(_impl_.xceivercount_){}
    , decltype(_impl_.adminstate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    _this->_impl_.location_.Set(from._internal_location(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::DatanodeID(*from._impl_.id_);
  }
  ::memcpy(&_impl_.capacity_, &from._impl_.capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.adminstate_) -
    reinterpret_cast<char*>(&_impl_.capacity_)) + sizeof(_impl_.adminstate_));
  // @@protoc_insertion_point(copy_constructor:DatanodeInfo)
}

inline void DatanodeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.capacity_){uint64_t{0u}}
    , decltype(_impl_.used_){uint64_t{0u}}
    , decltype(_impl_.remaining_){uint64_t{0u}}
    , decltype(_impl_.lastupdate_){uint64_t{0u}}
    , decltype(_impl_.xceivercount_){0u}
    , decltype(_impl_.adminstate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DatanodeInfo::~DatanodeInfo() {
  // @@protoc_insertion_point(destructor:DatanodeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatanodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.location_.Destroy();
  if (this != internal_default_instance()) delete _impl_.id_;
}

void DatanodeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DatanodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DatanodeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.location_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
  ::memset(&_impl_.capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.adminstate_) -
      reinterpret_cast<char*>(&_impl_.capacity_)) + sizeof(_impl_.adminstate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatanodeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DatanodeID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 used = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 remaining = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 lastUpdate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.lastupdate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 xceiverCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.xceivercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string location = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DatanodeInfo.location"));
        } else
          goto handle_unusual;
        continue;
      // .DatanodeInfo.AdminState adminState = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_adminstate(static_cast<::DatanodeInfo_AdminState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatanodeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DatanodeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DatanodeID id = 1;
  if (this->_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // uint64 capacity = 2;
  if (this->_internal_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_capacity(), target);
  }

  // uint64 used = 3;
  if (this->_internal_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_used(), target);
  }

  // uint64 remaining = 4;
  if (this->_internal_remaining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_remaining(), target);
  }

  // uint64 lastUpdate = 5;
  if (this->_internal_lastupdate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_lastupdate(), target);
  }

  // uint32 xceiverCount = 6;
  if (this->_internal_xceivercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_xceivercount(), target);
  }

  // string location = 8;
  if (!this->_internal_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DatanodeInfo.location");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_location(), target);
  }

  // .DatanodeInfo.AdminState adminState = 9;
  if (this->_internal_adminstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_adminstate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DatanodeInfo)
  return target;
}

size_t DatanodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DatanodeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string location = 8;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // .DatanodeID id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_);
  }

  // uint64 capacity = 2;
  if (this->_internal_capacity() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_capacity());
  }

  // uint64 used = 3;
  if (this->_internal_used() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_used());
  }

  // uint64 remaining = 4;
  if (this->_internal_remaining() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_remaining());
  }

  // uint64 lastUpdate = 5;
  if (this->_internal_lastupdate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lastupdate());
  }

  // uint32 xceiverCount = 6;
  if (this->_internal_xceivercount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_xceivercount());
  }

  // .DatanodeInfo.AdminState adminState = 9;
  if (this->_internal_adminstate() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_adminstate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatanodeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DatanodeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatanodeInfo::GetClassData() const { return &_class_data_; }


void DatanodeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DatanodeInfo*>(&to_msg);
  auto& from = static_cast<const DatanodeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DatanodeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_location().empty()) {
    _this->_internal_set_location(from._internal_location());
  }
  if (from._internal_has_id()) {
    _this->_internal_mutable_id()->::DatanodeID::MergeFrom(
        from._internal_id());
  }
  if (from._internal_capacity() != 0) {
    _this->_internal_set_capacity(from._internal_capacity());
  }
  if (from._internal_used() != 0) {
    _this->_internal_set_used(from._internal_used());
  }
  if (from._internal_remaining() != 0) {
    _this->_internal_set_remaining(from._internal_remaining());
  }
  if (from._internal_lastupdate() != 0) {
    _this->_internal_set_lastupdate(from._internal_lastupdate());
  }
  if (from._internal_xceivercount() != 0) {
    _this->_internal_set_xceivercount(from._internal_xceivercount());
  }
  if (from._internal_adminstate() != 0) {
    _this->_internal_set_adminstate(from._internal_adminstate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatanodeInfo::CopyFrom(const DatanodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DatanodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatanodeInfo::IsInitialized() const {
  return true;
}

void DatanodeInfo::InternalSwap(DatanodeInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.location_, lhs_arena,
      &other->_impl_.location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatanodeInfo, _impl_.adminstate_)
      + sizeof(DatanodeInfo::_impl_.adminstate_)
      - PROTOBUF_FIELD_OFFSET(DatanodeInfo, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DatanodeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dfs_2eproto_getter, &descriptor_table_dfs_2eproto_once,
      file_level_metadata_dfs_2eproto[1]);
}

// ===================================================================

class Permission::_Internal {
 public:
};

Permission::Permission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Permission)
}
Permission::Permission(const Permission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Permission* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.psermission_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.psermission_ = from._impl_.psermission_;
  // @@protoc_insertion_point(copy_constructor:Permission)
}

inline void Permission::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.psermission_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Permission::~Permission() {
  // @@protoc_insertion_point(destructor:Permission)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Permission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Permission::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Permission::Clear() {
// @@protoc_insertion_point(message_clear_start:Permission)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.psermission_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Permission::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 psermission = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.psermission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Permission::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Permission)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 psermission = 1;
  if (this->_internal_psermission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_psermission(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Permission)
  return target;
}

size_t Permission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Permission)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 psermission = 1;
  if (this->_internal_psermission() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_psermission());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Permission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Permission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Permission::GetClassData() const { return &_class_data_; }


void Permission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Permission*>(&to_msg);
  auto& from = static_cast<const Permission&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Permission)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_psermission() != 0) {
    _this->_internal_set_psermission(from._internal_psermission());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Permission::CopyFrom(const Permission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Permission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Permission::IsInitialized() const {
  return true;
}

void Permission::InternalSwap(Permission* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.psermission_, other->_impl_.psermission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Permission::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dfs_2eproto_getter, &descriptor_table_dfs_2eproto_once,
      file_level_metadata_dfs_2eproto[2]);
}

// ===================================================================

class FileStatus::_Internal {
 public:
  static const ::Permission& permission(const FileStatus* msg);
};

const ::Permission&
FileStatus::_Internal::permission(const FileStatus* msg) {
  return *msg->_impl_.permission_;
}
FileStatus::FileStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:FileStatus)
}
FileStatus::FileStatus(const FileStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.owner_){}
    , decltype(_impl_.group_){}
    , decltype(_impl_.permission_){nullptr}
    , decltype(_impl_.length_){}
    , decltype(_impl_.modification_time_){}
    , decltype(_impl_.access_time_){}
    , decltype(_impl_.filetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner().empty()) {
    _this->_impl_.owner_.Set(from._internal_owner(), 
      _this->GetArenaForAllocation());
  }
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group().empty()) {
    _this->_impl_.group_.Set(from._internal_group(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_permission()) {
    _this->_impl_.permission_ = new ::Permission(*from._impl_.permission_);
  }
  ::memcpy(&_impl_.length_, &from._impl_.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.filetype_) -
    reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.filetype_));
  // @@protoc_insertion_point(copy_constructor:FileStatus)
}

inline void FileStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.owner_){}
    , decltype(_impl_.group_){}
    , decltype(_impl_.permission_){nullptr}
    , decltype(_impl_.length_){uint64_t{0u}}
    , decltype(_impl_.modification_time_){uint64_t{0u}}
    , decltype(_impl_.access_time_){uint64_t{0u}}
    , decltype(_impl_.filetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileStatus::~FileStatus() {
  // @@protoc_insertion_point(destructor:FileStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  _impl_.owner_.Destroy();
  _impl_.group_.Destroy();
  if (this != internal_default_instance()) delete _impl_.permission_;
}

void FileStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:FileStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  _impl_.owner_.ClearToEmpty();
  _impl_.group_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.permission_ != nullptr) {
    delete _impl_.permission_;
  }
  _impl_.permission_ = nullptr;
  ::memset(&_impl_.length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.filetype_) -
      reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.filetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .FileStatus.FileType fileType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_filetype(static_cast<::FileStatus_FileType>(val));
        } else
          goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FileStatus.path"));
        } else
          goto handle_unusual;
        continue;
      // uint64 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Permission permission = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string owner = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FileStatus.owner"));
        } else
          goto handle_unusual;
        continue;
      // string group = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FileStatus.group"));
        } else
          goto handle_unusual;
        continue;
      // uint64 modification_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.modification_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 access_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.access_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .FileStatus.FileType fileType = 1;
  if (this->_internal_filetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_filetype(), target);
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FileStatus.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // uint64 length = 3;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_length(), target);
  }

  // .Permission permission = 4;
  if (this->_internal_has_permission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::permission(this),
        _Internal::permission(this).GetCachedSize(), target, stream);
  }

  // string owner = 5;
  if (!this->_internal_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FileStatus.owner");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_owner(), target);
  }

  // string group = 6;
  if (!this->_internal_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group().data(), static_cast<int>(this->_internal_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FileStatus.group");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_group(), target);
  }

  // uint64 modification_time = 7;
  if (this->_internal_modification_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_modification_time(), target);
  }

  // uint64 access_time = 8;
  if (this->_internal_access_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_access_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileStatus)
  return target;
}

size_t FileStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string owner = 5;
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string group = 6;
  if (!this->_internal_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group());
  }

  // .Permission permission = 4;
  if (this->_internal_has_permission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.permission_);
  }

  // uint64 length = 3;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_length());
  }

  // uint64 modification_time = 7;
  if (this->_internal_modification_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_modification_time());
  }

  // uint64 access_time = 8;
  if (this->_internal_access_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_access_time());
  }

  // .FileStatus.FileType fileType = 1;
  if (this->_internal_filetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_filetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileStatus::GetClassData() const { return &_class_data_; }


void FileStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileStatus*>(&to_msg);
  auto& from = static_cast<const FileStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:FileStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_owner().empty()) {
    _this->_internal_set_owner(from._internal_owner());
  }
  if (!from._internal_group().empty()) {
    _this->_internal_set_group(from._internal_group());
  }
  if (from._internal_has_permission()) {
    _this->_internal_mutable_permission()->::Permission::MergeFrom(
        from._internal_permission());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  if (from._internal_modification_time() != 0) {
    _this->_internal_set_modification_time(from._internal_modification_time());
  }
  if (from._internal_access_time() != 0) {
    _this->_internal_set_access_time(from._internal_access_time());
  }
  if (from._internal_filetype() != 0) {
    _this->_internal_set_filetype(from._internal_filetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileStatus::CopyFrom(const FileStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileStatus::IsInitialized() const {
  return true;
}

void FileStatus::InternalSwap(FileStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.owner_, lhs_arena,
      &other->_impl_.owner_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_, lhs_arena,
      &other->_impl_.group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileStatus, _impl_.filetype_)
      + sizeof(FileStatus::_impl_.filetype_)
      - PROTOBUF_FIELD_OFFSET(FileStatus, _impl_.permission_)>(
          reinterpret_cast<char*>(&_impl_.permission_),
          reinterpret_cast<char*>(&other->_impl_.permission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dfs_2eproto_getter, &descriptor_table_dfs_2eproto_once,
      file_level_metadata_dfs_2eproto[3]);
}

// ===================================================================

class ServerDefaults::_Internal {
 public:
};

ServerDefaults::ServerDefaults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServerDefaults)
}
ServerDefaults::ServerDefaults(const ServerDefaults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerDefaults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blocksize_){}
    , decltype(_impl_.bytesperchecksum_){}
    , decltype(_impl_.writepacketsize_){}
    , decltype(_impl_.replication_){}
    , decltype(_impl_.filebuffersize_){}
    , decltype(_impl_.checksumtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.blocksize_, &from._impl_.blocksize_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.checksumtype_) -
    reinterpret_cast<char*>(&_impl_.blocksize_)) + sizeof(_impl_.checksumtype_));
  // @@protoc_insertion_point(copy_constructor:ServerDefaults)
}

inline void ServerDefaults::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blocksize_){uint64_t{0u}}
    , decltype(_impl_.bytesperchecksum_){0u}
    , decltype(_impl_.writepacketsize_){0u}
    , decltype(_impl_.replication_){0u}
    , decltype(_impl_.filebuffersize_){0u}
    , decltype(_impl_.checksumtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerDefaults::~ServerDefaults() {
  // @@protoc_insertion_point(destructor:ServerDefaults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerDefaults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerDefaults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerDefaults::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerDefaults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.blocksize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.checksumtype_) -
      reinterpret_cast<char*>(&_impl_.blocksize_)) + sizeof(_impl_.checksumtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerDefaults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 blockSize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.blocksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bytesPerChecksum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bytesperchecksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 writePacketSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.writepacketsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 replication = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.replication_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fileBufferSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.filebuffersize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ChecksumType checksumType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_checksumtype(static_cast<::ChecksumType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerDefaults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerDefaults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 blockSize = 1;
  if (this->_internal_blocksize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_blocksize(), target);
  }

  // uint32 bytesPerChecksum = 2;
  if (this->_internal_bytesperchecksum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bytesperchecksum(), target);
  }

  // uint32 writePacketSize = 3;
  if (this->_internal_writepacketsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_writepacketsize(), target);
  }

  // uint32 replication = 4;
  if (this->_internal_replication() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_replication(), target);
  }

  // uint32 fileBufferSize = 5;
  if (this->_internal_filebuffersize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_filebuffersize(), target);
  }

  // .ChecksumType checksumType = 6;
  if (this->_internal_checksumtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_checksumtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerDefaults)
  return target;
}

size_t ServerDefaults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerDefaults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 blockSize = 1;
  if (this->_internal_blocksize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_blocksize());
  }

  // uint32 bytesPerChecksum = 2;
  if (this->_internal_bytesperchecksum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bytesperchecksum());
  }

  // uint32 writePacketSize = 3;
  if (this->_internal_writepacketsize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_writepacketsize());
  }

  // uint32 replication = 4;
  if (this->_internal_replication() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_replication());
  }

  // uint32 fileBufferSize = 5;
  if (this->_internal_filebuffersize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_filebuffersize());
  }

  // .ChecksumType checksumType = 6;
  if (this->_internal_checksumtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_checksumtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerDefaults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerDefaults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerDefaults::GetClassData() const { return &_class_data_; }


void ServerDefaults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerDefaults*>(&to_msg);
  auto& from = static_cast<const ServerDefaults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerDefaults)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_blocksize() != 0) {
    _this->_internal_set_blocksize(from._internal_blocksize());
  }
  if (from._internal_bytesperchecksum() != 0) {
    _this->_internal_set_bytesperchecksum(from._internal_bytesperchecksum());
  }
  if (from._internal_writepacketsize() != 0) {
    _this->_internal_set_writepacketsize(from._internal_writepacketsize());
  }
  if (from._internal_replication() != 0) {
    _this->_internal_set_replication(from._internal_replication());
  }
  if (from._internal_filebuffersize() != 0) {
    _this->_internal_set_filebuffersize(from._internal_filebuffersize());
  }
  if (from._internal_checksumtype() != 0) {
    _this->_internal_set_checksumtype(from._internal_checksumtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerDefaults::CopyFrom(const ServerDefaults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerDefaults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerDefaults::IsInitialized() const {
  return true;
}

void ServerDefaults::InternalSwap(ServerDefaults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerDefaults, _impl_.checksumtype_)
      + sizeof(ServerDefaults::_impl_.checksumtype_)
      - PROTOBUF_FIELD_OFFSET(ServerDefaults, _impl_.blocksize_)>(
          reinterpret_cast<char*>(&_impl_.blocksize_),
          reinterpret_cast<char*>(&other->_impl_.blocksize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerDefaults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dfs_2eproto_getter, &descriptor_table_dfs_2eproto_once,
      file_level_metadata_dfs_2eproto[4]);
}

// ===================================================================

class DirectoryListing::_Internal {
 public:
};

DirectoryListing::DirectoryListing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DirectoryListing)
}
DirectoryListing::DirectoryListing(const DirectoryListing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DirectoryListing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partiallisting_){from._impl_.partiallisting_}
    , decltype(_impl_.remainingentries_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.remainingentries_ = from._impl_.remainingentries_;
  // @@protoc_insertion_point(copy_constructor:DirectoryListing)
}

inline void DirectoryListing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partiallisting_){arena}
    , decltype(_impl_.remainingentries_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DirectoryListing::~DirectoryListing() {
  // @@protoc_insertion_point(destructor:DirectoryListing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DirectoryListing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partiallisting_.~RepeatedPtrField();
}

void DirectoryListing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DirectoryListing::Clear() {
// @@protoc_insertion_point(message_clear_start:DirectoryListing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partiallisting_.Clear();
  _impl_.remainingentries_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectoryListing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .FileStatus partialListing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partiallisting(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 remainingEntries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.remainingentries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DirectoryListing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DirectoryListing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .FileStatus partialListing = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_partiallisting_size()); i < n; i++) {
    const auto& repfield = this->_internal_partiallisting(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 remainingEntries = 2;
  if (this->_internal_remainingentries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_remainingentries(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DirectoryListing)
  return target;
}

size_t DirectoryListing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DirectoryListing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FileStatus partialListing = 1;
  total_size += 1UL * this->_internal_partiallisting_size();
  for (const auto& msg : this->_impl_.partiallisting_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 remainingEntries = 2;
  if (this->_internal_remainingentries() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remainingentries());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DirectoryListing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DirectoryListing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DirectoryListing::GetClassData() const { return &_class_data_; }


void DirectoryListing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DirectoryListing*>(&to_msg);
  auto& from = static_cast<const DirectoryListing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DirectoryListing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partiallisting_.MergeFrom(from._impl_.partiallisting_);
  if (from._internal_remainingentries() != 0) {
    _this->_internal_set_remainingentries(from._internal_remainingentries());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DirectoryListing::CopyFrom(const DirectoryListing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DirectoryListing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryListing::IsInitialized() const {
  return true;
}

void DirectoryListing::InternalSwap(DirectoryListing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partiallisting_.InternalSwap(&other->_impl_.partiallisting_);
  swap(_impl_.remainingentries_, other->_impl_.remainingentries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectoryListing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dfs_2eproto_getter, &descriptor_table_dfs_2eproto_once,
      file_level_metadata_dfs_2eproto[5]);
}

// ===================================================================

class Block::_Internal {
 public:
};

Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Block* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blockid_){}
    , decltype(_impl_.generationstamp_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.blockid_, &from._impl_.blockid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.blockid_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:Block)
}

inline void Block::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blockid_){uint64_t{0u}}
    , decltype(_impl_.generationstamp_){uint64_t{0u}}
    , decltype(_impl_.size_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:Block)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Block::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:Block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.blockid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.blockid_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 blockId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.blockid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 generationStamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.generationstamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 blockId = 1;
  if (this->_internal_blockid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_blockid(), target);
  }

  // uint64 generationStamp = 2;
  if (this->_internal_generationstamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_generationstamp(), target);
  }

  // uint64 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 blockId = 1;
  if (this->_internal_blockid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_blockid());
  }

  // uint64 generationStamp = 2;
  if (this->_internal_generationstamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_generationstamp());
  }

  // uint64 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block::GetClassData() const { return &_class_data_; }


void Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Block*>(&to_msg);
  auto& from = static_cast<const Block&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Block)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_blockid() != 0) {
    _this->_internal_set_blockid(from._internal_blockid());
  }
  if (from._internal_generationstamp() != 0) {
    _this->_internal_set_generationstamp(from._internal_generationstamp());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, _impl_.size_)
      + sizeof(Block::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(Block, _impl_.blockid_)>(
          reinterpret_cast<char*>(&_impl_.blockid_),
          reinterpret_cast<char*>(&other->_impl_.blockid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dfs_2eproto_getter, &descriptor_table_dfs_2eproto_once,
      file_level_metadata_dfs_2eproto[6]);
}

// ===================================================================

class BlockWithLocation::_Internal {
 public:
  static const ::Block& block(const BlockWithLocation* msg);
};

const ::Block&
BlockWithLocation::_Internal::block(const BlockWithLocation* msg) {
  return *msg->_impl_.block_;
}
BlockWithLocation::BlockWithLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:BlockWithLocation)
}
BlockWithLocation::BlockWithLocation(const BlockWithLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockWithLocation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datanodeuuids_){from._impl_.datanodeuuids_}
    , decltype(_impl_.block_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    _this->_impl_.block_ = new ::Block(*from._impl_.block_);
  }
  // @@protoc_insertion_point(copy_constructor:BlockWithLocation)
}

inline void BlockWithLocation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datanodeuuids_){arena}
    , decltype(_impl_.block_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlockWithLocation::~BlockWithLocation() {
  // @@protoc_insertion_point(destructor:BlockWithLocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockWithLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datanodeuuids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.block_;
}

void BlockWithLocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockWithLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:BlockWithLocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datanodeuuids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.block_ != nullptr) {
    delete _impl_.block_;
  }
  _impl_.block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockWithLocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string datanodeUuids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_datanodeuuids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "BlockWithLocation.datanodeUuids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockWithLocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BlockWithLocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Block block = 1;
  if (this->_internal_has_block()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::block(this),
        _Internal::block(this).GetCachedSize(), target, stream);
  }

  // repeated string datanodeUuids = 2;
  for (int i = 0, n = this->_internal_datanodeuuids_size(); i < n; i++) {
    const auto& s = this->_internal_datanodeuuids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BlockWithLocation.datanodeUuids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BlockWithLocation)
  return target;
}

size_t BlockWithLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BlockWithLocation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string datanodeUuids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.datanodeuuids_.size());
  for (int i = 0, n = _impl_.datanodeuuids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.datanodeuuids_.Get(i));
  }

  // .Block block = 1;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockWithLocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockWithLocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockWithLocation::GetClassData() const { return &_class_data_; }


void BlockWithLocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockWithLocation*>(&to_msg);
  auto& from = static_cast<const BlockWithLocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BlockWithLocation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datanodeuuids_.MergeFrom(from._impl_.datanodeuuids_);
  if (from._internal_has_block()) {
    _this->_internal_mutable_block()->::Block::MergeFrom(
        from._internal_block());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockWithLocation::CopyFrom(const BlockWithLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BlockWithLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockWithLocation::IsInitialized() const {
  return true;
}

void BlockWithLocation::InternalSwap(BlockWithLocation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datanodeuuids_.InternalSwap(&other->_impl_.datanodeuuids_);
  swap(_impl_.block_, other->_impl_.block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockWithLocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dfs_2eproto_getter, &descriptor_table_dfs_2eproto_once,
      file_level_metadata_dfs_2eproto[7]);
}

// ===================================================================

class LocatedBlock::_Internal {
 public:
  static const ::Block& block(const LocatedBlock* msg);
};

const ::Block&
LocatedBlock::_Internal::block(const LocatedBlock* msg) {
  return *msg->_impl_.block_;
}
LocatedBlock::LocatedBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LocatedBlock)
}
LocatedBlock::LocatedBlock(const LocatedBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocatedBlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.locs_){from._impl_.locs_}
    , decltype(_impl_.block_){nullptr}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.corrupt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    _this->_impl_.block_ = new ::Block(*from._impl_.block_);
  }
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.corrupt_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.corrupt_));
  // @@protoc_insertion_point(copy_constructor:LocatedBlock)
}

inline void LocatedBlock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.locs_){arena}
    , decltype(_impl_.block_){nullptr}
    , decltype(_impl_.offset_){uint64_t{0u}}
    , decltype(_impl_.corrupt_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LocatedBlock::~LocatedBlock() {
  // @@protoc_insertion_point(destructor:LocatedBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocatedBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.locs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.block_;
}

void LocatedBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocatedBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:LocatedBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.locs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.block_ != nullptr) {
    delete _impl_.block_;
  }
  _impl_.block_ = nullptr;
  ::memset(&_impl_.offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.corrupt_) -
      reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.corrupt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocatedBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .DatanodeInfo locs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_locs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool corrupt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.corrupt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocatedBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LocatedBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Block block = 1;
  if (this->_internal_has_block()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::block(this),
        _Internal::block(this).GetCachedSize(), target, stream);
  }

  // uint64 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offset(), target);
  }

  // repeated .DatanodeInfo locs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_locs_size()); i < n; i++) {
    const auto& repfield = this->_internal_locs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool corrupt = 4;
  if (this->_internal_corrupt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_corrupt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LocatedBlock)
  return target;
}

size_t LocatedBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LocatedBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DatanodeInfo locs = 3;
  total_size += 1UL * this->_internal_locs_size();
  for (const auto& msg : this->_impl_.locs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Block block = 1;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_);
  }

  // uint64 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  // bool corrupt = 4;
  if (this->_internal_corrupt() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocatedBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocatedBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocatedBlock::GetClassData() const { return &_class_data_; }


void LocatedBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocatedBlock*>(&to_msg);
  auto& from = static_cast<const LocatedBlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LocatedBlock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.locs_.MergeFrom(from._impl_.locs_);
  if (from._internal_has_block()) {
    _this->_internal_mutable_block()->::Block::MergeFrom(
        from._internal_block());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_corrupt() != 0) {
    _this->_internal_set_corrupt(from._internal_corrupt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocatedBlock::CopyFrom(const LocatedBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LocatedBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocatedBlock::IsInitialized() const {
  return true;
}

void LocatedBlock::InternalSwap(LocatedBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.locs_.InternalSwap(&other->_impl_.locs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocatedBlock, _impl_.corrupt_)
      + sizeof(LocatedBlock::_impl_.corrupt_)
      - PROTOBUF_FIELD_OFFSET(LocatedBlock, _impl_.block_)>(
          reinterpret_cast<char*>(&_impl_.block_),
          reinterpret_cast<char*>(&other->_impl_.block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocatedBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dfs_2eproto_getter, &descriptor_table_dfs_2eproto_once,
      file_level_metadata_dfs_2eproto[8]);
}

// ===================================================================

class LocatedBlocks::_Internal {
 public:
  static const ::LocatedBlock& last(const LocatedBlocks* msg);
};

const ::LocatedBlock&
LocatedBlocks::_Internal::last(const LocatedBlocks* msg) {
  return *msg->_impl_.last_;
}
LocatedBlocks::LocatedBlocks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LocatedBlocks)
}
LocatedBlocks::LocatedBlocks(const LocatedBlocks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocatedBlocks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){from._impl_.blocks_}
    , decltype(_impl_.last_){nullptr}
    , decltype(_impl_.filelength_){}
    , decltype(_impl_.islastblockcomplete_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_last()) {
    _this->_impl_.last_ = new ::LocatedBlock(*from._impl_.last_);
  }
  ::memcpy(&_impl_.filelength_, &from._impl_.filelength_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.islastblockcomplete_) -
    reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.islastblockcomplete_));
  // @@protoc_insertion_point(copy_constructor:LocatedBlocks)
}

inline void LocatedBlocks::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){arena}
    , decltype(_impl_.last_){nullptr}
    , decltype(_impl_.filelength_){uint64_t{0u}}
    , decltype(_impl_.islastblockcomplete_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LocatedBlocks::~LocatedBlocks() {
  // @@protoc_insertion_point(destructor:LocatedBlocks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocatedBlocks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blocks_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.last_;
}

void LocatedBlocks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocatedBlocks::Clear() {
// @@protoc_insertion_point(message_clear_start:LocatedBlocks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blocks_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.last_ != nullptr) {
    delete _impl_.last_;
  }
  _impl_.last_ = nullptr;
  ::memset(&_impl_.filelength_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.islastblockcomplete_) -
      reinterpret_cast<char*>(&_impl_.filelength_)) + sizeof(_impl_.islastblockcomplete_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocatedBlocks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 fileLength = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.filelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .LocatedBlock blocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .LocatedBlock last = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_last(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isLastBlockcomplete = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.islastblockcomplete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocatedBlocks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LocatedBlocks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 fileLength = 1;
  if (this->_internal_filelength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_filelength(), target);
  }

  // repeated .LocatedBlock blocks = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_blocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .LocatedBlock last = 3;
  if (this->_internal_has_last()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::last(this),
        _Internal::last(this).GetCachedSize(), target, stream);
  }

  // bool isLastBlockcomplete = 5;
  if (this->_internal_islastblockcomplete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_islastblockcomplete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LocatedBlocks)
  return target;
}

size_t LocatedBlocks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LocatedBlocks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LocatedBlock blocks = 2;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->_impl_.blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .LocatedBlock last = 3;
  if (this->_internal_has_last()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_);
  }

  // uint64 fileLength = 1;
  if (this->_internal_filelength() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_filelength());
  }

  // bool isLastBlockcomplete = 5;
  if (this->_internal_islastblockcomplete() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocatedBlocks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocatedBlocks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocatedBlocks::GetClassData() const { return &_class_data_; }


void LocatedBlocks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocatedBlocks*>(&to_msg);
  auto& from = static_cast<const LocatedBlocks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LocatedBlocks)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blocks_.MergeFrom(from._impl_.blocks_);
  if (from._internal_has_last()) {
    _this->_internal_mutable_last()->::LocatedBlock::MergeFrom(
        from._internal_last());
  }
  if (from._internal_filelength() != 0) {
    _this->_internal_set_filelength(from._internal_filelength());
  }
  if (from._internal_islastblockcomplete() != 0) {
    _this->_internal_set_islastblockcomplete(from._internal_islastblockcomplete());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocatedBlocks::CopyFrom(const LocatedBlocks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LocatedBlocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocatedBlocks::IsInitialized() const {
  return true;
}

void LocatedBlocks::InternalSwap(LocatedBlocks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blocks_.InternalSwap(&other->_impl_.blocks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocatedBlocks, _impl_.islastblockcomplete_)
      + sizeof(LocatedBlocks::_impl_.islastblockcomplete_)
      - PROTOBUF_FIELD_OFFSET(LocatedBlocks, _impl_.last_)>(
          reinterpret_cast<char*>(&_impl_.last_),
          reinterpret_cast<char*>(&other->_impl_.last_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocatedBlocks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dfs_2eproto_getter, &descriptor_table_dfs_2eproto_once,
      file_level_metadata_dfs_2eproto[9]);
}

// ===================================================================

class BlocksWithLocation::_Internal {
 public:
};

BlocksWithLocation::BlocksWithLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:BlocksWithLocation)
}
BlocksWithLocation::BlocksWithLocation(const BlocksWithLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlocksWithLocation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){from._impl_.blocks_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BlocksWithLocation)
}

inline void BlocksWithLocation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blocks_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlocksWithLocation::~BlocksWithLocation() {
  // @@protoc_insertion_point(destructor:BlocksWithLocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlocksWithLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blocks_.~RepeatedPtrField();
}

void BlocksWithLocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlocksWithLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:BlocksWithLocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blocks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlocksWithLocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Block blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlocksWithLocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BlocksWithLocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Block blocks = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_blocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BlocksWithLocation)
  return target;
}

size_t BlocksWithLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BlocksWithLocation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Block blocks = 1;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->_impl_.blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlocksWithLocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlocksWithLocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlocksWithLocation::GetClassData() const { return &_class_data_; }


void BlocksWithLocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlocksWithLocation*>(&to_msg);
  auto& from = static_cast<const BlocksWithLocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BlocksWithLocation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blocks_.MergeFrom(from._impl_.blocks_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlocksWithLocation::CopyFrom(const BlocksWithLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BlocksWithLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlocksWithLocation::IsInitialized() const {
  return true;
}

void BlocksWithLocation::InternalSwap(BlocksWithLocation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blocks_.InternalSwap(&other->_impl_.blocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlocksWithLocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dfs_2eproto_getter, &descriptor_table_dfs_2eproto_once,
      file_level_metadata_dfs_2eproto[10]);
}

// ===================================================================

class BlockKey::_Internal {
 public:
};

BlockKey::BlockKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:BlockKey)
}
BlockKey::BlockKey(const BlockKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keybytes_){}
    , decltype(_impl_.expirydate_){}
    , decltype(_impl_.keyid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.keybytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keybytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_keybytes().empty()) {
    _this->_impl_.keybytes_.Set(from._internal_keybytes(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.expirydate_, &from._impl_.expirydate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.keyid_) -
    reinterpret_cast<char*>(&_impl_.expirydate_)) + sizeof(_impl_.keyid_));
  // @@protoc_insertion_point(copy_constructor:BlockKey)
}

inline void BlockKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keybytes_){}
    , decltype(_impl_.expirydate_){uint64_t{0u}}
    , decltype(_impl_.keyid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.keybytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keybytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockKey::~BlockKey() {
  // @@protoc_insertion_point(destructor:BlockKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keybytes_.Destroy();
}

void BlockKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockKey::Clear() {
// @@protoc_insertion_point(message_clear_start:BlockKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keybytes_.ClearToEmpty();
  ::memset(&_impl_.expirydate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.keyid_) -
      reinterpret_cast<char*>(&_impl_.expirydate_)) + sizeof(_impl_.keyid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 keyId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.keyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 expiryDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.expirydate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes keyBytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_keybytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BlockKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 keyId = 1;
  if (this->_internal_keyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_keyid(), target);
  }

  // uint64 expiryDate = 2;
  if (this->_internal_expirydate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_expirydate(), target);
  }

  // bytes keyBytes = 3;
  if (!this->_internal_keybytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_keybytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BlockKey)
  return target;
}

size_t BlockKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BlockKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes keyBytes = 3;
  if (!this->_internal_keybytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keybytes());
  }

  // uint64 expiryDate = 2;
  if (this->_internal_expirydate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_expirydate());
  }

  // uint32 keyId = 1;
  if (this->_internal_keyid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keyid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockKey::GetClassData() const { return &_class_data_; }


void BlockKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockKey*>(&to_msg);
  auto& from = static_cast<const BlockKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BlockKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_keybytes().empty()) {
    _this->_internal_set_keybytes(from._internal_keybytes());
  }
  if (from._internal_expirydate() != 0) {
    _this->_internal_set_expirydate(from._internal_expirydate());
  }
  if (from._internal_keyid() != 0) {
    _this->_internal_set_keyid(from._internal_keyid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockKey::CopyFrom(const BlockKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BlockKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockKey::IsInitialized() const {
  return true;
}

void BlockKey::InternalSwap(BlockKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.keybytes_, lhs_arena,
      &other->_impl_.keybytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockKey, _impl_.keyid_)
      + sizeof(BlockKey::_impl_.keyid_)
      - PROTOBUF_FIELD_OFFSET(BlockKey, _impl_.expirydate_)>(
          reinterpret_cast<char*>(&_impl_.expirydate_),
          reinterpret_cast<char*>(&other->_impl_.expirydate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dfs_2eproto_getter, &descriptor_table_dfs_2eproto_once,
      file_level_metadata_dfs_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DatanodeID*
Arena::CreateMaybeMessage< ::DatanodeID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeID >(arena);
}
template<> PROTOBUF_NOINLINE ::DatanodeInfo*
Arena::CreateMaybeMessage< ::DatanodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DatanodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Permission*
Arena::CreateMaybeMessage< ::Permission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Permission >(arena);
}
template<> PROTOBUF_NOINLINE ::FileStatus*
Arena::CreateMaybeMessage< ::FileStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FileStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerDefaults*
Arena::CreateMaybeMessage< ::ServerDefaults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerDefaults >(arena);
}
template<> PROTOBUF_NOINLINE ::DirectoryListing*
Arena::CreateMaybeMessage< ::DirectoryListing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DirectoryListing >(arena);
}
template<> PROTOBUF_NOINLINE ::Block*
Arena::CreateMaybeMessage< ::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::BlockWithLocation*
Arena::CreateMaybeMessage< ::BlockWithLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BlockWithLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::LocatedBlock*
Arena::CreateMaybeMessage< ::LocatedBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LocatedBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::LocatedBlocks*
Arena::CreateMaybeMessage< ::LocatedBlocks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LocatedBlocks >(arena);
}
template<> PROTOBUF_NOINLINE ::BlocksWithLocation*
Arena::CreateMaybeMessage< ::BlocksWithLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BlocksWithLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::BlockKey*
Arena::CreateMaybeMessage< ::BlockKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BlockKey >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
