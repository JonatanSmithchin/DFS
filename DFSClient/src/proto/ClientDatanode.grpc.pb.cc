// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ClientDatanode.proto

#include "proto/ClientDatanode.pb.h"
#include "proto/ClientDatanode.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ClientDatanode {

static const char* FileService_method_names[] = {
  "/ClientDatanode.FileService/transferBlock",
  "/ClientDatanode.FileService/downloadBlock",
};

std::unique_ptr< FileService::Stub> FileService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileService::Stub> stub(new FileService::Stub(channel, options));
  return stub;
}

FileService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_transferBlock_(FileService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_downloadBlock_(FileService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientWriter< ::ClientDatanode::transferBlockRequest>* FileService::Stub::transferBlockRaw(::grpc::ClientContext* context, ::ClientDatanode::transferBlockResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::ClientDatanode::transferBlockRequest>::Create(channel_.get(), rpcmethod_transferBlock_, context, response);
}

void FileService::Stub::async::transferBlock(::grpc::ClientContext* context, ::ClientDatanode::transferBlockResponse* response, ::grpc::ClientWriteReactor< ::ClientDatanode::transferBlockRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::ClientDatanode::transferBlockRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_transferBlock_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::ClientDatanode::transferBlockRequest>* FileService::Stub::AsynctransferBlockRaw(::grpc::ClientContext* context, ::ClientDatanode::transferBlockResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::ClientDatanode::transferBlockRequest>::Create(channel_.get(), cq, rpcmethod_transferBlock_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::ClientDatanode::transferBlockRequest>* FileService::Stub::PrepareAsynctransferBlockRaw(::grpc::ClientContext* context, ::ClientDatanode::transferBlockResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::ClientDatanode::transferBlockRequest>::Create(channel_.get(), cq, rpcmethod_transferBlock_, context, response, false, nullptr);
}

::grpc::ClientReader< ::ClientDatanode::downloadBlockResponse>* FileService::Stub::downloadBlockRaw(::grpc::ClientContext* context, const ::ClientDatanode::downloadBlockRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::ClientDatanode::downloadBlockResponse>::Create(channel_.get(), rpcmethod_downloadBlock_, context, request);
}

void FileService::Stub::async::downloadBlock(::grpc::ClientContext* context, const ::ClientDatanode::downloadBlockRequest* request, ::grpc::ClientReadReactor< ::ClientDatanode::downloadBlockResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ClientDatanode::downloadBlockResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_downloadBlock_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ClientDatanode::downloadBlockResponse>* FileService::Stub::AsyncdownloadBlockRaw(::grpc::ClientContext* context, const ::ClientDatanode::downloadBlockRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ClientDatanode::downloadBlockResponse>::Create(channel_.get(), cq, rpcmethod_downloadBlock_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ClientDatanode::downloadBlockResponse>* FileService::Stub::PrepareAsyncdownloadBlockRaw(::grpc::ClientContext* context, const ::ClientDatanode::downloadBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ClientDatanode::downloadBlockResponse>::Create(channel_.get(), cq, rpcmethod_downloadBlock_, context, request, false, nullptr);
}

FileService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< FileService::Service, ::ClientDatanode::transferBlockRequest, ::ClientDatanode::transferBlockResponse>(
          [](FileService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::ClientDatanode::transferBlockRequest>* reader,
             ::ClientDatanode::transferBlockResponse* resp) {
               return service->transferBlock(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FileService::Service, ::ClientDatanode::downloadBlockRequest, ::ClientDatanode::downloadBlockResponse>(
          [](FileService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ClientDatanode::downloadBlockRequest* req,
             ::grpc::ServerWriter<::ClientDatanode::downloadBlockResponse>* writer) {
               return service->downloadBlock(ctx, req, writer);
             }, this)));
}

FileService::Service::~Service() {
}

::grpc::Status FileService::Service::transferBlock(::grpc::ServerContext* context, ::grpc::ServerReader< ::ClientDatanode::transferBlockRequest>* reader, ::ClientDatanode::transferBlockResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileService::Service::downloadBlock(::grpc::ServerContext* context, const ::ClientDatanode::downloadBlockRequest* request, ::grpc::ServerWriter< ::ClientDatanode::downloadBlockResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ClientDatanode

