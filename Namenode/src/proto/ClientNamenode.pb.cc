// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientNamenode.proto

#include "proto/ClientNamenode.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ClientNamenode {
PROTOBUF_CONSTEXPR GetBlockLocationRequest::GetBlockLocationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.offset_)*/uint64_t{0u}
  , /*decltype(_impl_.length_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBlockLocationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBlockLocationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBlockLocationRequestDefaultTypeInternal() {}
  union {
    GetBlockLocationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBlockLocationRequestDefaultTypeInternal _GetBlockLocationRequest_default_instance_;
PROTOBUF_CONSTEXPR GetBlockLocationResponse::GetBlockLocationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr} {}
struct GetBlockLocationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBlockLocationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBlockLocationResponseDefaultTypeInternal() {}
  union {
    GetBlockLocationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBlockLocationResponseDefaultTypeInternal _GetBlockLocationResponse_default_instance_;
PROTOBUF_CONSTEXPR GetFileBlockLocationsRequest::GetFileBlockLocationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFileBlockLocationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFileBlockLocationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFileBlockLocationsRequestDefaultTypeInternal() {}
  union {
    GetFileBlockLocationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFileBlockLocationsRequestDefaultTypeInternal _GetFileBlockLocationsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetFileBlockLocationsResponse::GetFileBlockLocationsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.locations_)*/nullptr} {}
struct GetFileBlockLocationsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFileBlockLocationsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFileBlockLocationsResponseDefaultTypeInternal() {}
  union {
    GetFileBlockLocationsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFileBlockLocationsResponseDefaultTypeInternal _GetFileBlockLocationsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetServerDefaultsRequest::GetServerDefaultsRequest(
    ::_pbi::ConstantInitialized) {}
struct GetServerDefaultsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServerDefaultsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServerDefaultsRequestDefaultTypeInternal() {}
  union {
    GetServerDefaultsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServerDefaultsRequestDefaultTypeInternal _GetServerDefaultsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetServerDefaultsResponse::GetServerDefaultsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.erverdefaults_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetServerDefaultsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServerDefaultsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServerDefaultsResponseDefaultTypeInternal() {}
  union {
    GetServerDefaultsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServerDefaultsResponseDefaultTypeInternal _GetServerDefaultsResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateRequest::CreateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.permission_)*/nullptr
  , /*decltype(_impl_.flag_)*/0
  , /*decltype(_impl_.createparent_)*/false
  , /*decltype(_impl_.blocksize_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateRequestDefaultTypeInternal() {}
  union {
    CreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateResponse::CreateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/nullptr} {}
struct CreateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateResponseDefaultTypeInternal() {}
  union {
    CreateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateResponseDefaultTypeInternal _CreateResponse_default_instance_;
PROTOBUF_CONSTEXPR AppendRequest::AppendRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppendRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendRequestDefaultTypeInternal() {}
  union {
    AppendRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendRequestDefaultTypeInternal _AppendRequest_default_instance_;
PROTOBUF_CONSTEXPR AppendResponse::AppendResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.block_)*/nullptr} {}
struct AppendResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendResponseDefaultTypeInternal() {}
  union {
    AppendResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendResponseDefaultTypeInternal _AppendResponse_default_instance_;
PROTOBUF_CONSTEXPR RenameRequest::RenameRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dst_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RenameRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenameRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenameRequestDefaultTypeInternal() {}
  union {
    RenameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenameRequestDefaultTypeInternal _RenameRequest_default_instance_;
PROTOBUF_CONSTEXPR RenameResponse::RenameResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RenameResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenameResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenameResponseDefaultTypeInternal() {}
  union {
    RenameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenameResponseDefaultTypeInternal _RenameResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteRequest::DeleteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recursive_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteRequestDefaultTypeInternal() {}
  union {
    DeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteResponse::DeleteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteResponseDefaultTypeInternal() {}
  union {
    DeleteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteResponseDefaultTypeInternal _DeleteResponse_default_instance_;
PROTOBUF_CONSTEXPR SetPermissionRequest::SetPermissionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.permission_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetPermissionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPermissionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPermissionRequestDefaultTypeInternal() {}
  union {
    SetPermissionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPermissionRequestDefaultTypeInternal _SetPermissionRequest_default_instance_;
PROTOBUF_CONSTEXPR SetPermissionResponse::SetPermissionResponse(
    ::_pbi::ConstantInitialized) {}
struct SetPermissionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPermissionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPermissionResponseDefaultTypeInternal() {}
  union {
    SetPermissionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPermissionResponseDefaultTypeInternal _SetPermissionResponse_default_instance_;
PROTOBUF_CONSTEXPR SetOwnerRequest::SetOwnerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.src_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.groupname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SetOwnerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetOwnerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetOwnerRequestDefaultTypeInternal() {}
  union {
    SetOwnerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetOwnerRequestDefaultTypeInternal _SetOwnerRequest_default_instance_;
PROTOBUF_CONSTEXPR SetOwnerResponse::SetOwnerResponse(
    ::_pbi::ConstantInitialized) {}
struct SetOwnerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetOwnerResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetOwnerResponseDefaultTypeInternal() {}
  union {
    SetOwnerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetOwnerResponseDefaultTypeInternal _SetOwnerResponse_default_instance_;
PROTOBUF_CONSTEXPR AddBlockRequest::AddBlockRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.excludenodes_)*/{}
  , /*decltype(_impl_.favorednodes_)*/{}
  , /*decltype(_impl_.src_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileid_)*/uint64_t{0u}} {}
struct AddBlockRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddBlockRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddBlockRequestDefaultTypeInternal() {}
  union {
    AddBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddBlockRequestDefaultTypeInternal _AddBlockRequest_default_instance_;
PROTOBUF_CONSTEXPR AddBlockResponse::AddBlockResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddBlockResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddBlockResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddBlockResponseDefaultTypeInternal() {}
  union {
    AddBlockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddBlockResponseDefaultTypeInternal _AddBlockResponse_default_instance_;
PROTOBUF_CONSTEXPR mkdirRequest::mkdirRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.permission_)*/nullptr
  , /*decltype(_impl_.createparent_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct mkdirRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR mkdirRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~mkdirRequestDefaultTypeInternal() {}
  union {
    mkdirRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 mkdirRequestDefaultTypeInternal _mkdirRequest_default_instance_;
PROTOBUF_CONSTEXPR mkdirResponse::mkdirResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.issuccess_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct mkdirResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR mkdirResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~mkdirResponseDefaultTypeInternal() {}
  union {
    mkdirResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 mkdirResponseDefaultTypeInternal _mkdirResponse_default_instance_;
PROTOBUF_CONSTEXPR GetListingRequest::GetListingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.startafter_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.needlocation_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetListingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetListingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetListingRequestDefaultTypeInternal() {}
  union {
    GetListingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetListingRequestDefaultTypeInternal _GetListingRequest_default_instance_;
PROTOBUF_CONSTEXPR GetListingResponse::GetListingResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dirlist_)*/nullptr} {}
struct GetListingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetListingResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetListingResponseDefaultTypeInternal() {}
  union {
    GetListingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetListingResponseDefaultTypeInternal _GetListingResponse_default_instance_;
PROTOBUF_CONSTEXPR RenewLeaseRequest::RenewLeaseRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RenewLeaseRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenewLeaseRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenewLeaseRequestDefaultTypeInternal() {}
  union {
    RenewLeaseRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenewLeaseRequestDefaultTypeInternal _RenewLeaseRequest_default_instance_;
PROTOBUF_CONSTEXPR RenewLeaseResponse::RenewLeaseResponse(
    ::_pbi::ConstantInitialized) {}
struct RenewLeaseResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenewLeaseResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenewLeaseResponseDefaultTypeInternal() {}
  union {
    RenewLeaseResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenewLeaseResponseDefaultTypeInternal _RenewLeaseResponse_default_instance_;
}  // namespace ClientNamenode
static ::_pb::Metadata file_level_metadata_ClientNamenode_2eproto[26];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ClientNamenode_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ClientNamenode_2eproto = nullptr;

const uint32_t TableStruct_ClientNamenode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetBlockLocationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetBlockLocationRequest, _impl_.src_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetBlockLocationRequest, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetBlockLocationRequest, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetBlockLocationResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetBlockLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetBlockLocationResponse, _impl_.location_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetFileBlockLocationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetFileBlockLocationsRequest, _impl_.src_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetFileBlockLocationsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetFileBlockLocationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetFileBlockLocationsResponse, _impl_.locations_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetServerDefaultsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetServerDefaultsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetServerDefaultsResponse, _impl_.erverdefaults_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::CreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::CreateRequest, _impl_.src_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::CreateRequest, _impl_.clientname_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::CreateRequest, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::CreateRequest, _impl_.permission_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::CreateRequest, _impl_.createparent_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::CreateRequest, _impl_.blocksize_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::CreateResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::CreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::CreateResponse, _impl_.status_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::AppendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::AppendRequest, _impl_.src_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::AppendRequest, _impl_.clientname_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::AppendResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::AppendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::AppendResponse, _impl_.block_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::RenameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::RenameRequest, _impl_.src_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::RenameRequest, _impl_.dst_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::RenameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::RenameResponse, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::DeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::DeleteRequest, _impl_.src_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::DeleteRequest, _impl_.recursive_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::DeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::DeleteResponse, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::SetPermissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::SetPermissionRequest, _impl_.src_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::SetPermissionRequest, _impl_.permission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::SetPermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::SetOwnerRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::SetOwnerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::SetOwnerRequest, _impl_.src_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::SetOwnerRequest, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::SetOwnerRequest, _impl_.groupname_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::SetOwnerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::AddBlockRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::AddBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::AddBlockRequest, _impl_.src_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::AddBlockRequest, _impl_.clientname_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::AddBlockRequest, _impl_.excludenodes_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::AddBlockRequest, _impl_.fileid_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::AddBlockRequest, _impl_.favorednodes_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::AddBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::AddBlockResponse, _impl_.block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::mkdirRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::mkdirRequest, _impl_.src_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::mkdirRequest, _impl_.permission_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::mkdirRequest, _impl_.createparent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::mkdirResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::mkdirResponse, _impl_.issuccess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetListingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetListingRequest, _impl_.src_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetListingRequest, _impl_.startafter_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetListingRequest, _impl_.needlocation_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetListingResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetListingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::GetListingResponse, _impl_.dirlist_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::RenewLeaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::RenewLeaseRequest, _impl_.clientname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientNamenode::RenewLeaseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ClientNamenode::GetBlockLocationRequest)},
  { 9, 16, -1, sizeof(::ClientNamenode::GetBlockLocationResponse)},
  { 17, -1, -1, sizeof(::ClientNamenode::GetFileBlockLocationsRequest)},
  { 24, 31, -1, sizeof(::ClientNamenode::GetFileBlockLocationsResponse)},
  { 32, -1, -1, sizeof(::ClientNamenode::GetServerDefaultsRequest)},
  { 38, -1, -1, sizeof(::ClientNamenode::GetServerDefaultsResponse)},
  { 45, -1, -1, sizeof(::ClientNamenode::CreateRequest)},
  { 57, 64, -1, sizeof(::ClientNamenode::CreateResponse)},
  { 65, -1, -1, sizeof(::ClientNamenode::AppendRequest)},
  { 73, 80, -1, sizeof(::ClientNamenode::AppendResponse)},
  { 81, -1, -1, sizeof(::ClientNamenode::RenameRequest)},
  { 89, -1, -1, sizeof(::ClientNamenode::RenameResponse)},
  { 96, -1, -1, sizeof(::ClientNamenode::DeleteRequest)},
  { 104, -1, -1, sizeof(::ClientNamenode::DeleteResponse)},
  { 111, -1, -1, sizeof(::ClientNamenode::SetPermissionRequest)},
  { 119, -1, -1, sizeof(::ClientNamenode::SetPermissionResponse)},
  { 125, 134, -1, sizeof(::ClientNamenode::SetOwnerRequest)},
  { 137, -1, -1, sizeof(::ClientNamenode::SetOwnerResponse)},
  { 143, 154, -1, sizeof(::ClientNamenode::AddBlockRequest)},
  { 159, -1, -1, sizeof(::ClientNamenode::AddBlockResponse)},
  { 166, -1, -1, sizeof(::ClientNamenode::mkdirRequest)},
  { 175, -1, -1, sizeof(::ClientNamenode::mkdirResponse)},
  { 182, -1, -1, sizeof(::ClientNamenode::GetListingRequest)},
  { 191, 198, -1, sizeof(::ClientNamenode::GetListingResponse)},
  { 199, -1, -1, sizeof(::ClientNamenode::RenewLeaseRequest)},
  { 206, -1, -1, sizeof(::ClientNamenode::RenewLeaseResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ClientNamenode::_GetBlockLocationRequest_default_instance_._instance,
  &::ClientNamenode::_GetBlockLocationResponse_default_instance_._instance,
  &::ClientNamenode::_GetFileBlockLocationsRequest_default_instance_._instance,
  &::ClientNamenode::_GetFileBlockLocationsResponse_default_instance_._instance,
  &::ClientNamenode::_GetServerDefaultsRequest_default_instance_._instance,
  &::ClientNamenode::_GetServerDefaultsResponse_default_instance_._instance,
  &::ClientNamenode::_CreateRequest_default_instance_._instance,
  &::ClientNamenode::_CreateResponse_default_instance_._instance,
  &::ClientNamenode::_AppendRequest_default_instance_._instance,
  &::ClientNamenode::_AppendResponse_default_instance_._instance,
  &::ClientNamenode::_RenameRequest_default_instance_._instance,
  &::ClientNamenode::_RenameResponse_default_instance_._instance,
  &::ClientNamenode::_DeleteRequest_default_instance_._instance,
  &::ClientNamenode::_DeleteResponse_default_instance_._instance,
  &::ClientNamenode::_SetPermissionRequest_default_instance_._instance,
  &::ClientNamenode::_SetPermissionResponse_default_instance_._instance,
  &::ClientNamenode::_SetOwnerRequest_default_instance_._instance,
  &::ClientNamenode::_SetOwnerResponse_default_instance_._instance,
  &::ClientNamenode::_AddBlockRequest_default_instance_._instance,
  &::ClientNamenode::_AddBlockResponse_default_instance_._instance,
  &::ClientNamenode::_mkdirRequest_default_instance_._instance,
  &::ClientNamenode::_mkdirResponse_default_instance_._instance,
  &::ClientNamenode::_GetListingRequest_default_instance_._instance,
  &::ClientNamenode::_GetListingResponse_default_instance_._instance,
  &::ClientNamenode::_RenewLeaseRequest_default_instance_._instance,
  &::ClientNamenode::_RenewLeaseResponse_default_instance_._instance,
};

const char descriptor_table_protodef_ClientNamenode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024ClientNamenode.proto\022\016ClientNamenode\032\t"
  "dfs.proto\"F\n\027GetBlockLocationRequest\022\013\n\003"
  "src\030\001 \001(\t\022\016\n\006offset\030\002 \001(\004\022\016\n\006length\030\003 \001("
  "\004\"M\n\030GetBlockLocationResponse\022$\n\010locatio"
  "n\030\001 \001(\0132\r.LocatedBlockH\000\210\001\001B\013\n\t_location"
  "\"+\n\034GetFileBlockLocationsRequest\022\013\n\003src\030"
  "\001 \001(\t\"U\n\035GetFileBlockLocationsResponse\022&"
  "\n\tlocations\030\001 \001(\0132\016.LocatedBlocksH\000\210\001\001B\014"
  "\n\n_locations\"\032\n\030GetServerDefaultsRequest"
  "\"C\n\031GetServerDefaultsResponse\022&\n\rerverDe"
  "faults\030\001 \001(\0132\017.ServerDefaults\"\244\001\n\rCreate"
  "Request\022\013\n\003src\030\001 \001(\t\022\022\n\nclientName\030\002 \001(\t"
  "\022(\n\004flag\030\003 \001(\0162\032.ClientNamenode.CreateFl"
  "ag\022\037\n\npermission\030\004 \001(\0132\013.Permission\022\024\n\014c"
  "reateParent\030\005 \001(\010\022\021\n\tblockSize\030\006 \001(\004\"=\n\016"
  "CreateResponse\022 \n\006status\030\001 \001(\0132\013.FileSta"
  "tusH\000\210\001\001B\t\n\007_status\"0\n\rAppendRequest\022\013\n\003"
  "src\030\001 \001(\t\022\022\n\nclientName\030\002 \001(\t\"=\n\016AppendR"
  "esponse\022!\n\005block\030\001 \001(\0132\r.LocatedBlockH\000\210"
  "\001\001B\010\n\006_block\")\n\rRenameRequest\022\013\n\003src\030\001 \001"
  "(\t\022\013\n\003dst\030\002 \001(\t\" \n\016RenameResponse\022\016\n\006res"
  "ult\030\001 \001(\010\"/\n\rDeleteRequest\022\013\n\003src\030\001 \001(\t\022"
  "\021\n\trecursive\030\002 \001(\010\" \n\016DeleteResponse\022\016\n\006"
  "result\030\001 \001(\010\"D\n\024SetPermissionRequest\022\013\n\003"
  "src\030\001 \001(\t\022\037\n\npermission\030\002 \001(\0132\013.Permissi"
  "on\"\027\n\025SetPermissionResponse\"h\n\017SetOwnerR"
  "equest\022\013\n\003src\030\001 \001(\t\022\025\n\010username\030\002 \001(\tH\000\210"
  "\001\001\022\026\n\tgroupname\030\003 \001(\tH\001\210\001\001B\013\n\t_usernameB"
  "\014\n\n_groupname\"\022\n\020SetOwnerResponse\"\215\001\n\017Ad"
  "dBlockRequest\022\013\n\003src\030\001 \001(\t\022\022\n\nclientName"
  "\030\002 \001(\t\022#\n\014excludeNodes\030\004 \003(\0132\r.DatanodeI"
  "nfo\022\023\n\006fileId\030\005 \001(\004H\000\210\001\001\022\024\n\014favoredNodes"
  "\030\006 \003(\tB\t\n\007_fileId\"0\n\020AddBlockResponse\022\034\n"
  "\005block\030\001 \001(\0132\r.LocatedBlock\"R\n\014mkdirRequ"
  "est\022\013\n\003src\030\001 \001(\t\022\037\n\npermission\030\002 \001(\0132\013.P"
  "ermission\022\024\n\014createParent\030\003 \001(\010\"\"\n\rmkdir"
  "Response\022\021\n\tisSuccess\030\001 \001(\010\"J\n\021GetListin"
  "gRequest\022\013\n\003src\030\001 \001(\t\022\022\n\nstartAfter\030\002 \001("
  "\014\022\024\n\014needLocation\030\003 \001(\010\"I\n\022GetListingRes"
  "ponse\022\'\n\007dirList\030\001 \001(\0132\021.DirectoryListin"
  "gH\000\210\001\001B\n\n\010_dirList\"\'\n\021RenewLeaseRequest\022"
  "\022\n\nClientName\030\001 \001(\t\"\024\n\022RenewLeaseRespons"
  "e*3\n\nCreateFlag\022\n\n\006CREATE\020\000\022\r\n\tOVERWRITE"
  "\020\001\022\n\n\006APPEND\020\0022\343\010\n\rClientService\022e\n\020GetB"
  "lockLocation\022\'.ClientNamenode.GetBlockLo"
  "cationRequest\032(.ClientNamenode.GetBlockL"
  "ocationResponse\022t\n\025GetFileBlockLocations"
  "\022,.ClientNamenode.GetFileBlockLocationsR"
  "equest\032-.ClientNamenode.GetFileBlockLoca"
  "tionsResponse\022h\n\021GetServerDefaults\022(.Cli"
  "entNamenode.GetServerDefaultsRequest\032).C"
  "lientNamenode.GetServerDefaultsResponse\022"
  "G\n\006Create\022\035.ClientNamenode.CreateRequest"
  "\032\036.ClientNamenode.CreateResponse\022G\n\006Appe"
  "nd\022\035.ClientNamenode.AppendRequest\032\036.Clie"
  "ntNamenode.AppendResponse\022G\n\006Rename\022\035.Cl"
  "ientNamenode.RenameRequest\032\036.ClientNamen"
  "ode.RenameResponse\022G\n\006Delete\022\035.ClientNam"
  "enode.DeleteRequest\032\036.ClientNamenode.Del"
  "eteResponse\022\\\n\rSetPermission\022$.ClientNam"
  "enode.SetPermissionRequest\032%.ClientNamen"
  "ode.SetPermissionResponse\022M\n\010SetOwner\022\037."
  "ClientNamenode.SetOwnerRequest\032 .ClientN"
  "amenode.SetOwnerResponse\022M\n\010AddBlock\022\037.C"
  "lientNamenode.AddBlockRequest\032 .ClientNa"
  "menode.AddBlockResponse\022D\n\005mkdir\022\034.Clien"
  "tNamenode.mkdirRequest\032\035.ClientNamenode."
  "mkdirResponse\022P\n\007Listing\022!.ClientNamenod"
  "e.GetListingRequest\032\".ClientNamenode.Get"
  "ListingResponse\022S\n\nRenewLease\022!.ClientNa"
  "menode.RenewLeaseRequest\032\".ClientNamenod"
  "e.RenewLeaseResponseb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ClientNamenode_2eproto_deps[1] = {
  &::descriptor_table_dfs_2eproto,
};
static ::_pbi::once_flag descriptor_table_ClientNamenode_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ClientNamenode_2eproto = {
    false, false, 2868, descriptor_table_protodef_ClientNamenode_2eproto,
    "ClientNamenode.proto",
    &descriptor_table_ClientNamenode_2eproto_once, descriptor_table_ClientNamenode_2eproto_deps, 1, 26,
    schemas, file_default_instances, TableStruct_ClientNamenode_2eproto::offsets,
    file_level_metadata_ClientNamenode_2eproto, file_level_enum_descriptors_ClientNamenode_2eproto,
    file_level_service_descriptors_ClientNamenode_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ClientNamenode_2eproto_getter() {
  return &descriptor_table_ClientNamenode_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ClientNamenode_2eproto(&descriptor_table_ClientNamenode_2eproto);
namespace ClientNamenode {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ClientNamenode_2eproto);
  return file_level_enum_descriptors_ClientNamenode_2eproto[0];
}
bool CreateFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GetBlockLocationRequest::_Internal {
 public:
};

GetBlockLocationRequest::GetBlockLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.GetBlockLocationRequest)
}
GetBlockLocationRequest::GetBlockLocationRequest(const GetBlockLocationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBlockLocationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.length_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.length_));
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.GetBlockLocationRequest)
}

inline void GetBlockLocationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.offset_){uint64_t{0u}}
    , decltype(_impl_.length_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetBlockLocationRequest::~GetBlockLocationRequest() {
  // @@protoc_insertion_point(destructor:ClientNamenode.GetBlockLocationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBlockLocationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
}

void GetBlockLocationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBlockLocationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.GetBlockLocationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  ::memset(&_impl_.offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.length_) -
      reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockLocationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClientNamenode.GetBlockLocationRequest.src"));
        } else
          goto handle_unusual;
        continue;
      // uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBlockLocationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.GetBlockLocationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src().data(), static_cast<int>(this->_internal_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientNamenode.GetBlockLocationRequest.src");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src(), target);
  }

  // uint64 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offset(), target);
  }

  // uint64 length = 3;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.GetBlockLocationRequest)
  return target;
}

size_t GetBlockLocationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.GetBlockLocationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src());
  }

  // uint64 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  // uint64 length = 3;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlockLocationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBlockLocationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlockLocationRequest::GetClassData() const { return &_class_data_; }


void GetBlockLocationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBlockLocationRequest*>(&to_msg);
  auto& from = static_cast<const GetBlockLocationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.GetBlockLocationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlockLocationRequest::CopyFrom(const GetBlockLocationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.GetBlockLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockLocationRequest::IsInitialized() const {
  return true;
}

void GetBlockLocationRequest::InternalSwap(GetBlockLocationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_, lhs_arena,
      &other->_impl_.src_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBlockLocationRequest, _impl_.length_)
      + sizeof(GetBlockLocationRequest::_impl_.length_)
      - PROTOBUF_FIELD_OFFSET(GetBlockLocationRequest, _impl_.offset_)>(
          reinterpret_cast<char*>(&_impl_.offset_),
          reinterpret_cast<char*>(&other->_impl_.offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockLocationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[0]);
}

// ===================================================================

class GetBlockLocationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBlockLocationResponse>()._impl_._has_bits_);
  static const ::LocatedBlock& location(const GetBlockLocationResponse* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::LocatedBlock&
GetBlockLocationResponse::_Internal::location(const GetBlockLocationResponse* msg) {
  return *msg->_impl_.location_;
}
void GetBlockLocationResponse::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetBlockLocationResponse::GetBlockLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.GetBlockLocationResponse)
}
GetBlockLocationResponse::GetBlockLocationResponse(const GetBlockLocationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBlockLocationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::LocatedBlock(*from._impl_.location_);
  }
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.GetBlockLocationResponse)
}

inline void GetBlockLocationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
  };
}

GetBlockLocationResponse::~GetBlockLocationResponse() {
  // @@protoc_insertion_point(destructor:ClientNamenode.GetBlockLocationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBlockLocationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GetBlockLocationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBlockLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.GetBlockLocationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockLocationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .LocatedBlock location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBlockLocationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.GetBlockLocationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .LocatedBlock location = 1;
  if (_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.GetBlockLocationResponse)
  return target;
}

size_t GetBlockLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.GetBlockLocationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .LocatedBlock location = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlockLocationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBlockLocationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlockLocationResponse::GetClassData() const { return &_class_data_; }


void GetBlockLocationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBlockLocationResponse*>(&to_msg);
  auto& from = static_cast<const GetBlockLocationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.GetBlockLocationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::LocatedBlock::MergeFrom(
        from._internal_location());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlockLocationResponse::CopyFrom(const GetBlockLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.GetBlockLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockLocationResponse::IsInitialized() const {
  return true;
}

void GetBlockLocationResponse::InternalSwap(GetBlockLocationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.location_, other->_impl_.location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockLocationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[1]);
}

// ===================================================================

class GetFileBlockLocationsRequest::_Internal {
 public:
};

GetFileBlockLocationsRequest::GetFileBlockLocationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.GetFileBlockLocationsRequest)
}
GetFileBlockLocationsRequest::GetFileBlockLocationsRequest(const GetFileBlockLocationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFileBlockLocationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.GetFileBlockLocationsRequest)
}

inline void GetFileBlockLocationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetFileBlockLocationsRequest::~GetFileBlockLocationsRequest() {
  // @@protoc_insertion_point(destructor:ClientNamenode.GetFileBlockLocationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFileBlockLocationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
}

void GetFileBlockLocationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFileBlockLocationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.GetFileBlockLocationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFileBlockLocationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClientNamenode.GetFileBlockLocationsRequest.src"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFileBlockLocationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.GetFileBlockLocationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src().data(), static_cast<int>(this->_internal_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientNamenode.GetFileBlockLocationsRequest.src");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.GetFileBlockLocationsRequest)
  return target;
}

size_t GetFileBlockLocationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.GetFileBlockLocationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFileBlockLocationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFileBlockLocationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFileBlockLocationsRequest::GetClassData() const { return &_class_data_; }


void GetFileBlockLocationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFileBlockLocationsRequest*>(&to_msg);
  auto& from = static_cast<const GetFileBlockLocationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.GetFileBlockLocationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFileBlockLocationsRequest::CopyFrom(const GetFileBlockLocationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.GetFileBlockLocationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileBlockLocationsRequest::IsInitialized() const {
  return true;
}

void GetFileBlockLocationsRequest::InternalSwap(GetFileBlockLocationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_, lhs_arena,
      &other->_impl_.src_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFileBlockLocationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[2]);
}

// ===================================================================

class GetFileBlockLocationsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetFileBlockLocationsResponse>()._impl_._has_bits_);
  static const ::LocatedBlocks& locations(const GetFileBlockLocationsResponse* msg);
  static void set_has_locations(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::LocatedBlocks&
GetFileBlockLocationsResponse::_Internal::locations(const GetFileBlockLocationsResponse* msg) {
  return *msg->_impl_.locations_;
}
void GetFileBlockLocationsResponse::clear_locations() {
  if (_impl_.locations_ != nullptr) _impl_.locations_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetFileBlockLocationsResponse::GetFileBlockLocationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.GetFileBlockLocationsResponse)
}
GetFileBlockLocationsResponse::GetFileBlockLocationsResponse(const GetFileBlockLocationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFileBlockLocationsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.locations_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_locations()) {
    _this->_impl_.locations_ = new ::LocatedBlocks(*from._impl_.locations_);
  }
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.GetFileBlockLocationsResponse)
}

inline void GetFileBlockLocationsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.locations_){nullptr}
  };
}

GetFileBlockLocationsResponse::~GetFileBlockLocationsResponse() {
  // @@protoc_insertion_point(destructor:ClientNamenode.GetFileBlockLocationsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFileBlockLocationsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.locations_;
}

void GetFileBlockLocationsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFileBlockLocationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.GetFileBlockLocationsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.locations_ != nullptr);
    _impl_.locations_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFileBlockLocationsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .LocatedBlocks locations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_locations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFileBlockLocationsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.GetFileBlockLocationsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .LocatedBlocks locations = 1;
  if (_internal_has_locations()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::locations(this),
        _Internal::locations(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.GetFileBlockLocationsResponse)
  return target;
}

size_t GetFileBlockLocationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.GetFileBlockLocationsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .LocatedBlocks locations = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.locations_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFileBlockLocationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFileBlockLocationsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFileBlockLocationsResponse::GetClassData() const { return &_class_data_; }


void GetFileBlockLocationsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFileBlockLocationsResponse*>(&to_msg);
  auto& from = static_cast<const GetFileBlockLocationsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.GetFileBlockLocationsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_locations()) {
    _this->_internal_mutable_locations()->::LocatedBlocks::MergeFrom(
        from._internal_locations());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFileBlockLocationsResponse::CopyFrom(const GetFileBlockLocationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.GetFileBlockLocationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileBlockLocationsResponse::IsInitialized() const {
  return true;
}

void GetFileBlockLocationsResponse::InternalSwap(GetFileBlockLocationsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.locations_, other->_impl_.locations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFileBlockLocationsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[3]);
}

// ===================================================================

class GetServerDefaultsRequest::_Internal {
 public:
};

GetServerDefaultsRequest::GetServerDefaultsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.GetServerDefaultsRequest)
}
GetServerDefaultsRequest::GetServerDefaultsRequest(const GetServerDefaultsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetServerDefaultsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.GetServerDefaultsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServerDefaultsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServerDefaultsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetServerDefaultsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[4]);
}

// ===================================================================

class GetServerDefaultsResponse::_Internal {
 public:
  static const ::ServerDefaults& erverdefaults(const GetServerDefaultsResponse* msg);
};

const ::ServerDefaults&
GetServerDefaultsResponse::_Internal::erverdefaults(const GetServerDefaultsResponse* msg) {
  return *msg->_impl_.erverdefaults_;
}
void GetServerDefaultsResponse::clear_erverdefaults() {
  if (GetArenaForAllocation() == nullptr && _impl_.erverdefaults_ != nullptr) {
    delete _impl_.erverdefaults_;
  }
  _impl_.erverdefaults_ = nullptr;
}
GetServerDefaultsResponse::GetServerDefaultsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.GetServerDefaultsResponse)
}
GetServerDefaultsResponse::GetServerDefaultsResponse(const GetServerDefaultsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetServerDefaultsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.erverdefaults_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_erverdefaults()) {
    _this->_impl_.erverdefaults_ = new ::ServerDefaults(*from._impl_.erverdefaults_);
  }
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.GetServerDefaultsResponse)
}

inline void GetServerDefaultsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.erverdefaults_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetServerDefaultsResponse::~GetServerDefaultsResponse() {
  // @@protoc_insertion_point(destructor:ClientNamenode.GetServerDefaultsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServerDefaultsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.erverdefaults_;
}

void GetServerDefaultsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetServerDefaultsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.GetServerDefaultsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.erverdefaults_ != nullptr) {
    delete _impl_.erverdefaults_;
  }
  _impl_.erverdefaults_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServerDefaultsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ServerDefaults erverDefaults = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_erverdefaults(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetServerDefaultsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.GetServerDefaultsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ServerDefaults erverDefaults = 1;
  if (this->_internal_has_erverdefaults()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::erverdefaults(this),
        _Internal::erverdefaults(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.GetServerDefaultsResponse)
  return target;
}

size_t GetServerDefaultsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.GetServerDefaultsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ServerDefaults erverDefaults = 1;
  if (this->_internal_has_erverdefaults()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.erverdefaults_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServerDefaultsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetServerDefaultsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServerDefaultsResponse::GetClassData() const { return &_class_data_; }


void GetServerDefaultsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetServerDefaultsResponse*>(&to_msg);
  auto& from = static_cast<const GetServerDefaultsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.GetServerDefaultsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_erverdefaults()) {
    _this->_internal_mutable_erverdefaults()->::ServerDefaults::MergeFrom(
        from._internal_erverdefaults());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServerDefaultsResponse::CopyFrom(const GetServerDefaultsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.GetServerDefaultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerDefaultsResponse::IsInitialized() const {
  return true;
}

void GetServerDefaultsResponse::InternalSwap(GetServerDefaultsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.erverdefaults_, other->_impl_.erverdefaults_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServerDefaultsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[5]);
}

// ===================================================================

class CreateRequest::_Internal {
 public:
  static const ::Permission& permission(const CreateRequest* msg);
};

const ::Permission&
CreateRequest::_Internal::permission(const CreateRequest* msg) {
  return *msg->_impl_.permission_;
}
void CreateRequest::clear_permission() {
  if (GetArenaForAllocation() == nullptr && _impl_.permission_ != nullptr) {
    delete _impl_.permission_;
  }
  _impl_.permission_ = nullptr;
}
CreateRequest::CreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.CreateRequest)
}
CreateRequest::CreateRequest(const CreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.clientname_){}
    , decltype(_impl_.permission_){nullptr}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.createparent_){}
    , decltype(_impl_.blocksize_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientname().empty()) {
    _this->_impl_.clientname_.Set(from._internal_clientname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_permission()) {
    _this->_impl_.permission_ = new ::Permission(*from._impl_.permission_);
  }
  ::memcpy(&_impl_.flag_, &from._impl_.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blocksize_) -
    reinterpret_cast<char*>(&_impl_.flag_)) + sizeof(_impl_.blocksize_));
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.CreateRequest)
}

inline void CreateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.clientname_){}
    , decltype(_impl_.permission_){nullptr}
    , decltype(_impl_.flag_){0}
    , decltype(_impl_.createparent_){false}
    , decltype(_impl_.blocksize_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateRequest::~CreateRequest() {
  // @@protoc_insertion_point(destructor:ClientNamenode.CreateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
  _impl_.clientname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.permission_;
}

void CreateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.CreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  _impl_.clientname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.permission_ != nullptr) {
    delete _impl_.permission_;
  }
  _impl_.permission_ = nullptr;
  ::memset(&_impl_.flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.blocksize_) -
      reinterpret_cast<char*>(&_impl_.flag_)) + sizeof(_impl_.blocksize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClientNamenode.CreateRequest.src"));
        } else
          goto handle_unusual;
        continue;
      // string clientName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clientname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClientNamenode.CreateRequest.clientName"));
        } else
          goto handle_unusual;
        continue;
      // .ClientNamenode.CreateFlag flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flag(static_cast<::ClientNamenode::CreateFlag>(val));
        } else
          goto handle_unusual;
        continue;
      // .Permission permission = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool createParent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.createparent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 blockSize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.blocksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.CreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src().data(), static_cast<int>(this->_internal_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientNamenode.CreateRequest.src");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src(), target);
  }

  // string clientName = 2;
  if (!this->_internal_clientname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientname().data(), static_cast<int>(this->_internal_clientname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientNamenode.CreateRequest.clientName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientname(), target);
  }

  // .ClientNamenode.CreateFlag flag = 3;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_flag(), target);
  }

  // .Permission permission = 4;
  if (this->_internal_has_permission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::permission(this),
        _Internal::permission(this).GetCachedSize(), target, stream);
  }

  // bool createParent = 5;
  if (this->_internal_createparent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_createparent(), target);
  }

  // uint64 blockSize = 6;
  if (this->_internal_blocksize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_blocksize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.CreateRequest)
  return target;
}

size_t CreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.CreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src());
  }

  // string clientName = 2;
  if (!this->_internal_clientname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientname());
  }

  // .Permission permission = 4;
  if (this->_internal_has_permission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.permission_);
  }

  // .ClientNamenode.CreateFlag flag = 3;
  if (this->_internal_flag() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_flag());
  }

  // bool createParent = 5;
  if (this->_internal_createparent() != 0) {
    total_size += 1 + 1;
  }

  // uint64 blockSize = 6;
  if (this->_internal_blocksize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_blocksize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRequest::GetClassData() const { return &_class_data_; }


void CreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateRequest*>(&to_msg);
  auto& from = static_cast<const CreateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.CreateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (!from._internal_clientname().empty()) {
    _this->_internal_set_clientname(from._internal_clientname());
  }
  if (from._internal_has_permission()) {
    _this->_internal_mutable_permission()->::Permission::MergeFrom(
        from._internal_permission());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_createparent() != 0) {
    _this->_internal_set_createparent(from._internal_createparent());
  }
  if (from._internal_blocksize() != 0) {
    _this->_internal_set_blocksize(from._internal_blocksize());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRequest::CopyFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.CreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRequest::IsInitialized() const {
  return true;
}

void CreateRequest::InternalSwap(CreateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_, lhs_arena,
      &other->_impl_.src_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientname_, lhs_arena,
      &other->_impl_.clientname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateRequest, _impl_.blocksize_)
      + sizeof(CreateRequest::_impl_.blocksize_)
      - PROTOBUF_FIELD_OFFSET(CreateRequest, _impl_.permission_)>(
          reinterpret_cast<char*>(&_impl_.permission_),
          reinterpret_cast<char*>(&other->_impl_.permission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[6]);
}

// ===================================================================

class CreateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateResponse>()._impl_._has_bits_);
  static const ::FileStatus& status(const CreateResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::FileStatus&
CreateResponse::_Internal::status(const CreateResponse* msg) {
  return *msg->_impl_.status_;
}
void CreateResponse::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CreateResponse::CreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.CreateResponse)
}
CreateResponse::CreateResponse(const CreateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::FileStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.CreateResponse)
}

inline void CreateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){nullptr}
  };
}

CreateResponse::~CreateResponse() {
  // @@protoc_insertion_point(destructor:ClientNamenode.CreateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void CreateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.CreateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.status_ != nullptr);
    _impl_.status_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .FileStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.CreateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .FileStatus status = 1;
  if (_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.CreateResponse)
  return target;
}

size_t CreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.CreateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .FileStatus status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateResponse::GetClassData() const { return &_class_data_; }


void CreateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateResponse*>(&to_msg);
  auto& from = static_cast<const CreateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.CreateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::FileStatus::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateResponse::CopyFrom(const CreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.CreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateResponse::IsInitialized() const {
  return true;
}

void CreateResponse::InternalSwap(CreateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[7]);
}

// ===================================================================

class AppendRequest::_Internal {
 public:
};

AppendRequest::AppendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.AppendRequest)
}
AppendRequest::AppendRequest(const AppendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppendRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.clientname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientname().empty()) {
    _this->_impl_.clientname_.Set(from._internal_clientname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.AppendRequest)
}

inline void AppendRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.clientname_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppendRequest::~AppendRequest() {
  // @@protoc_insertion_point(destructor:ClientNamenode.AppendRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppendRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
  _impl_.clientname_.Destroy();
}

void AppendRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.AppendRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  _impl_.clientname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClientNamenode.AppendRequest.src"));
        } else
          goto handle_unusual;
        continue;
      // string clientName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clientname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClientNamenode.AppendRequest.clientName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppendRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.AppendRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src().data(), static_cast<int>(this->_internal_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientNamenode.AppendRequest.src");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src(), target);
  }

  // string clientName = 2;
  if (!this->_internal_clientname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientname().data(), static_cast<int>(this->_internal_clientname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientNamenode.AppendRequest.clientName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.AppendRequest)
  return target;
}

size_t AppendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.AppendRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src());
  }

  // string clientName = 2;
  if (!this->_internal_clientname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppendRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendRequest::GetClassData() const { return &_class_data_; }


void AppendRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppendRequest*>(&to_msg);
  auto& from = static_cast<const AppendRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.AppendRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (!from._internal_clientname().empty()) {
    _this->_internal_set_clientname(from._internal_clientname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendRequest::CopyFrom(const AppendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.AppendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendRequest::IsInitialized() const {
  return true;
}

void AppendRequest::InternalSwap(AppendRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_, lhs_arena,
      &other->_impl_.src_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientname_, lhs_arena,
      &other->_impl_.clientname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[8]);
}

// ===================================================================

class AppendResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AppendResponse>()._impl_._has_bits_);
  static const ::LocatedBlock& block(const AppendResponse* msg);
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::LocatedBlock&
AppendResponse::_Internal::block(const AppendResponse* msg) {
  return *msg->_impl_.block_;
}
void AppendResponse::clear_block() {
  if (_impl_.block_ != nullptr) _impl_.block_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AppendResponse::AppendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.AppendResponse)
}
AppendResponse::AppendResponse(const AppendResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppendResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    _this->_impl_.block_ = new ::LocatedBlock(*from._impl_.block_);
  }
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.AppendResponse)
}

inline void AppendResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_){nullptr}
  };
}

AppendResponse::~AppendResponse() {
  // @@protoc_insertion_point(destructor:ClientNamenode.AppendResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppendResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.block_;
}

void AppendResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.AppendResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.block_ != nullptr);
    _impl_.block_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .LocatedBlock block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppendResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.AppendResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .LocatedBlock block = 1;
  if (_internal_has_block()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::block(this),
        _Internal::block(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.AppendResponse)
  return target;
}

size_t AppendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.AppendResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .LocatedBlock block = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppendResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendResponse::GetClassData() const { return &_class_data_; }


void AppendResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppendResponse*>(&to_msg);
  auto& from = static_cast<const AppendResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.AppendResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _this->_internal_mutable_block()->::LocatedBlock::MergeFrom(
        from._internal_block());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendResponse::CopyFrom(const AppendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.AppendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendResponse::IsInitialized() const {
  return true;
}

void AppendResponse::InternalSwap(AppendResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.block_, other->_impl_.block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[9]);
}

// ===================================================================

class RenameRequest::_Internal {
 public:
};

RenameRequest::RenameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.RenameRequest)
}
RenameRequest::RenameRequest(const RenameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RenameRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.dst_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dst_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dst_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dst().empty()) {
    _this->_impl_.dst_.Set(from._internal_dst(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.RenameRequest)
}

inline void RenameRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.dst_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dst_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dst_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RenameRequest::~RenameRequest() {
  // @@protoc_insertion_point(destructor:ClientNamenode.RenameRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
  _impl_.dst_.Destroy();
}

void RenameRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RenameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.RenameRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  _impl_.dst_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenameRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClientNamenode.RenameRequest.src"));
        } else
          goto handle_unusual;
        continue;
      // string dst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dst();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClientNamenode.RenameRequest.dst"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RenameRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.RenameRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src().data(), static_cast<int>(this->_internal_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientNamenode.RenameRequest.src");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src(), target);
  }

  // string dst = 2;
  if (!this->_internal_dst().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dst().data(), static_cast<int>(this->_internal_dst().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientNamenode.RenameRequest.dst");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.RenameRequest)
  return target;
}

size_t RenameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.RenameRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src());
  }

  // string dst = 2;
  if (!this->_internal_dst().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dst());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RenameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenameRequest::GetClassData() const { return &_class_data_; }


void RenameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RenameRequest*>(&to_msg);
  auto& from = static_cast<const RenameRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.RenameRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (!from._internal_dst().empty()) {
    _this->_internal_set_dst(from._internal_dst());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenameRequest::CopyFrom(const RenameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.RenameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameRequest::IsInitialized() const {
  return true;
}

void RenameRequest::InternalSwap(RenameRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_, lhs_arena,
      &other->_impl_.src_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dst_, lhs_arena,
      &other->_impl_.dst_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[10]);
}

// ===================================================================

class RenameResponse::_Internal {
 public:
};

RenameResponse::RenameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.RenameResponse)
}
RenameResponse::RenameResponse(const RenameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RenameResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.RenameResponse)
}

inline void RenameResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RenameResponse::~RenameResponse() {
  // @@protoc_insertion_point(destructor:ClientNamenode.RenameResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RenameResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RenameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.RenameResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenameResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RenameResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.RenameResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.RenameResponse)
  return target;
}

size_t RenameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.RenameResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RenameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenameResponse::GetClassData() const { return &_class_data_; }


void RenameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RenameResponse*>(&to_msg);
  auto& from = static_cast<const RenameResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.RenameResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenameResponse::CopyFrom(const RenameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.RenameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameResponse::IsInitialized() const {
  return true;
}

void RenameResponse::InternalSwap(RenameResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[11]);
}

// ===================================================================

class DeleteRequest::_Internal {
 public:
};

DeleteRequest::DeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.DeleteRequest)
}
DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.recursive_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.recursive_ = from._impl_.recursive_;
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.DeleteRequest)
}

inline void DeleteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.recursive_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:ClientNamenode.DeleteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
}

void DeleteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.DeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  _impl_.recursive_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClientNamenode.DeleteRequest.src"));
        } else
          goto handle_unusual;
        continue;
      // bool recursive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.recursive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.DeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src().data(), static_cast<int>(this->_internal_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientNamenode.DeleteRequest.src");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src(), target);
  }

  // bool recursive = 2;
  if (this->_internal_recursive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_recursive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.DeleteRequest)
  return target;
}

size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.DeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src());
  }

  // bool recursive = 2;
  if (this->_internal_recursive() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRequest::GetClassData() const { return &_class_data_; }


void DeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteRequest*>(&to_msg);
  auto& from = static_cast<const DeleteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (from._internal_recursive() != 0) {
    _this->_internal_set_recursive(from._internal_recursive());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {
  return true;
}

void DeleteRequest::InternalSwap(DeleteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_, lhs_arena,
      &other->_impl_.src_, rhs_arena
  );
  swap(_impl_.recursive_, other->_impl_.recursive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[12]);
}

// ===================================================================

class DeleteResponse::_Internal {
 public:
};

DeleteResponse::DeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.DeleteResponse)
}
DeleteResponse::DeleteResponse(const DeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.DeleteResponse)
}

inline void DeleteResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteResponse::~DeleteResponse() {
  // @@protoc_insertion_point(destructor:ClientNamenode.DeleteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.DeleteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.DeleteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.DeleteResponse)
  return target;
}

size_t DeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.DeleteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteResponse::GetClassData() const { return &_class_data_; }


void DeleteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteResponse*>(&to_msg);
  auto& from = static_cast<const DeleteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.DeleteResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteResponse::CopyFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResponse::IsInitialized() const {
  return true;
}

void DeleteResponse::InternalSwap(DeleteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[13]);
}

// ===================================================================

class SetPermissionRequest::_Internal {
 public:
  static const ::Permission& permission(const SetPermissionRequest* msg);
};

const ::Permission&
SetPermissionRequest::_Internal::permission(const SetPermissionRequest* msg) {
  return *msg->_impl_.permission_;
}
void SetPermissionRequest::clear_permission() {
  if (GetArenaForAllocation() == nullptr && _impl_.permission_ != nullptr) {
    delete _impl_.permission_;
  }
  _impl_.permission_ = nullptr;
}
SetPermissionRequest::SetPermissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.SetPermissionRequest)
}
SetPermissionRequest::SetPermissionRequest(const SetPermissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetPermissionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.permission_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_permission()) {
    _this->_impl_.permission_ = new ::Permission(*from._impl_.permission_);
  }
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.SetPermissionRequest)
}

inline void SetPermissionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.permission_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetPermissionRequest::~SetPermissionRequest() {
  // @@protoc_insertion_point(destructor:ClientNamenode.SetPermissionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetPermissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
  if (this != internal_default_instance()) delete _impl_.permission_;
}

void SetPermissionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetPermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.SetPermissionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.permission_ != nullptr) {
    delete _impl_.permission_;
  }
  _impl_.permission_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPermissionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClientNamenode.SetPermissionRequest.src"));
        } else
          goto handle_unusual;
        continue;
      // .Permission permission = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetPermissionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.SetPermissionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src().data(), static_cast<int>(this->_internal_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientNamenode.SetPermissionRequest.src");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src(), target);
  }

  // .Permission permission = 2;
  if (this->_internal_has_permission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::permission(this),
        _Internal::permission(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.SetPermissionRequest)
  return target;
}

size_t SetPermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.SetPermissionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src());
  }

  // .Permission permission = 2;
  if (this->_internal_has_permission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.permission_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPermissionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetPermissionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPermissionRequest::GetClassData() const { return &_class_data_; }


void SetPermissionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetPermissionRequest*>(&to_msg);
  auto& from = static_cast<const SetPermissionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.SetPermissionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (from._internal_has_permission()) {
    _this->_internal_mutable_permission()->::Permission::MergeFrom(
        from._internal_permission());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetPermissionRequest::CopyFrom(const SetPermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.SetPermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPermissionRequest::IsInitialized() const {
  return true;
}

void SetPermissionRequest::InternalSwap(SetPermissionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_, lhs_arena,
      &other->_impl_.src_, rhs_arena
  );
  swap(_impl_.permission_, other->_impl_.permission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPermissionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[14]);
}

// ===================================================================

class SetPermissionResponse::_Internal {
 public:
};

SetPermissionResponse::SetPermissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.SetPermissionResponse)
}
SetPermissionResponse::SetPermissionResponse(const SetPermissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SetPermissionResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.SetPermissionResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPermissionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPermissionResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetPermissionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[15]);
}

// ===================================================================

class SetOwnerRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetOwnerRequest>()._impl_._has_bits_);
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_groupname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SetOwnerRequest::SetOwnerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.SetOwnerRequest)
}
SetOwnerRequest::SetOwnerRequest(const SetOwnerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetOwnerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.src_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.groupname_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_username()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.groupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_groupname()) {
    _this->_impl_.groupname_.Set(from._internal_groupname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.SetOwnerRequest)
}

inline void SetOwnerRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.src_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.groupname_){}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.groupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.groupname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetOwnerRequest::~SetOwnerRequest() {
  // @@protoc_insertion_point(destructor:ClientNamenode.SetOwnerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetOwnerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
  _impl_.username_.Destroy();
  _impl_.groupname_.Destroy();
}

void SetOwnerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetOwnerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.SetOwnerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.groupname_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetOwnerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClientNamenode.SetOwnerRequest.src"));
        } else
          goto handle_unusual;
        continue;
      // optional string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClientNamenode.SetOwnerRequest.username"));
        } else
          goto handle_unusual;
        continue;
      // optional string groupname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_groupname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClientNamenode.SetOwnerRequest.groupname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetOwnerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.SetOwnerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src().data(), static_cast<int>(this->_internal_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientNamenode.SetOwnerRequest.src");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src(), target);
  }

  // optional string username = 2;
  if (_internal_has_username()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientNamenode.SetOwnerRequest.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // optional string groupname = 3;
  if (_internal_has_groupname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_groupname().data(), static_cast<int>(this->_internal_groupname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientNamenode.SetOwnerRequest.groupname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_groupname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.SetOwnerRequest)
  return target;
}

size_t SetOwnerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.SetOwnerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string username = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional string groupname = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_groupname());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetOwnerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetOwnerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetOwnerRequest::GetClassData() const { return &_class_data_; }


void SetOwnerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetOwnerRequest*>(&to_msg);
  auto& from = static_cast<const SetOwnerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.SetOwnerRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_groupname(from._internal_groupname());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetOwnerRequest::CopyFrom(const SetOwnerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.SetOwnerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetOwnerRequest::IsInitialized() const {
  return true;
}

void SetOwnerRequest::InternalSwap(SetOwnerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_, lhs_arena,
      &other->_impl_.src_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.groupname_, lhs_arena,
      &other->_impl_.groupname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetOwnerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[16]);
}

// ===================================================================

class SetOwnerResponse::_Internal {
 public:
};

SetOwnerResponse::SetOwnerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.SetOwnerResponse)
}
SetOwnerResponse::SetOwnerResponse(const SetOwnerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SetOwnerResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.SetOwnerResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetOwnerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetOwnerResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetOwnerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[17]);
}

// ===================================================================

class AddBlockRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AddBlockRequest>()._impl_._has_bits_);
  static void set_has_fileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void AddBlockRequest::clear_excludenodes() {
  _impl_.excludenodes_.Clear();
}
AddBlockRequest::AddBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.AddBlockRequest)
}
AddBlockRequest::AddBlockRequest(const AddBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddBlockRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.excludenodes_){from._impl_.excludenodes_}
    , decltype(_impl_.favorednodes_){from._impl_.favorednodes_}
    , decltype(_impl_.src_){}
    , decltype(_impl_.clientname_){}
    , decltype(_impl_.fileid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientname().empty()) {
    _this->_impl_.clientname_.Set(from._internal_clientname(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.fileid_ = from._impl_.fileid_;
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.AddBlockRequest)
}

inline void AddBlockRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.excludenodes_){arena}
    , decltype(_impl_.favorednodes_){arena}
    , decltype(_impl_.src_){}
    , decltype(_impl_.clientname_){}
    , decltype(_impl_.fileid_){uint64_t{0u}}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddBlockRequest::~AddBlockRequest() {
  // @@protoc_insertion_point(destructor:ClientNamenode.AddBlockRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.excludenodes_.~RepeatedPtrField();
  _impl_.favorednodes_.~RepeatedPtrField();
  _impl_.src_.Destroy();
  _impl_.clientname_.Destroy();
}

void AddBlockRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.AddBlockRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.excludenodes_.Clear();
  _impl_.favorednodes_.Clear();
  _impl_.src_.ClearToEmpty();
  _impl_.clientname_.ClearToEmpty();
  _impl_.fileid_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddBlockRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClientNamenode.AddBlockRequest.src"));
        } else
          goto handle_unusual;
        continue;
      // string clientName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clientname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClientNamenode.AddBlockRequest.clientName"));
        } else
          goto handle_unusual;
        continue;
      // repeated .DatanodeInfo excludeNodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_excludenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fileId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_fileid(&has_bits);
          _impl_.fileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string favoredNodes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_favorednodes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ClientNamenode.AddBlockRequest.favoredNodes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddBlockRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.AddBlockRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src().data(), static_cast<int>(this->_internal_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientNamenode.AddBlockRequest.src");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src(), target);
  }

  // string clientName = 2;
  if (!this->_internal_clientname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientname().data(), static_cast<int>(this->_internal_clientname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientNamenode.AddBlockRequest.clientName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientname(), target);
  }

  // repeated .DatanodeInfo excludeNodes = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_excludenodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_excludenodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 fileId = 5;
  if (_internal_has_fileid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_fileid(), target);
  }

  // repeated string favoredNodes = 6;
  for (int i = 0, n = this->_internal_favorednodes_size(); i < n; i++) {
    const auto& s = this->_internal_favorednodes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientNamenode.AddBlockRequest.favoredNodes");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.AddBlockRequest)
  return target;
}

size_t AddBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.AddBlockRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DatanodeInfo excludeNodes = 4;
  total_size += 1UL * this->_internal_excludenodes_size();
  for (const auto& msg : this->_impl_.excludenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string favoredNodes = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.favorednodes_.size());
  for (int i = 0, n = _impl_.favorednodes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.favorednodes_.Get(i));
  }

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src());
  }

  // string clientName = 2;
  if (!this->_internal_clientname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientname());
  }

  // optional uint64 fileId = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fileid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddBlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddBlockRequest::GetClassData() const { return &_class_data_; }


void AddBlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddBlockRequest*>(&to_msg);
  auto& from = static_cast<const AddBlockRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.AddBlockRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.excludenodes_.MergeFrom(from._impl_.excludenodes_);
  _this->_impl_.favorednodes_.MergeFrom(from._impl_.favorednodes_);
  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (!from._internal_clientname().empty()) {
    _this->_internal_set_clientname(from._internal_clientname());
  }
  if (from._internal_has_fileid()) {
    _this->_internal_set_fileid(from._internal_fileid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddBlockRequest::CopyFrom(const AddBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.AddBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBlockRequest::IsInitialized() const {
  return true;
}

void AddBlockRequest::InternalSwap(AddBlockRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.excludenodes_.InternalSwap(&other->_impl_.excludenodes_);
  _impl_.favorednodes_.InternalSwap(&other->_impl_.favorednodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_, lhs_arena,
      &other->_impl_.src_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientname_, lhs_arena,
      &other->_impl_.clientname_, rhs_arena
  );
  swap(_impl_.fileid_, other->_impl_.fileid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddBlockRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[18]);
}

// ===================================================================

class AddBlockResponse::_Internal {
 public:
  static const ::LocatedBlock& block(const AddBlockResponse* msg);
};

const ::LocatedBlock&
AddBlockResponse::_Internal::block(const AddBlockResponse* msg) {
  return *msg->_impl_.block_;
}
void AddBlockResponse::clear_block() {
  if (GetArenaForAllocation() == nullptr && _impl_.block_ != nullptr) {
    delete _impl_.block_;
  }
  _impl_.block_ = nullptr;
}
AddBlockResponse::AddBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.AddBlockResponse)
}
AddBlockResponse::AddBlockResponse(const AddBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddBlockResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    _this->_impl_.block_ = new ::LocatedBlock(*from._impl_.block_);
  }
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.AddBlockResponse)
}

inline void AddBlockResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddBlockResponse::~AddBlockResponse() {
  // @@protoc_insertion_point(destructor:ClientNamenode.AddBlockResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddBlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.block_;
}

void AddBlockResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.AddBlockResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.block_ != nullptr) {
    delete _impl_.block_;
  }
  _impl_.block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddBlockResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LocatedBlock block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddBlockResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.AddBlockResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .LocatedBlock block = 1;
  if (this->_internal_has_block()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::block(this),
        _Internal::block(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.AddBlockResponse)
  return target;
}

size_t AddBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.AddBlockResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LocatedBlock block = 1;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddBlockResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddBlockResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddBlockResponse::GetClassData() const { return &_class_data_; }


void AddBlockResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddBlockResponse*>(&to_msg);
  auto& from = static_cast<const AddBlockResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.AddBlockResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _this->_internal_mutable_block()->::LocatedBlock::MergeFrom(
        from._internal_block());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddBlockResponse::CopyFrom(const AddBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.AddBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBlockResponse::IsInitialized() const {
  return true;
}

void AddBlockResponse::InternalSwap(AddBlockResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.block_, other->_impl_.block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddBlockResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[19]);
}

// ===================================================================

class mkdirRequest::_Internal {
 public:
  static const ::Permission& permission(const mkdirRequest* msg);
};

const ::Permission&
mkdirRequest::_Internal::permission(const mkdirRequest* msg) {
  return *msg->_impl_.permission_;
}
void mkdirRequest::clear_permission() {
  if (GetArenaForAllocation() == nullptr && _impl_.permission_ != nullptr) {
    delete _impl_.permission_;
  }
  _impl_.permission_ = nullptr;
}
mkdirRequest::mkdirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.mkdirRequest)
}
mkdirRequest::mkdirRequest(const mkdirRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  mkdirRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.permission_){nullptr}
    , decltype(_impl_.createparent_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_permission()) {
    _this->_impl_.permission_ = new ::Permission(*from._impl_.permission_);
  }
  _this->_impl_.createparent_ = from._impl_.createparent_;
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.mkdirRequest)
}

inline void mkdirRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.permission_){nullptr}
    , decltype(_impl_.createparent_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

mkdirRequest::~mkdirRequest() {
  // @@protoc_insertion_point(destructor:ClientNamenode.mkdirRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void mkdirRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
  if (this != internal_default_instance()) delete _impl_.permission_;
}

void mkdirRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void mkdirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.mkdirRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.permission_ != nullptr) {
    delete _impl_.permission_;
  }
  _impl_.permission_ = nullptr;
  _impl_.createparent_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mkdirRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClientNamenode.mkdirRequest.src"));
        } else
          goto handle_unusual;
        continue;
      // .Permission permission = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool createParent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.createparent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mkdirRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.mkdirRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src().data(), static_cast<int>(this->_internal_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientNamenode.mkdirRequest.src");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src(), target);
  }

  // .Permission permission = 2;
  if (this->_internal_has_permission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::permission(this),
        _Internal::permission(this).GetCachedSize(), target, stream);
  }

  // bool createParent = 3;
  if (this->_internal_createparent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_createparent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.mkdirRequest)
  return target;
}

size_t mkdirRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.mkdirRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src());
  }

  // .Permission permission = 2;
  if (this->_internal_has_permission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.permission_);
  }

  // bool createParent = 3;
  if (this->_internal_createparent() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mkdirRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    mkdirRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mkdirRequest::GetClassData() const { return &_class_data_; }


void mkdirRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<mkdirRequest*>(&to_msg);
  auto& from = static_cast<const mkdirRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.mkdirRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (from._internal_has_permission()) {
    _this->_internal_mutable_permission()->::Permission::MergeFrom(
        from._internal_permission());
  }
  if (from._internal_createparent() != 0) {
    _this->_internal_set_createparent(from._internal_createparent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mkdirRequest::CopyFrom(const mkdirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.mkdirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mkdirRequest::IsInitialized() const {
  return true;
}

void mkdirRequest::InternalSwap(mkdirRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_, lhs_arena,
      &other->_impl_.src_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mkdirRequest, _impl_.createparent_)
      + sizeof(mkdirRequest::_impl_.createparent_)
      - PROTOBUF_FIELD_OFFSET(mkdirRequest, _impl_.permission_)>(
          reinterpret_cast<char*>(&_impl_.permission_),
          reinterpret_cast<char*>(&other->_impl_.permission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mkdirRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[20]);
}

// ===================================================================

class mkdirResponse::_Internal {
 public:
};

mkdirResponse::mkdirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.mkdirResponse)
}
mkdirResponse::mkdirResponse(const mkdirResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  mkdirResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.issuccess_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.issuccess_ = from._impl_.issuccess_;
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.mkdirResponse)
}

inline void mkdirResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.issuccess_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

mkdirResponse::~mkdirResponse() {
  // @@protoc_insertion_point(destructor:ClientNamenode.mkdirResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void mkdirResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void mkdirResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void mkdirResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.mkdirResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.issuccess_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mkdirResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mkdirResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.mkdirResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isSuccess = 1;
  if (this->_internal_issuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_issuccess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.mkdirResponse)
  return target;
}

size_t mkdirResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.mkdirResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isSuccess = 1;
  if (this->_internal_issuccess() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mkdirResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    mkdirResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mkdirResponse::GetClassData() const { return &_class_data_; }


void mkdirResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<mkdirResponse*>(&to_msg);
  auto& from = static_cast<const mkdirResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.mkdirResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_issuccess() != 0) {
    _this->_internal_set_issuccess(from._internal_issuccess());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mkdirResponse::CopyFrom(const mkdirResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.mkdirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mkdirResponse::IsInitialized() const {
  return true;
}

void mkdirResponse::InternalSwap(mkdirResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.issuccess_, other->_impl_.issuccess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mkdirResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[21]);
}

// ===================================================================

class GetListingRequest::_Internal {
 public:
};

GetListingRequest::GetListingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.GetListingRequest)
}
GetListingRequest::GetListingRequest(const GetListingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetListingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.startafter_){}
    , decltype(_impl_.needlocation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), 
      _this->GetArenaForAllocation());
  }
  _impl_.startafter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.startafter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_startafter().empty()) {
    _this->_impl_.startafter_.Set(from._internal_startafter(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.needlocation_ = from._impl_.needlocation_;
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.GetListingRequest)
}

inline void GetListingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.startafter_){}
    , decltype(_impl_.needlocation_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.startafter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.startafter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetListingRequest::~GetListingRequest() {
  // @@protoc_insertion_point(destructor:ClientNamenode.GetListingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetListingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
  _impl_.startafter_.Destroy();
}

void GetListingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetListingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.GetListingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  _impl_.startafter_.ClearToEmpty();
  _impl_.needlocation_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetListingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClientNamenode.GetListingRequest.src"));
        } else
          goto handle_unusual;
        continue;
      // bytes startAfter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_startafter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool needLocation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.needlocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetListingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.GetListingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src().data(), static_cast<int>(this->_internal_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientNamenode.GetListingRequest.src");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src(), target);
  }

  // bytes startAfter = 2;
  if (!this->_internal_startafter().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_startafter(), target);
  }

  // bool needLocation = 3;
  if (this->_internal_needlocation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_needlocation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.GetListingRequest)
  return target;
}

size_t GetListingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.GetListingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src());
  }

  // bytes startAfter = 2;
  if (!this->_internal_startafter().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_startafter());
  }

  // bool needLocation = 3;
  if (this->_internal_needlocation() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetListingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetListingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetListingRequest::GetClassData() const { return &_class_data_; }


void GetListingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetListingRequest*>(&to_msg);
  auto& from = static_cast<const GetListingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.GetListingRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (!from._internal_startafter().empty()) {
    _this->_internal_set_startafter(from._internal_startafter());
  }
  if (from._internal_needlocation() != 0) {
    _this->_internal_set_needlocation(from._internal_needlocation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetListingRequest::CopyFrom(const GetListingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.GetListingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetListingRequest::IsInitialized() const {
  return true;
}

void GetListingRequest::InternalSwap(GetListingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_, lhs_arena,
      &other->_impl_.src_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.startafter_, lhs_arena,
      &other->_impl_.startafter_, rhs_arena
  );
  swap(_impl_.needlocation_, other->_impl_.needlocation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetListingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[22]);
}

// ===================================================================

class GetListingResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetListingResponse>()._impl_._has_bits_);
  static const ::DirectoryListing& dirlist(const GetListingResponse* msg);
  static void set_has_dirlist(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::DirectoryListing&
GetListingResponse::_Internal::dirlist(const GetListingResponse* msg) {
  return *msg->_impl_.dirlist_;
}
void GetListingResponse::clear_dirlist() {
  if (_impl_.dirlist_ != nullptr) _impl_.dirlist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetListingResponse::GetListingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.GetListingResponse)
}
GetListingResponse::GetListingResponse(const GetListingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetListingResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dirlist_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dirlist()) {
    _this->_impl_.dirlist_ = new ::DirectoryListing(*from._impl_.dirlist_);
  }
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.GetListingResponse)
}

inline void GetListingResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dirlist_){nullptr}
  };
}

GetListingResponse::~GetListingResponse() {
  // @@protoc_insertion_point(destructor:ClientNamenode.GetListingResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetListingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.dirlist_;
}

void GetListingResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetListingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.GetListingResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.dirlist_ != nullptr);
    _impl_.dirlist_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetListingResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .DirectoryListing dirList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dirlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetListingResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.GetListingResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .DirectoryListing dirList = 1;
  if (_internal_has_dirlist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::dirlist(this),
        _Internal::dirlist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.GetListingResponse)
  return target;
}

size_t GetListingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.GetListingResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .DirectoryListing dirList = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dirlist_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetListingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetListingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetListingResponse::GetClassData() const { return &_class_data_; }


void GetListingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetListingResponse*>(&to_msg);
  auto& from = static_cast<const GetListingResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.GetListingResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dirlist()) {
    _this->_internal_mutable_dirlist()->::DirectoryListing::MergeFrom(
        from._internal_dirlist());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetListingResponse::CopyFrom(const GetListingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.GetListingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetListingResponse::IsInitialized() const {
  return true;
}

void GetListingResponse::InternalSwap(GetListingResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.dirlist_, other->_impl_.dirlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetListingResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[23]);
}

// ===================================================================

class RenewLeaseRequest::_Internal {
 public:
};

RenewLeaseRequest::RenewLeaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.RenewLeaseRequest)
}
RenewLeaseRequest::RenewLeaseRequest(const RenewLeaseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RenewLeaseRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientname().empty()) {
    _this->_impl_.clientname_.Set(from._internal_clientname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.RenewLeaseRequest)
}

inline void RenewLeaseRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientname_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RenewLeaseRequest::~RenewLeaseRequest() {
  // @@protoc_insertion_point(destructor:ClientNamenode.RenewLeaseRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenewLeaseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientname_.Destroy();
}

void RenewLeaseRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RenewLeaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientNamenode.RenewLeaseRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenewLeaseRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ClientName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ClientNamenode.RenewLeaseRequest.ClientName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RenewLeaseRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientNamenode.RenewLeaseRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ClientName = 1;
  if (!this->_internal_clientname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientname().data(), static_cast<int>(this->_internal_clientname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientNamenode.RenewLeaseRequest.ClientName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientNamenode.RenewLeaseRequest)
  return target;
}

size_t RenewLeaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientNamenode.RenewLeaseRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ClientName = 1;
  if (!this->_internal_clientname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenewLeaseRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RenewLeaseRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenewLeaseRequest::GetClassData() const { return &_class_data_; }


void RenewLeaseRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RenewLeaseRequest*>(&to_msg);
  auto& from = static_cast<const RenewLeaseRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientNamenode.RenewLeaseRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientname().empty()) {
    _this->_internal_set_clientname(from._internal_clientname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenewLeaseRequest::CopyFrom(const RenewLeaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientNamenode.RenewLeaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenewLeaseRequest::IsInitialized() const {
  return true;
}

void RenewLeaseRequest::InternalSwap(RenewLeaseRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientname_, lhs_arena,
      &other->_impl_.clientname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RenewLeaseRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[24]);
}

// ===================================================================

class RenewLeaseResponse::_Internal {
 public:
};

RenewLeaseResponse::RenewLeaseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ClientNamenode.RenewLeaseResponse)
}
RenewLeaseResponse::RenewLeaseResponse(const RenewLeaseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RenewLeaseResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ClientNamenode.RenewLeaseResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenewLeaseResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenewLeaseResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RenewLeaseResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[25]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ClientNamenode
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ClientNamenode::GetBlockLocationRequest*
Arena::CreateMaybeMessage< ::ClientNamenode::GetBlockLocationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::GetBlockLocationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::GetBlockLocationResponse*
Arena::CreateMaybeMessage< ::ClientNamenode::GetBlockLocationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::GetBlockLocationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::GetFileBlockLocationsRequest*
Arena::CreateMaybeMessage< ::ClientNamenode::GetFileBlockLocationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::GetFileBlockLocationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::GetFileBlockLocationsResponse*
Arena::CreateMaybeMessage< ::ClientNamenode::GetFileBlockLocationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::GetFileBlockLocationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::GetServerDefaultsRequest*
Arena::CreateMaybeMessage< ::ClientNamenode::GetServerDefaultsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::GetServerDefaultsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::GetServerDefaultsResponse*
Arena::CreateMaybeMessage< ::ClientNamenode::GetServerDefaultsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::GetServerDefaultsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::CreateRequest*
Arena::CreateMaybeMessage< ::ClientNamenode::CreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::CreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::CreateResponse*
Arena::CreateMaybeMessage< ::ClientNamenode::CreateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::CreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::AppendRequest*
Arena::CreateMaybeMessage< ::ClientNamenode::AppendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::AppendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::AppendResponse*
Arena::CreateMaybeMessage< ::ClientNamenode::AppendResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::AppendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::RenameRequest*
Arena::CreateMaybeMessage< ::ClientNamenode::RenameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::RenameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::RenameResponse*
Arena::CreateMaybeMessage< ::ClientNamenode::RenameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::RenameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::DeleteRequest*
Arena::CreateMaybeMessage< ::ClientNamenode::DeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::DeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::DeleteResponse*
Arena::CreateMaybeMessage< ::ClientNamenode::DeleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::DeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::SetPermissionRequest*
Arena::CreateMaybeMessage< ::ClientNamenode::SetPermissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::SetPermissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::SetPermissionResponse*
Arena::CreateMaybeMessage< ::ClientNamenode::SetPermissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::SetPermissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::SetOwnerRequest*
Arena::CreateMaybeMessage< ::ClientNamenode::SetOwnerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::SetOwnerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::SetOwnerResponse*
Arena::CreateMaybeMessage< ::ClientNamenode::SetOwnerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::SetOwnerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::AddBlockRequest*
Arena::CreateMaybeMessage< ::ClientNamenode::AddBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::AddBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::AddBlockResponse*
Arena::CreateMaybeMessage< ::ClientNamenode::AddBlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::AddBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::mkdirRequest*
Arena::CreateMaybeMessage< ::ClientNamenode::mkdirRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::mkdirRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::mkdirResponse*
Arena::CreateMaybeMessage< ::ClientNamenode::mkdirResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::mkdirResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::GetListingRequest*
Arena::CreateMaybeMessage< ::ClientNamenode::GetListingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::GetListingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::GetListingResponse*
Arena::CreateMaybeMessage< ::ClientNamenode::GetListingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::GetListingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::RenewLeaseRequest*
Arena::CreateMaybeMessage< ::ClientNamenode::RenewLeaseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::RenewLeaseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientNamenode::RenewLeaseResponse*
Arena::CreateMaybeMessage< ::ClientNamenode::RenewLeaseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientNamenode::RenewLeaseResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
