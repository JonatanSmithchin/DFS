// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DatanodeNamenode.proto

#include "proto/DatanodeNamenode.pb.h"
#include "proto/DatanodeNamenode.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace DatanodeNamenode {

static const char* DatanodeService_method_names[] = {
  "/DatanodeNamenode.DatanodeService/registerDatanode",
  "/DatanodeNamenode.DatanodeService/sendHeartBeat",
  "/DatanodeNamenode.DatanodeService/blockReport",
  "/DatanodeNamenode.DatanodeService/cacheReport",
  "/DatanodeNamenode.DatanodeService/blockReceivedAndDeleted",
  "/DatanodeNamenode.DatanodeService/errorReport",
  "/DatanodeNamenode.DatanodeService/reportBadBlock",
};

std::unique_ptr< DatanodeService::Stub> DatanodeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DatanodeService::Stub> stub(new DatanodeService::Stub(channel, options));
  return stub;
}

DatanodeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_registerDatanode_(DatanodeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendHeartBeat_(DatanodeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_blockReport_(DatanodeService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_cacheReport_(DatanodeService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_blockReceivedAndDeleted_(DatanodeService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_errorReport_(DatanodeService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_reportBadBlock_(DatanodeService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DatanodeService::Stub::registerDatanode(::grpc::ClientContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest& request, ::DatanodeNamenode::RegisterDatanodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DatanodeNamenode::RegisterDatanodeRequest, ::DatanodeNamenode::RegisterDatanodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_registerDatanode_, context, request, response);
}

void DatanodeService::Stub::async::registerDatanode(::grpc::ClientContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest* request, ::DatanodeNamenode::RegisterDatanodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DatanodeNamenode::RegisterDatanodeRequest, ::DatanodeNamenode::RegisterDatanodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registerDatanode_, context, request, response, std::move(f));
}

void DatanodeService::Stub::async::registerDatanode(::grpc::ClientContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest* request, ::DatanodeNamenode::RegisterDatanodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registerDatanode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::RegisterDatanodeResponse>* DatanodeService::Stub::PrepareAsyncregisterDatanodeRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DatanodeNamenode::RegisterDatanodeResponse, ::DatanodeNamenode::RegisterDatanodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_registerDatanode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::RegisterDatanodeResponse>* DatanodeService::Stub::AsyncregisterDatanodeRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncregisterDatanodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatanodeService::Stub::sendHeartBeat(::grpc::ClientContext* context, const ::DatanodeNamenode::HeartBeatRequest& request, ::DatanodeNamenode::HeartBeatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DatanodeNamenode::HeartBeatRequest, ::DatanodeNamenode::HeartBeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sendHeartBeat_, context, request, response);
}

void DatanodeService::Stub::async::sendHeartBeat(::grpc::ClientContext* context, const ::DatanodeNamenode::HeartBeatRequest* request, ::DatanodeNamenode::HeartBeatResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DatanodeNamenode::HeartBeatRequest, ::DatanodeNamenode::HeartBeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendHeartBeat_, context, request, response, std::move(f));
}

void DatanodeService::Stub::async::sendHeartBeat(::grpc::ClientContext* context, const ::DatanodeNamenode::HeartBeatRequest* request, ::DatanodeNamenode::HeartBeatResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendHeartBeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::HeartBeatResponse>* DatanodeService::Stub::PrepareAsyncsendHeartBeatRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DatanodeNamenode::HeartBeatResponse, ::DatanodeNamenode::HeartBeatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sendHeartBeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::HeartBeatResponse>* DatanodeService::Stub::AsyncsendHeartBeatRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsendHeartBeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatanodeService::Stub::blockReport(::grpc::ClientContext* context, const ::DatanodeNamenode::blockReportRequest& request, ::DatanodeNamenode::blockReportResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DatanodeNamenode::blockReportRequest, ::DatanodeNamenode::blockReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_blockReport_, context, request, response);
}

void DatanodeService::Stub::async::blockReport(::grpc::ClientContext* context, const ::DatanodeNamenode::blockReportRequest* request, ::DatanodeNamenode::blockReportResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DatanodeNamenode::blockReportRequest, ::DatanodeNamenode::blockReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_blockReport_, context, request, response, std::move(f));
}

void DatanodeService::Stub::async::blockReport(::grpc::ClientContext* context, const ::DatanodeNamenode::blockReportRequest* request, ::DatanodeNamenode::blockReportResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_blockReport_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::blockReportResponse>* DatanodeService::Stub::PrepareAsyncblockReportRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::blockReportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DatanodeNamenode::blockReportResponse, ::DatanodeNamenode::blockReportRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_blockReport_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::blockReportResponse>* DatanodeService::Stub::AsyncblockReportRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::blockReportRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncblockReportRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatanodeService::Stub::cacheReport(::grpc::ClientContext* context, const ::DatanodeNamenode::cacheReportRequest& request, ::DatanodeNamenode::cacheReportResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DatanodeNamenode::cacheReportRequest, ::DatanodeNamenode::cacheReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_cacheReport_, context, request, response);
}

void DatanodeService::Stub::async::cacheReport(::grpc::ClientContext* context, const ::DatanodeNamenode::cacheReportRequest* request, ::DatanodeNamenode::cacheReportResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DatanodeNamenode::cacheReportRequest, ::DatanodeNamenode::cacheReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_cacheReport_, context, request, response, std::move(f));
}

void DatanodeService::Stub::async::cacheReport(::grpc::ClientContext* context, const ::DatanodeNamenode::cacheReportRequest* request, ::DatanodeNamenode::cacheReportResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_cacheReport_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::cacheReportResponse>* DatanodeService::Stub::PrepareAsynccacheReportRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::cacheReportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DatanodeNamenode::cacheReportResponse, ::DatanodeNamenode::cacheReportRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_cacheReport_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::cacheReportResponse>* DatanodeService::Stub::AsynccacheReportRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::cacheReportRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccacheReportRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatanodeService::Stub::blockReceivedAndDeleted(::grpc::ClientContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest& request, ::DatanodeNamenode::BlockReceivedAndDeletedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DatanodeNamenode::BlockReceivedAndDeletedRequest, ::DatanodeNamenode::BlockReceivedAndDeletedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_blockReceivedAndDeleted_, context, request, response);
}

void DatanodeService::Stub::async::blockReceivedAndDeleted(::grpc::ClientContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest* request, ::DatanodeNamenode::BlockReceivedAndDeletedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DatanodeNamenode::BlockReceivedAndDeletedRequest, ::DatanodeNamenode::BlockReceivedAndDeletedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_blockReceivedAndDeleted_, context, request, response, std::move(f));
}

void DatanodeService::Stub::async::blockReceivedAndDeleted(::grpc::ClientContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest* request, ::DatanodeNamenode::BlockReceivedAndDeletedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_blockReceivedAndDeleted_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::BlockReceivedAndDeletedResponse>* DatanodeService::Stub::PrepareAsyncblockReceivedAndDeletedRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DatanodeNamenode::BlockReceivedAndDeletedResponse, ::DatanodeNamenode::BlockReceivedAndDeletedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_blockReceivedAndDeleted_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::BlockReceivedAndDeletedResponse>* DatanodeService::Stub::AsyncblockReceivedAndDeletedRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncblockReceivedAndDeletedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatanodeService::Stub::errorReport(::grpc::ClientContext* context, const ::DatanodeNamenode::ErrorReportRequest& request, ::DatanodeNamenode::ErrorReportResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DatanodeNamenode::ErrorReportRequest, ::DatanodeNamenode::ErrorReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_errorReport_, context, request, response);
}

void DatanodeService::Stub::async::errorReport(::grpc::ClientContext* context, const ::DatanodeNamenode::ErrorReportRequest* request, ::DatanodeNamenode::ErrorReportResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DatanodeNamenode::ErrorReportRequest, ::DatanodeNamenode::ErrorReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_errorReport_, context, request, response, std::move(f));
}

void DatanodeService::Stub::async::errorReport(::grpc::ClientContext* context, const ::DatanodeNamenode::ErrorReportRequest* request, ::DatanodeNamenode::ErrorReportResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_errorReport_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::ErrorReportResponse>* DatanodeService::Stub::PrepareAsyncerrorReportRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::ErrorReportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DatanodeNamenode::ErrorReportResponse, ::DatanodeNamenode::ErrorReportRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_errorReport_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::ErrorReportResponse>* DatanodeService::Stub::AsyncerrorReportRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::ErrorReportRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncerrorReportRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatanodeService::Stub::reportBadBlock(::grpc::ClientContext* context, const ::DatanodeNamenode::ReportBadBlockRequest& request, ::DatanodeNamenode::ReportBadBlockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DatanodeNamenode::ReportBadBlockRequest, ::DatanodeNamenode::ReportBadBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_reportBadBlock_, context, request, response);
}

void DatanodeService::Stub::async::reportBadBlock(::grpc::ClientContext* context, const ::DatanodeNamenode::ReportBadBlockRequest* request, ::DatanodeNamenode::ReportBadBlockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DatanodeNamenode::ReportBadBlockRequest, ::DatanodeNamenode::ReportBadBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_reportBadBlock_, context, request, response, std::move(f));
}

void DatanodeService::Stub::async::reportBadBlock(::grpc::ClientContext* context, const ::DatanodeNamenode::ReportBadBlockRequest* request, ::DatanodeNamenode::ReportBadBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_reportBadBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::ReportBadBlockResponse>* DatanodeService::Stub::PrepareAsyncreportBadBlockRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::ReportBadBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DatanodeNamenode::ReportBadBlockResponse, ::DatanodeNamenode::ReportBadBlockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_reportBadBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DatanodeNamenode::ReportBadBlockResponse>* DatanodeService::Stub::AsyncreportBadBlockRaw(::grpc::ClientContext* context, const ::DatanodeNamenode::ReportBadBlockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreportBadBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

DatanodeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatanodeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatanodeService::Service, ::DatanodeNamenode::RegisterDatanodeRequest, ::DatanodeNamenode::RegisterDatanodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatanodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DatanodeNamenode::RegisterDatanodeRequest* req,
             ::DatanodeNamenode::RegisterDatanodeResponse* resp) {
               return service->registerDatanode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatanodeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatanodeService::Service, ::DatanodeNamenode::HeartBeatRequest, ::DatanodeNamenode::HeartBeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatanodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DatanodeNamenode::HeartBeatRequest* req,
             ::DatanodeNamenode::HeartBeatResponse* resp) {
               return service->sendHeartBeat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatanodeService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatanodeService::Service, ::DatanodeNamenode::blockReportRequest, ::DatanodeNamenode::blockReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatanodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DatanodeNamenode::blockReportRequest* req,
             ::DatanodeNamenode::blockReportResponse* resp) {
               return service->blockReport(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatanodeService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatanodeService::Service, ::DatanodeNamenode::cacheReportRequest, ::DatanodeNamenode::cacheReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatanodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DatanodeNamenode::cacheReportRequest* req,
             ::DatanodeNamenode::cacheReportResponse* resp) {
               return service->cacheReport(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatanodeService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatanodeService::Service, ::DatanodeNamenode::BlockReceivedAndDeletedRequest, ::DatanodeNamenode::BlockReceivedAndDeletedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatanodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DatanodeNamenode::BlockReceivedAndDeletedRequest* req,
             ::DatanodeNamenode::BlockReceivedAndDeletedResponse* resp) {
               return service->blockReceivedAndDeleted(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatanodeService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatanodeService::Service, ::DatanodeNamenode::ErrorReportRequest, ::DatanodeNamenode::ErrorReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatanodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DatanodeNamenode::ErrorReportRequest* req,
             ::DatanodeNamenode::ErrorReportResponse* resp) {
               return service->errorReport(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatanodeService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatanodeService::Service, ::DatanodeNamenode::ReportBadBlockRequest, ::DatanodeNamenode::ReportBadBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatanodeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DatanodeNamenode::ReportBadBlockRequest* req,
             ::DatanodeNamenode::ReportBadBlockResponse* resp) {
               return service->reportBadBlock(ctx, req, resp);
             }, this)));
}

DatanodeService::Service::~Service() {
}

::grpc::Status DatanodeService::Service::registerDatanode(::grpc::ServerContext* context, const ::DatanodeNamenode::RegisterDatanodeRequest* request, ::DatanodeNamenode::RegisterDatanodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatanodeService::Service::sendHeartBeat(::grpc::ServerContext* context, const ::DatanodeNamenode::HeartBeatRequest* request, ::DatanodeNamenode::HeartBeatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatanodeService::Service::blockReport(::grpc::ServerContext* context, const ::DatanodeNamenode::blockReportRequest* request, ::DatanodeNamenode::blockReportResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatanodeService::Service::cacheReport(::grpc::ServerContext* context, const ::DatanodeNamenode::cacheReportRequest* request, ::DatanodeNamenode::cacheReportResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatanodeService::Service::blockReceivedAndDeleted(::grpc::ServerContext* context, const ::DatanodeNamenode::BlockReceivedAndDeletedRequest* request, ::DatanodeNamenode::BlockReceivedAndDeletedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatanodeService::Service::errorReport(::grpc::ServerContext* context, const ::DatanodeNamenode::ErrorReportRequest* request, ::DatanodeNamenode::ErrorReportResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatanodeService::Service::reportBadBlock(::grpc::ServerContext* context, const ::DatanodeNamenode::ReportBadBlockRequest* request, ::DatanodeNamenode::ReportBadBlockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace DatanodeNamenode

