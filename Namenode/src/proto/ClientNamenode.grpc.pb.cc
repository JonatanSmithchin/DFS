// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ClientNamenode.proto

#include "proto/ClientNamenode.pb.h"
#include "proto/ClientNamenode.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ClientNamenode {

static const char* ClientService_method_names[] = {
  "/ClientNamenode.ClientService/GetBlockLocation",
  "/ClientNamenode.ClientService/GetFileBlockLocations",
  "/ClientNamenode.ClientService/GetServerDefaults",
  "/ClientNamenode.ClientService/Create",
  "/ClientNamenode.ClientService/Append",
  "/ClientNamenode.ClientService/Rename",
  "/ClientNamenode.ClientService/Delete",
  "/ClientNamenode.ClientService/SetPermission",
  "/ClientNamenode.ClientService/SetOwner",
  "/ClientNamenode.ClientService/AddBlock",
  "/ClientNamenode.ClientService/mkdir",
  "/ClientNamenode.ClientService/Listing",
  "/ClientNamenode.ClientService/RenewLease",
};

std::unique_ptr< ClientService::Stub> ClientService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClientService::Stub> stub(new ClientService::Stub(channel, options));
  return stub;
}

ClientService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetBlockLocation_(ClientService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFileBlockLocations_(ClientService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServerDefaults_(ClientService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Create_(ClientService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Append_(ClientService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Rename_(ClientService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(ClientService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPermission_(ClientService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetOwner_(ClientService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddBlock_(ClientService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_mkdir_(ClientService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Listing_(ClientService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RenewLease_(ClientService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClientService::Stub::GetBlockLocation(::grpc::ClientContext* context, const ::ClientNamenode::GetBlockLocationRequest& request, ::ClientNamenode::GetBlockLocationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ClientNamenode::GetBlockLocationRequest, ::ClientNamenode::GetBlockLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockLocation_, context, request, response);
}

void ClientService::Stub::async::GetBlockLocation(::grpc::ClientContext* context, const ::ClientNamenode::GetBlockLocationRequest* request, ::ClientNamenode::GetBlockLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ClientNamenode::GetBlockLocationRequest, ::ClientNamenode::GetBlockLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockLocation_, context, request, response, std::move(f));
}

void ClientService::Stub::async::GetBlockLocation(::grpc::ClientContext* context, const ::ClientNamenode::GetBlockLocationRequest* request, ::ClientNamenode::GetBlockLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::GetBlockLocationResponse>* ClientService::Stub::PrepareAsyncGetBlockLocationRaw(::grpc::ClientContext* context, const ::ClientNamenode::GetBlockLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ClientNamenode::GetBlockLocationResponse, ::ClientNamenode::GetBlockLocationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockLocation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::GetBlockLocationResponse>* ClientService::Stub::AsyncGetBlockLocationRaw(::grpc::ClientContext* context, const ::ClientNamenode::GetBlockLocationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockLocationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::GetFileBlockLocations(::grpc::ClientContext* context, const ::ClientNamenode::GetFileBlockLocationsRequest& request, ::ClientNamenode::GetFileBlockLocationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ClientNamenode::GetFileBlockLocationsRequest, ::ClientNamenode::GetFileBlockLocationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFileBlockLocations_, context, request, response);
}

void ClientService::Stub::async::GetFileBlockLocations(::grpc::ClientContext* context, const ::ClientNamenode::GetFileBlockLocationsRequest* request, ::ClientNamenode::GetFileBlockLocationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ClientNamenode::GetFileBlockLocationsRequest, ::ClientNamenode::GetFileBlockLocationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFileBlockLocations_, context, request, response, std::move(f));
}

void ClientService::Stub::async::GetFileBlockLocations(::grpc::ClientContext* context, const ::ClientNamenode::GetFileBlockLocationsRequest* request, ::ClientNamenode::GetFileBlockLocationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFileBlockLocations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::GetFileBlockLocationsResponse>* ClientService::Stub::PrepareAsyncGetFileBlockLocationsRaw(::grpc::ClientContext* context, const ::ClientNamenode::GetFileBlockLocationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ClientNamenode::GetFileBlockLocationsResponse, ::ClientNamenode::GetFileBlockLocationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFileBlockLocations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::GetFileBlockLocationsResponse>* ClientService::Stub::AsyncGetFileBlockLocationsRaw(::grpc::ClientContext* context, const ::ClientNamenode::GetFileBlockLocationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFileBlockLocationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::GetServerDefaults(::grpc::ClientContext* context, const ::ClientNamenode::GetServerDefaultsRequest& request, ::ClientNamenode::GetServerDefaultsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ClientNamenode::GetServerDefaultsRequest, ::ClientNamenode::GetServerDefaultsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServerDefaults_, context, request, response);
}

void ClientService::Stub::async::GetServerDefaults(::grpc::ClientContext* context, const ::ClientNamenode::GetServerDefaultsRequest* request, ::ClientNamenode::GetServerDefaultsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ClientNamenode::GetServerDefaultsRequest, ::ClientNamenode::GetServerDefaultsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerDefaults_, context, request, response, std::move(f));
}

void ClientService::Stub::async::GetServerDefaults(::grpc::ClientContext* context, const ::ClientNamenode::GetServerDefaultsRequest* request, ::ClientNamenode::GetServerDefaultsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerDefaults_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::GetServerDefaultsResponse>* ClientService::Stub::PrepareAsyncGetServerDefaultsRaw(::grpc::ClientContext* context, const ::ClientNamenode::GetServerDefaultsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ClientNamenode::GetServerDefaultsResponse, ::ClientNamenode::GetServerDefaultsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServerDefaults_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::GetServerDefaultsResponse>* ClientService::Stub::AsyncGetServerDefaultsRaw(::grpc::ClientContext* context, const ::ClientNamenode::GetServerDefaultsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServerDefaultsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::Create(::grpc::ClientContext* context, const ::ClientNamenode::CreateRequest& request, ::ClientNamenode::CreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ClientNamenode::CreateRequest, ::ClientNamenode::CreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void ClientService::Stub::async::Create(::grpc::ClientContext* context, const ::ClientNamenode::CreateRequest* request, ::ClientNamenode::CreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ClientNamenode::CreateRequest, ::ClientNamenode::CreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void ClientService::Stub::async::Create(::grpc::ClientContext* context, const ::ClientNamenode::CreateRequest* request, ::ClientNamenode::CreateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::CreateResponse>* ClientService::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::ClientNamenode::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ClientNamenode::CreateResponse, ::ClientNamenode::CreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::CreateResponse>* ClientService::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::ClientNamenode::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::Append(::grpc::ClientContext* context, const ::ClientNamenode::AppendRequest& request, ::ClientNamenode::AppendResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ClientNamenode::AppendRequest, ::ClientNamenode::AppendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Append_, context, request, response);
}

void ClientService::Stub::async::Append(::grpc::ClientContext* context, const ::ClientNamenode::AppendRequest* request, ::ClientNamenode::AppendResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ClientNamenode::AppendRequest, ::ClientNamenode::AppendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Append_, context, request, response, std::move(f));
}

void ClientService::Stub::async::Append(::grpc::ClientContext* context, const ::ClientNamenode::AppendRequest* request, ::ClientNamenode::AppendResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Append_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::AppendResponse>* ClientService::Stub::PrepareAsyncAppendRaw(::grpc::ClientContext* context, const ::ClientNamenode::AppendRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ClientNamenode::AppendResponse, ::ClientNamenode::AppendRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Append_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::AppendResponse>* ClientService::Stub::AsyncAppendRaw(::grpc::ClientContext* context, const ::ClientNamenode::AppendRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAppendRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::Rename(::grpc::ClientContext* context, const ::ClientNamenode::RenameRequest& request, ::ClientNamenode::RenameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ClientNamenode::RenameRequest, ::ClientNamenode::RenameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Rename_, context, request, response);
}

void ClientService::Stub::async::Rename(::grpc::ClientContext* context, const ::ClientNamenode::RenameRequest* request, ::ClientNamenode::RenameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ClientNamenode::RenameRequest, ::ClientNamenode::RenameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Rename_, context, request, response, std::move(f));
}

void ClientService::Stub::async::Rename(::grpc::ClientContext* context, const ::ClientNamenode::RenameRequest* request, ::ClientNamenode::RenameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Rename_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::RenameResponse>* ClientService::Stub::PrepareAsyncRenameRaw(::grpc::ClientContext* context, const ::ClientNamenode::RenameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ClientNamenode::RenameResponse, ::ClientNamenode::RenameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Rename_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::RenameResponse>* ClientService::Stub::AsyncRenameRaw(::grpc::ClientContext* context, const ::ClientNamenode::RenameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRenameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::Delete(::grpc::ClientContext* context, const ::ClientNamenode::DeleteRequest& request, ::ClientNamenode::DeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ClientNamenode::DeleteRequest, ::ClientNamenode::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void ClientService::Stub::async::Delete(::grpc::ClientContext* context, const ::ClientNamenode::DeleteRequest* request, ::ClientNamenode::DeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ClientNamenode::DeleteRequest, ::ClientNamenode::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void ClientService::Stub::async::Delete(::grpc::ClientContext* context, const ::ClientNamenode::DeleteRequest* request, ::ClientNamenode::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::DeleteResponse>* ClientService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::ClientNamenode::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ClientNamenode::DeleteResponse, ::ClientNamenode::DeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::DeleteResponse>* ClientService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::ClientNamenode::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::SetPermission(::grpc::ClientContext* context, const ::ClientNamenode::SetPermissionRequest& request, ::ClientNamenode::SetPermissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ClientNamenode::SetPermissionRequest, ::ClientNamenode::SetPermissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPermission_, context, request, response);
}

void ClientService::Stub::async::SetPermission(::grpc::ClientContext* context, const ::ClientNamenode::SetPermissionRequest* request, ::ClientNamenode::SetPermissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ClientNamenode::SetPermissionRequest, ::ClientNamenode::SetPermissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPermission_, context, request, response, std::move(f));
}

void ClientService::Stub::async::SetPermission(::grpc::ClientContext* context, const ::ClientNamenode::SetPermissionRequest* request, ::ClientNamenode::SetPermissionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPermission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::SetPermissionResponse>* ClientService::Stub::PrepareAsyncSetPermissionRaw(::grpc::ClientContext* context, const ::ClientNamenode::SetPermissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ClientNamenode::SetPermissionResponse, ::ClientNamenode::SetPermissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPermission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::SetPermissionResponse>* ClientService::Stub::AsyncSetPermissionRaw(::grpc::ClientContext* context, const ::ClientNamenode::SetPermissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPermissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::SetOwner(::grpc::ClientContext* context, const ::ClientNamenode::SetOwnerRequest& request, ::ClientNamenode::SetOwnerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ClientNamenode::SetOwnerRequest, ::ClientNamenode::SetOwnerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetOwner_, context, request, response);
}

void ClientService::Stub::async::SetOwner(::grpc::ClientContext* context, const ::ClientNamenode::SetOwnerRequest* request, ::ClientNamenode::SetOwnerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ClientNamenode::SetOwnerRequest, ::ClientNamenode::SetOwnerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetOwner_, context, request, response, std::move(f));
}

void ClientService::Stub::async::SetOwner(::grpc::ClientContext* context, const ::ClientNamenode::SetOwnerRequest* request, ::ClientNamenode::SetOwnerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetOwner_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::SetOwnerResponse>* ClientService::Stub::PrepareAsyncSetOwnerRaw(::grpc::ClientContext* context, const ::ClientNamenode::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ClientNamenode::SetOwnerResponse, ::ClientNamenode::SetOwnerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetOwner_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::SetOwnerResponse>* ClientService::Stub::AsyncSetOwnerRaw(::grpc::ClientContext* context, const ::ClientNamenode::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetOwnerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::AddBlock(::grpc::ClientContext* context, const ::ClientNamenode::AddBlockRequest& request, ::ClientNamenode::AddBlockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ClientNamenode::AddBlockRequest, ::ClientNamenode::AddBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddBlock_, context, request, response);
}

void ClientService::Stub::async::AddBlock(::grpc::ClientContext* context, const ::ClientNamenode::AddBlockRequest* request, ::ClientNamenode::AddBlockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ClientNamenode::AddBlockRequest, ::ClientNamenode::AddBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddBlock_, context, request, response, std::move(f));
}

void ClientService::Stub::async::AddBlock(::grpc::ClientContext* context, const ::ClientNamenode::AddBlockRequest* request, ::ClientNamenode::AddBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::AddBlockResponse>* ClientService::Stub::PrepareAsyncAddBlockRaw(::grpc::ClientContext* context, const ::ClientNamenode::AddBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ClientNamenode::AddBlockResponse, ::ClientNamenode::AddBlockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::AddBlockResponse>* ClientService::Stub::AsyncAddBlockRaw(::grpc::ClientContext* context, const ::ClientNamenode::AddBlockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::mkdir(::grpc::ClientContext* context, const ::ClientNamenode::mkdirRequest& request, ::ClientNamenode::mkdirResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ClientNamenode::mkdirRequest, ::ClientNamenode::mkdirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_mkdir_, context, request, response);
}

void ClientService::Stub::async::mkdir(::grpc::ClientContext* context, const ::ClientNamenode::mkdirRequest* request, ::ClientNamenode::mkdirResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ClientNamenode::mkdirRequest, ::ClientNamenode::mkdirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_mkdir_, context, request, response, std::move(f));
}

void ClientService::Stub::async::mkdir(::grpc::ClientContext* context, const ::ClientNamenode::mkdirRequest* request, ::ClientNamenode::mkdirResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_mkdir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::mkdirResponse>* ClientService::Stub::PrepareAsyncmkdirRaw(::grpc::ClientContext* context, const ::ClientNamenode::mkdirRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ClientNamenode::mkdirResponse, ::ClientNamenode::mkdirRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_mkdir_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::mkdirResponse>* ClientService::Stub::AsyncmkdirRaw(::grpc::ClientContext* context, const ::ClientNamenode::mkdirRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmkdirRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::Listing(::grpc::ClientContext* context, const ::ClientNamenode::GetListingRequest& request, ::ClientNamenode::GetListingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ClientNamenode::GetListingRequest, ::ClientNamenode::GetListingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Listing_, context, request, response);
}

void ClientService::Stub::async::Listing(::grpc::ClientContext* context, const ::ClientNamenode::GetListingRequest* request, ::ClientNamenode::GetListingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ClientNamenode::GetListingRequest, ::ClientNamenode::GetListingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Listing_, context, request, response, std::move(f));
}

void ClientService::Stub::async::Listing(::grpc::ClientContext* context, const ::ClientNamenode::GetListingRequest* request, ::ClientNamenode::GetListingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Listing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::GetListingResponse>* ClientService::Stub::PrepareAsyncListingRaw(::grpc::ClientContext* context, const ::ClientNamenode::GetListingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ClientNamenode::GetListingResponse, ::ClientNamenode::GetListingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Listing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::GetListingResponse>* ClientService::Stub::AsyncListingRaw(::grpc::ClientContext* context, const ::ClientNamenode::GetListingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::RenewLease(::grpc::ClientContext* context, const ::ClientNamenode::RenewLeaseRequest& request, ::ClientNamenode::RenewLeaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ClientNamenode::RenewLeaseRequest, ::ClientNamenode::RenewLeaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RenewLease_, context, request, response);
}

void ClientService::Stub::async::RenewLease(::grpc::ClientContext* context, const ::ClientNamenode::RenewLeaseRequest* request, ::ClientNamenode::RenewLeaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ClientNamenode::RenewLeaseRequest, ::ClientNamenode::RenewLeaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RenewLease_, context, request, response, std::move(f));
}

void ClientService::Stub::async::RenewLease(::grpc::ClientContext* context, const ::ClientNamenode::RenewLeaseRequest* request, ::ClientNamenode::RenewLeaseResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RenewLease_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::RenewLeaseResponse>* ClientService::Stub::PrepareAsyncRenewLeaseRaw(::grpc::ClientContext* context, const ::ClientNamenode::RenewLeaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ClientNamenode::RenewLeaseResponse, ::ClientNamenode::RenewLeaseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RenewLease_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ClientNamenode::RenewLeaseResponse>* ClientService::Stub::AsyncRenewLeaseRaw(::grpc::ClientContext* context, const ::ClientNamenode::RenewLeaseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRenewLeaseRaw(context, request, cq);
  result->StartCall();
  return result;
}

ClientService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::ClientNamenode::GetBlockLocationRequest, ::ClientNamenode::GetBlockLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ClientNamenode::GetBlockLocationRequest* req,
             ::ClientNamenode::GetBlockLocationResponse* resp) {
               return service->GetBlockLocation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::ClientNamenode::GetFileBlockLocationsRequest, ::ClientNamenode::GetFileBlockLocationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ClientNamenode::GetFileBlockLocationsRequest* req,
             ::ClientNamenode::GetFileBlockLocationsResponse* resp) {
               return service->GetFileBlockLocations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::ClientNamenode::GetServerDefaultsRequest, ::ClientNamenode::GetServerDefaultsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ClientNamenode::GetServerDefaultsRequest* req,
             ::ClientNamenode::GetServerDefaultsResponse* resp) {
               return service->GetServerDefaults(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::ClientNamenode::CreateRequest, ::ClientNamenode::CreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ClientNamenode::CreateRequest* req,
             ::ClientNamenode::CreateResponse* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::ClientNamenode::AppendRequest, ::ClientNamenode::AppendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ClientNamenode::AppendRequest* req,
             ::ClientNamenode::AppendResponse* resp) {
               return service->Append(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::ClientNamenode::RenameRequest, ::ClientNamenode::RenameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ClientNamenode::RenameRequest* req,
             ::ClientNamenode::RenameResponse* resp) {
               return service->Rename(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::ClientNamenode::DeleteRequest, ::ClientNamenode::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ClientNamenode::DeleteRequest* req,
             ::ClientNamenode::DeleteResponse* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::ClientNamenode::SetPermissionRequest, ::ClientNamenode::SetPermissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ClientNamenode::SetPermissionRequest* req,
             ::ClientNamenode::SetPermissionResponse* resp) {
               return service->SetPermission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::ClientNamenode::SetOwnerRequest, ::ClientNamenode::SetOwnerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ClientNamenode::SetOwnerRequest* req,
             ::ClientNamenode::SetOwnerResponse* resp) {
               return service->SetOwner(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::ClientNamenode::AddBlockRequest, ::ClientNamenode::AddBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ClientNamenode::AddBlockRequest* req,
             ::ClientNamenode::AddBlockResponse* resp) {
               return service->AddBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::ClientNamenode::mkdirRequest, ::ClientNamenode::mkdirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ClientNamenode::mkdirRequest* req,
             ::ClientNamenode::mkdirResponse* resp) {
               return service->mkdir(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::ClientNamenode::GetListingRequest, ::ClientNamenode::GetListingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ClientNamenode::GetListingRequest* req,
             ::ClientNamenode::GetListingResponse* resp) {
               return service->Listing(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::ClientNamenode::RenewLeaseRequest, ::ClientNamenode::RenewLeaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ClientNamenode::RenewLeaseRequest* req,
             ::ClientNamenode::RenewLeaseResponse* resp) {
               return service->RenewLease(ctx, req, resp);
             }, this)));
}

ClientService::Service::~Service() {
}

::grpc::Status ClientService::Service::GetBlockLocation(::grpc::ServerContext* context, const ::ClientNamenode::GetBlockLocationRequest* request, ::ClientNamenode::GetBlockLocationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::GetFileBlockLocations(::grpc::ServerContext* context, const ::ClientNamenode::GetFileBlockLocationsRequest* request, ::ClientNamenode::GetFileBlockLocationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::GetServerDefaults(::grpc::ServerContext* context, const ::ClientNamenode::GetServerDefaultsRequest* request, ::ClientNamenode::GetServerDefaultsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::Create(::grpc::ServerContext* context, const ::ClientNamenode::CreateRequest* request, ::ClientNamenode::CreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::Append(::grpc::ServerContext* context, const ::ClientNamenode::AppendRequest* request, ::ClientNamenode::AppendResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::Rename(::grpc::ServerContext* context, const ::ClientNamenode::RenameRequest* request, ::ClientNamenode::RenameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::Delete(::grpc::ServerContext* context, const ::ClientNamenode::DeleteRequest* request, ::ClientNamenode::DeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::SetPermission(::grpc::ServerContext* context, const ::ClientNamenode::SetPermissionRequest* request, ::ClientNamenode::SetPermissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::SetOwner(::grpc::ServerContext* context, const ::ClientNamenode::SetOwnerRequest* request, ::ClientNamenode::SetOwnerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::AddBlock(::grpc::ServerContext* context, const ::ClientNamenode::AddBlockRequest* request, ::ClientNamenode::AddBlockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::mkdir(::grpc::ServerContext* context, const ::ClientNamenode::mkdirRequest* request, ::ClientNamenode::mkdirResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::Listing(::grpc::ServerContext* context, const ::ClientNamenode::GetListingRequest* request, ::ClientNamenode::GetListingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::RenewLease(::grpc::ServerContext* context, const ::ClientNamenode::RenewLeaseRequest* request, ::ClientNamenode::RenewLeaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ClientNamenode

